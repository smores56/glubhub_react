{"version":3,"sources":["state/models.ts","state/route.ts","utils/context.tsx","state/constants.ts","state/types.ts","utils/helpers.ts","state/permissions.ts","components/Basics.tsx","components/ErrorBox.tsx","components/Complex.tsx","components/Table.tsx","components/List.tsx","state/error.ts","utils/request.ts","components/Buttons.tsx","utils/datetime.tsx","page/admin/AbsenceRequests.tsx","components/Forms.tsx","page/admin/create-event/state.ts","page/admin/create-event/Page.tsx","page/admin/DocumentLinks.tsx","page/admin/GigRequests.tsx","page/admin/Money.tsx","utils/style.ts","page/admin/OfficerPositions.tsx","page/admin/Semesters.tsx","page/admin/SitePermissions.tsx","components/DeleteModal.tsx","page/admin/Uniforms.tsx","page/admin/WebmasterTools.tsx","page/admin/Page.tsx","page/events/Carpools.tsx","page/events/EditCarpools.tsx","page/EditProfile.tsx","page/events/Details.tsx","page/events/Setlist.tsx","page/events/edit/state.tsx","page/events/edit/Page.tsx","page/events/Attendees.tsx","page/events/Attendance.tsx","page/events/RequestAbsence.tsx","page/events/Page.tsx","page/ForgotPassword.tsx","page/Login.tsx","page/minutes/Edit.tsx","page/minutes/Page.tsx","page/profile/Details.tsx","page/profile/Attendance.tsx","page/profile/Semesters.tsx","page/profile/Money.tsx","page/profile/Page.tsx","page/repertoire/Links.tsx","page/repertoire/Sidebar.tsx","page/repertoire/Edit.tsx","page/repertoire/Page.tsx","page/ResetPassword.tsx","page/Roster.tsx","components/Navbar.tsx","components/ConfirmAccount.tsx","page/home/AttendanceGraph.tsx","page/home/ThisWeek.tsx","page/home/Page.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Pitch","routeHome","name","route","routeLogin","routeRoster","routeProfile","email","tab","routeEditProfile","routeEvents","eventId","routeEditCarpools","routeRepertoire","songId","routeMinutes","minutesId","routeForgotPassword","routeResetPassword","token","routeAdmin","eventDetails","eventAttendees","eventAttendance","eventSetlist","eventCarpools","eventRequestAbsence","eventEdit","minutesPublic","minutesPrivate","minutesEdit","profileDetails","profileMoney","profileAttendance","profileSemesters","adminCreateEvent","gigRequestId","adminGigRequests","adminAbsenceRequests","adminSemesters","adminOfficerPositions","adminSitePermissions","adminDocumentLinks","adminWebmasterTools","adminUniforms","adminMoney","moneyAssignDues","moneyAssignLateDues","moneyBatchTransactions","semesterChange","semesterCreate","semesterEdit","repertoireDetails","repertoireEdit","parseProfileRoute","segments","length","undefined","parseEventsRoute","parseInt","isNaN","parseEditCarpoolsRoute","parseRepertoireRoute","parseMinutesRoute","parseResetPasswordRoute","parseAdminRoute","renderRoute","buildRoute","join","base","id","buildMinutesRoute","buildAdminRoute","buildRepertoireRoute","initialContext","user","members","info","currentSemester","updateUser","updateMembers","updateInfo","updateCurrentSemester","refreshAll","a","GlubHubContext","createContext","useGlubRoute","location","useLocation","history","useHistory","hash","startsWith","slice","parseRoute","split","goToRoute","push","replaceRoute","replace","emptyDocumentLink","url","emptyUniform","description","color","emptyTransactionBatch","amount","type","SECTION_ORDER","ALL_PITCHES","AFlat","A","ASharp","BFlat","B","BSharp","CFlat","C","CSharp","DFlat","D","DSharp","EFlat","E","ESharp","FFlat","F","FSharp","GFlat","G","GSharp","notAsked","status","loading","loaded","data","errorLoading","error","notSentYet","sending","errorSending","mapLoaded","mapper","isLoaded","resultToRemote","result","successful","resultToSubmissionState","checkSubmissionResult","setState","element","document","getElementById","scrollIntoView","behavior","isSending","state","isLoading","failedToSend","fullName","member","preferredName","firstName","lastName","permittedTo","permission","permissions","some","p","eventIsOver","event","Date","getTime","releaseTime","callTime","getToken","localStorage","getItem","setToken","setItem","removeItem","getOldToken","setOldToken","oldToken","rolePermissionsAreEqual","permission1","permission2","role","eventType","fileToBase64","file","Promise","resolve","reader","FileReader","onloadend","target","readAsDataURL","visibleAdminTabs","positions","includes","map","tabGroup","filter","pitchToUnicode","pitch","Error","romanNumeral","n","pair","word","numeral","Spinner","className","Title","centered","children","style","textAlign","Title4","Subtitle","Columns","Column","narrow","Box","Section","Container","Tooltip","content","cursor","data-tooltip","CheckOrCross","checked","Divider","vertical","data-content","EmailLink","href","PhoneLink","phone","formatPhone","ErrorBox","title","message","requiredPermission","reason","statusCode","paddingTop","paddingBottom","AttendanceIcon","attendance","colorClass","confirmed","tooltipContent","shouldAttend","RemoteContent","render","RequiresPermission","useContext","Sidebar","close","hidden","onClick","padding","SubmissionStateBox","Modal","MemberName","find","Table","props","fullwidth","striped","hoverable","c","table","scrollable","SelectableList","contentAtTop","listItems","groups","nonEmptyGroups","group","index","item","singleRow","flatMap","messageIfEmpty","contentAtBottom","backgroundColor","isSelected","onSelect","DividerRow","margin","unknownError","parseError","json","errorBody","success","get","makeRequest","post","body","postReturning","deleteRequest","method","parseReturnVal","config","headers","JSON","stringify","fetch","resp","chain","req1","req2","collect2","all","result1","result2","collect3","req3","result3","collect4","req4","result4","middleInlineStyle","display","verticalAlign","BackButton","click","fontSize","DeleteButton","aria-label","ButtonGroup","connected","alignment","x","buttonClassAndStyle","attrs","colorStyle","rgb","size","inverted","outlined","Button","disabled","LinkButton","SubmitButton","fullDateTimeFormatter","timestamp","moment","format","timeFormatter","hyphenDateFormatter","twentyFourHourTimeFormatter","dateFormatter","simpleDateWithYearFormatter","parseFormDateString","date","toDate","parseFormDateAndTimeString","time","AbsenceRequests","useState","requestsAndEvents","updateRequestsAndEvents","respondToAbsenceRequest","useCallback","request","action","update","r","e","useEffect","loadAbsenceRequests","width","respond","AbsenceRequestTable","AbsenceRequestRow","key","AbsenceRequestButtons","leftButton","rightButton","whiteSpace","maxWidth","height","colSpan","Control","expanded","InputWrapper","horizontal","helpText","FieldWrapper","classes","prefix","suffix","TextInput","value","toString","onChange","onInput","fromString","textType","placeholder","required","autoComplete","autocomplete","TextareaInput","SelectInput","leftAligned","currentTarget","values","val","selected","RadioInput","CheckboxInput","FileInput","selectFile","files","stringType","dateType","timeType","emailType","passwordType","phoneType","numberType","sectionType","sections","s","uniformType","u","uniforms","uniform","memberType","m","enrollmentType","semesterType","semesters","pitchType","unicode","songModeType","sm","emptyEventForm","semester","callDate","releaseDate","points","comments","gigCount","defaultAttend","repeat","repeatUntil","emptyGigForm","performanceTime","contactName","contactEmail","contactPhone","price","public","summary","eventFormFromGigRequest","organization","startTime","allRepeatPeriods","formJson","gig","includeGig","CreateEvent","form","updateForm","setSemesters","submit","preventDefault","loadSemesters","then","onSubmit","LeftColumn","MiddleColumn","eventTypes","RightColumn","isPublic","defaultNotAttend","period","DocumentLinks","links","updateLinks","newLink","updateNewLink","updateLink","link","l","i","deleteLink","_","createLink","loadLinks","borderSpacing","borderCollapse","paddingRight","create","NewLinkRow","GigRequests","requests","updateRequests","dismissRequest","reopenRequest","loadGigRequests","reopen","dismiss","GigRequestTable","SingleGigRequest","GigRequestButtons","Money","fees","updateFees","feeState","setFeeState","transactions","updateTransactions","transactionState","setTransactionState","resolveTransaction","transactionId","resolved","t","updateFeeAmount","fee","f","loadFees","loadTransactions","TabContent","MoneyActionButton","marginBottom","SingleFee","TransactionTable","sort","t1","t2","transaction","BeholdThe","text","CancelButton","AssignDuesModal","assignDues","AssignLateDuesModal","assignLateDues","BatchTransactions","batch","updateBatch","closeSidebar","toggleMember","sendBatch","transactionTypes","columnCount","columnGap","select","MemberBatchRow","inlineMiddleStyle","OfficerPositions","roles","updateRoles","toggleOfficer","from","to","removeRole","addRole","memberRole","loadOfficers","r1","r2","rank","maxQuantity","slot","roleGroups","toggle","MemberDropdown","newMember","Semesters","updateSemesters","option","emptySemesterForm","startDate","endDate","gigRequirement","semesterJson","EditSemesterPrelude","ChangeSemesterModal","setSelected","closeModal","changeSemester","window","reload","CreateSemesterSidebar","createSemester","newSemester","current","s1","s2","submitMessage","EditSemesterSidebar","editSemester","editedSemester","EditSemesterForm","SitePermissions","rolePermissions","updateRolePermissions","toggleRolePermission","rolePermission","enabled","rp","loadRolePermissions","permissionEventTypes","currentPermissions","et","PermissionCheckbox","ModalButtons","confirm","cancel","DeleteModal","Uniforms","setUniforms","newUniform","updateNewUniform","uniformToDelete","setUniformToDelete","updateUniform","deleteUniform","createUniform","loadUniforms","tryToDelete","UniformRow","NewUniformRow","DeleteUniformModal","WebmasterTools","uploadUrl","WebmasterFile","setFile","upload","alert","ok","marginTop","Admin","Carpools","carpools","setCarpools","loadCarpools","carpool","includeIcon","selection","selectEmptyCarpool","CarpoolPartialTable","driver","isDriver","passengers","passenger","NoMembersRow","CarpoolRow","passengerCount","ColumnElement","minWidth","EditCarpools","setData","updateState","setUpdateState","getSelectedIfAllUnassigned","membersLeft","remainingMembers","selectedMembers","every","selectMember","moveBackToUnassigned","addNewCarpool","allUnassigned","loadedData","updateCarpools","eventUrl","cleanupCarpools","loadData","RemainingMemberTable","memberInCarpool","EditProfile","formForUser","emptyProfileForm","enteredPassword","password","confirmPassword","section","passHash","Md5","hashStr","buildProfileBody","loggedIn","HeaderText","strikethrough","textDecoration","FormFields","phoneNumber","major","hometown","about","picture","arrivedAtTech","getFullYear","ActionButtons","CarFieldBlock","hasCar","LocationFieldBlock","onCampus","EnrollmentBlock","enrollment","EnrollmentOption","gatewayDrug","conflicts","dietaryRestrictions","Details","updateEvent","deletedEvent","rsvpState","setRsvpState","updateAttending","attending","rsvp","requestAbsence","SubtitleAndLocation","rel","AttendanceBlock","rsvpIssue","RsvpActions","rsvpButton","AttendanceSummary","didAttend","UniformSection","AbsenceRequestButton","absenceRequest","OfficerInfoSection","deleteState","setDeleteState","deleteEvent","ContactInfo","Setlist","songs","setSongs","loadSongs","song","SongRow","startingPitch","buildUpdateBody","EditEvent","eventFormFromEvent","eventForm","updateEventForm","allUniforms","gigFormFromEvent","gigForm","updateGigForm","updatedEvent","formData","updateGig","allSemesters","pub","Attendees","attendees","setAttendees","loadAttendees","AttendeeTables","separateAttendees","notAttending","AttendeeTable","notConfirmed","AttendeeNameList","attendee","separateByConfirmed","givenAttendees","Map","inSection","Attendance","updateAttendance","groupAttendees","updateAttendee","AttendeeRow","minutesLate","RequestAbsence","setReason","newRequest","Events","events","setEvents","loadEvent","selectEvent","unselectEvent","changeTab","propagateEventUpdate","loadEvents","selectedId","upcomingEvents","pastEvents","EventColumns","column","allowedEventTypes","EventRow","EventTabs","TabLink","currentTab","header","ForgotPassword","setEmail","confirmEmail","setConfirmEmail","Login","setPassword","onSuccessfulLogin","alt","src","EditMinutes","minutes","saved","deleted","saveState","setSaveState","visibility","setVisibility","setContent","useRef","_content","updateVisibility","newVisibility","private","updateMinutes","deleteMinutes","save","DeleteMinutesModal","MinutesEditor","apiKey","initialValue","init","setupEditor","editor","onEditorChange","EditHeader","Minutes","updateSelected","showAllMinutes","setShowAllMinutes","createState","setCreateState","createNewMinutes","newMinutesTitle","newMinutes","loadMinutes","propagateUpdateMinutes","updated","savedMinutes","deletedMinutes","loadAllMinutes","toggleShowAllMinutes","MinutesList","MinutesTabList","SingleTab","dangerouslySetInnerHTML","__html","updateMember","updatedMember","startEditing","formForMember","ReadOnlyDetails","rows","EditProfileForm","grades","updateGrades","loadAttendance","eventsWithChanges","AttendanceRow","change","partialScore","grade","Math","round","TransactionRow","Profile","setMember","loadMember","ProfileTextContent","minor","ProfilePic","UserActions","loginAsState","setLoginAsState","logout","logBackIn","loginAsMember","newToken","deleteMember","DeleteMemberModal","ProfileTabs","profileTab","SongLinkButton","baseButton","onDelete","SheetMusicLink","MidiLink","VideoLink","alignItems","marginRight","paddingLeft","DefaultLink","SongSidebar","mode","border","PitchSection","Tone","Synth","toMaster","triggerAttackRelease","Midi","playPitch","emptyFileLink","emptyUrlLink","Edit","propagateUpdate","updateSong","listStyle","typeName","EditFileType","newFile","updateNewFile","addLinkToSong","path","createAndGetNewLink","NewPerformanceSection","newPerformance","updateNewPerformance","addPerformanceToSong","Repertoire","loadSong","createSong","deleteSong","columns","currentSongsFilter","otherAToGFilter","otherHToPFilter","otherQToZFilter","maybeCreateButton","toLowerCase","CreateSongButton","ResetPassword","setConfirmPassword","Roster","Navbar","setExpanded","toggleExpanded","collapseBurgerKey","singleLink","documents","AdminLinks","adminTabs","divider","adminTab","HomeLogo","BurgerButton","aria-expanded","aria-hidden","ConfirmAccountHeader","ignoreConfirm","setIgnoreConfirm","confirming","setConfirming","isActive","ConfirmAccountModal","confirmAccount","AttendanceGraph","hover","d3Container","top","right","bottom","left","d3","rangeRound","y","domain","svg","html","append","attr","call","ticks","valueline","max","curve","datum","ref","cx","cy","strokeWidth","glubEvent","fillOpacity","onMouseOver","clientX","clientY","onMouseOut","gradientTransform","offset","stopColor","stopOpacity","ThisWeek","now","monday","sunday","range","tooCloseToPrevious","circleX","tickFormat","tickSizeOuter","timelineLineWidth","yPosition","circleRadius","Home","hovered","setHovered","finalGrade","hoverEvent","allEvents","GradesBlock","attendanceMessage","overflowX","EventHoverBox","position","transform","UpcomingEvents","Volunteerism","volunteerGigsAttended","metGigRequirement","gigList","Array","fill","GigIcon","createBrowserHistory","App","appData","setAppData","hasToken","Provider","CurrentPage","Boolean","hostname","match","ReactDOM","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.b4a9cb77.chunk.js","sourcesContent":["export interface Member {\n  email: string;\n  firstName: string;\n  preferredName: string | null;\n  lastName: string;\n  phoneNumber: string;\n  picture: string | null;\n  passengers: number;\n  location: string;\n  onCampus: boolean | null;\n  about: string | null;\n  major: string | null;\n  minor: string | null;\n  hometown: string | null;\n  arrivedAtTech: number | null;\n  gatewayDrug: string | null;\n  conflicts: string | null;\n  dietaryRestrictions: string | null;\n  section: string | null;\n  enrollment: Enrollment | null;\n  permissions?: MemberPermission[];\n  positions?: string[];\n}\n\nexport interface GlubSimpleEvent {\n  id: number;\n  name: string;\n  semester: string;\n  type: GlubEventType;\n  callTime: number;\n  releaseTime: number | null;\n  points: number;\n  comments: string | null;\n  location: string | null;\n  gigCount: boolean;\n  defaultAttend: boolean;\n  section: string | null;\n  gig?: Gig | null;\n}\n\nexport type GlubEventType =\n  | \"Volunteer Gig\"\n  | \"Rehearsal\"\n  | \"Sectional\"\n  | \"Tutti Gig\"\n  | \"Ombuds\"\n  | \"Other\";\n\nexport interface Gig {\n  performanceTime: number;\n  uniform: number;\n  contactName: string | null;\n  contactEmail: string | null;\n  contactPhone: string | null;\n  price: number | null;\n  public: boolean;\n  summary: string | null;\n  description: string | null;\n}\n\ninterface GlubEventAttendanceFields {\n  rsvpIssue: string | null;\n  attendance: SimpleAttendance | null;\n  change: SimpleGradeChange | null;\n  absenceRequest: AbsenceRequest | null;\n}\n\nexport interface GlubEvent extends GlubSimpleEvent, GlubEventAttendanceFields {}\n\nexport interface SimpleGradeChange {\n  change: number;\n  reason: string;\n  partialScore: number;\n}\n\nexport interface SimpleAttendance {\n  shouldAttend: boolean;\n  didAttend: boolean;\n  confirmed: boolean;\n  minutesLate: number;\n}\n\nexport const defaultSimpleAttendance = {\n  shouldAttend: false,\n  didAttend: false,\n  confirmed: false,\n  minutesLate: 0\n};\n\nexport interface Attendance extends SimpleAttendance {\n  member: string;\n  event: number;\n}\n\nexport interface EventAttendance {\n  event: GlubEvent;\n  attendance: SimpleAttendance;\n}\n\nexport interface EventAttendee {\n  member: Member;\n  attendance: SimpleAttendance;\n}\n\nexport interface EventCarpool {\n  id: number;\n  event: number;\n  driver: Member;\n  passengers: Member[];\n}\n\nexport interface UpdatedCarpool {\n  driver: Member;\n  passengers: Member[];\n}\n\nexport interface Grades {\n  grade: number;\n  eventsWithChanges: GlubEvent[];\n  volunteerGigsAttended: number;\n}\n\nexport interface GradeChange {\n  event: GlubEvent;\n  attendance: SimpleAttendance;\n  reason: string;\n  change: number;\n  partialScore: number;\n}\n\nexport interface MemberPermission {\n  name: string;\n  eventType: string | null;\n}\n\nexport interface MemberRole {\n  member: Member;\n  role: Role;\n}\n\nexport interface ActiveSemester {\n  semester: string;\n  enrollment: Enrollment | null;\n  section: string | null;\n  grades: Grades;\n}\n\nexport interface Info {\n  eventTypes: EventType[];\n  mediaTypes: MediaType[];\n  permissions: Permission[];\n  roles: Role[];\n  sections: string[];\n  transactionTypes: string[];\n  uniforms: Uniform[];\n  documents: DocumentLink[];\n}\n\nexport interface DocumentLink {\n  name: string;\n  url: string;\n}\n\nexport const emptyDocumentLink = { name: \"\", url: \"\" };\n\nexport type Enrollment = \"Class\" | \"Club\";\n\nexport interface MediaType {\n  name: string;\n  order: number;\n  storage: StorageType;\n}\n\nexport type StorageType = \"Local\" | \"Remote\";\n\nexport interface EventType {\n  name: GlubEventType;\n  weight: number;\n}\n\nexport interface Permission {\n  name: string;\n  description: string | null;\n  type: PermissionType;\n}\n\nexport type PermissionType = \"Static\" | \"Event\";\n\nexport interface Role {\n  name: string;\n  rank: number;\n  maxQuantity: number;\n}\n\nexport interface Uniform {\n  id: number;\n  name: string;\n  color: string | null;\n  description: string | null;\n}\n\nexport const emptyUniform = { name: \"\", description: \"\", color: null, id: 0 };\n\nexport interface Semester {\n  name: string;\n  startDate: number;\n  endDate: number;\n  gigRequirement: number;\n  current: boolean;\n}\n\nexport interface Transaction {\n  id: number;\n  member: string;\n  time: number;\n  amount: number;\n  description: string;\n  semester: string | null;\n  type: string;\n  resolved: boolean;\n}\n\nexport interface MeetingMinutes {\n  id: number;\n  name: string;\n  date: number;\n  public: string | null;\n  private: string | null;\n}\n\nexport interface Announcement {\n  id: number;\n  member: string | null;\n  semester: string;\n  time: number;\n  content: string;\n  archived: boolean;\n}\n\nexport interface MemberPermission {\n  name: string;\n  eventType: string | null;\n}\n\nexport interface RolePermission {\n  role: string;\n  permission: string;\n  eventType: string | null;\n}\n\nexport interface Fee {\n  name: string;\n  description: string;\n  amount: number;\n}\n\nexport interface AbsenceRequest {\n  member: string;\n  event: number;\n  time: number;\n  reason: string;\n  state: AbsenceRequestState;\n}\n\nexport type AbsenceRequestState = \"Approved\" | \"Denied\" | \"Pending\";\n\nexport interface GigRequest {\n  id: number;\n  time: number;\n  name: string;\n  organization: string;\n  event: number | null;\n  contactName: string;\n  contactEmail: string;\n  contactPhone: string;\n  startTime: number;\n  location: string;\n  comments: string | null;\n  status: GigRequestStatus;\n}\n\nexport type GigRequestStatus = \"Accepted\" | \"Dismissed\" | \"Pending\";\n\nexport interface TransactionBatch {\n  members: string[];\n  amount: number | null;\n  type: string;\n  description: string;\n}\n\nexport const emptyTransactionBatch: TransactionBatch = {\n  members: [],\n  amount: null,\n  type: \"Expense\",\n  description: \"\"\n};\n\nexport interface Song {\n  id: number;\n  title: string;\n  info: string | null;\n  current: boolean;\n  key: Pitch | null;\n  startingPitch: Pitch | null;\n  mode: SongMode | null;\n  links?: SongLinkSection[];\n}\n\nexport interface SongLinkSection {\n  name: String;\n  links: SongLink[];\n}\n\nexport interface SongLink {\n  id: number;\n  song: number;\n  type: string;\n  name: string;\n  target: string;\n}\n\nexport type SongMode = \"Major\" | \"Minor\";\n\nexport enum Pitch {\n  AFlat = \"AFlat\",\n  A = \"A\",\n  ASharp = \"ASharp\",\n  BFlat = \"BFlat\",\n  B = \"B\",\n  BSharp = \"BSharp\",\n  CFlat = \"CFlat\",\n  C = \"C\",\n  CSharp = \"CSharp\",\n  DFlat = \"DFlat\",\n  D = \"D\",\n  DSharp = \"DSharp\",\n  EFlat = \"EFlat\",\n  E = \"E\",\n  ESharp = \"ESharp\",\n  FFlat = \"FFlat\",\n  F = \"F\",\n  FSharp = \"FSharp\",\n  GFlat = \"GFlat\",\n  G = \"G\",\n  GSharp = \"GSharp\"\n}\n","// Route Constructors\n\nexport interface RouteHome {\n  name: \"Home\";\n  route: \"\";\n}\nexport const routeHome: RouteHome = { name: \"Home\", route: \"\" };\n\nexport interface RouteLogin {\n  name: \"Login\";\n  route: \"login\";\n}\nexport const routeLogin: RouteLogin = { name: \"Login\", route: \"login\" };\n\nexport interface RouteRoster {\n  name: \"People\";\n  route: \"roster\";\n}\nexport const routeRoster: RouteRoster = { name: \"People\", route: \"roster\" };\n\nexport interface RouteProfile {\n  name: \"Profile\";\n  route: \"profile\";\n  email: string;\n  tab: ProfileTab | null;\n}\nexport const routeProfile = (\n  email: string,\n  tab: ProfileTab | null\n): RouteProfile => ({\n  name: \"Profile\",\n  route: \"profile\",\n  email,\n  tab\n});\n\nexport interface RouteEditProfile {\n  name: \"Edit Profile\";\n  route: \"edit-profile\";\n}\nexport const routeEditProfile: RouteEditProfile = {\n  name: \"Edit Profile\",\n  route: \"edit-profile\"\n};\n\nexport interface RouteEvents {\n  name: \"Events\";\n  route: \"events\";\n  eventId: number | null;\n  tab: EventTab | null;\n}\nexport const routeEvents = (\n  eventId: number | null,\n  tab: EventTab | null\n): RouteEvents => ({\n  name: \"Events\",\n  route: \"events\",\n  eventId,\n  tab\n});\n\nexport interface RouteEditCarpools {\n  name: \"Edit Carpools\";\n  route: \"edit-carpools\";\n  eventId: number;\n}\nexport const routeEditCarpools = (eventId: number): RouteEditCarpools => ({\n  name: \"Edit Carpools\",\n  route: \"edit-carpools\",\n  eventId\n});\n\nexport interface RouteRepertoire {\n  name: \"Repertoire\";\n  route: \"repertoire\";\n  songId: number | null;\n  tab: RepertoireTab | null;\n}\nexport const routeRepertoire = (\n  songId: number | null,\n  tab: RepertoireTab | null\n): RouteRepertoire => ({\n  name: \"Repertoire\",\n  route: \"repertoire\",\n  songId,\n  tab\n});\n\nexport interface RouteMinutes {\n  name: \"Minutes\";\n  route: \"minutes\";\n  minutesId: number | null;\n  tab: MinutesTab | null;\n}\nexport const routeMinutes = (\n  minutesId: number | null,\n  tab: MinutesTab | null\n): RouteMinutes => ({\n  name: \"Minutes\",\n  route: \"minutes\",\n  minutesId,\n  tab\n});\n\nexport interface RouteForgotPassword {\n  name: \"Forgot Password\";\n  route: \"forgot-password\";\n}\nexport const routeForgotPassword: RouteForgotPassword = {\n  name: \"Forgot Password\",\n  route: \"forgot-password\"\n};\n\nexport interface RouteResetPassword {\n  name: \"Reset Password\";\n  route: \"reset-password\";\n  token: string | null;\n}\nexport const routeResetPassword = (\n  token: string | null\n): RouteResetPassword => ({\n  name: \"Reset Password\",\n  route: \"reset-password\",\n  token\n});\n\nexport interface RouteAdmin {\n  name: \"Admin\";\n  route: \"admin\";\n  tab: AdminRoute | null;\n}\nexport const routeAdmin = (tab: AdminRoute | null): RouteAdmin => ({\n  name: \"Admin\",\n  route: \"admin\",\n  tab\n});\n\nexport type GlubRoute =\n  | RouteHome\n  | RouteLogin\n  | RouteRoster\n  | RouteProfile\n  | RouteEditProfile\n  | RouteEvents\n  | RouteEditCarpools\n  | RouteRepertoire\n  | RouteMinutes\n  | RouteForgotPassword\n  | RouteResetPassword\n  | RouteAdmin;\n\n// Events Page Tabs //////////////////////////\n\nexport type EventTab =\n  | { name: \"Details\"; route: \"details\" }\n  | { name: \"Who's Attending\"; route: \"attendees\" }\n  | { name: \"Attendance\"; route: \"attendance\" }\n  | { name: \"Setlist\"; route: \"setlist\" }\n  | { name: \"Carpools\"; route: \"carpools\" }\n  | { name: \"Request Absence\"; route: \"request-absence\" }\n  | { name: \"Edit\"; route: \"edit\" };\n\n// Events Tab Constructors\n\nexport const eventDetails: EventTab = { name: \"Details\", route: \"details\" };\nexport const eventAttendees: EventTab = {\n  name: \"Who's Attending\",\n  route: \"attendees\"\n};\nexport const eventAttendance: EventTab = {\n  name: \"Attendance\",\n  route: \"attendance\"\n};\nexport const eventSetlist: EventTab = { name: \"Setlist\", route: \"setlist\" };\nexport const eventCarpools: EventTab = { name: \"Carpools\", route: \"carpools\" };\nexport const eventRequestAbsence: EventTab = {\n  name: \"Request Absence\",\n  route: \"request-absence\"\n};\nexport const eventEdit: EventTab = { name: \"Edit\", route: \"edit\" };\n\n// Minutes Page Tabs //////////////////////////\n\nexport type MinutesTab =\n  | { name: \"Public\"; route: \"public\" }\n  | { name: \"Private\"; route: \"private\" }\n  | { name: \"Edit\"; route: \"edit\" };\n\n// Minutes Tab Constructors\n\nexport const minutesPublic: MinutesTab = { name: \"Public\", route: \"public\" };\nexport const minutesPrivate: MinutesTab = { name: \"Private\", route: \"private\" };\nexport const minutesEdit: MinutesTab = { name: \"Edit\", route: \"edit\" };\n\n// Profile Page Tabs //////////////////////////\n\nexport type ProfileTab =\n  | { name: \"Details\"; route: \"details\" }\n  | { name: \"Money\"; route: \"money\" }\n  | { name: \"Attendance\"; route: \"attendance\" }\n  | { name: \"Semesters\"; route: \"semesters\" };\n\n// Profile Tab Constructors\n\nexport const profileDetails: ProfileTab = { name: \"Details\", route: \"details\" };\nexport const profileMoney: ProfileTab = { name: \"Money\", route: \"money\" };\nexport const profileAttendance: ProfileTab = {\n  name: \"Attendance\",\n  route: \"attendance\"\n};\nexport const profileSemesters: ProfileTab = {\n  name: \"Semesters\",\n  route: \"semesters\"\n};\n\n// Admin Page Tabs //////////////////////////\n\nexport type AdminRoute =\n  | { name: \"Create Event\"; route: \"create-event\"; gigRequestId: number | null }\n  | { name: \"Gig Requests\"; route: \"gig-requests\" }\n  | { name: \"Absence Requests\"; route: \"absence-requests\" }\n  | { name: \"Edit the Semester\"; route: \"semesters\"; tab: SemesterTab | null }\n  | { name: \"Edit Officers\"; route: \"officer-positions\" }\n  | { name: \"Edit Permissions\"; route: \"site-permissions\" }\n  | { name: \"Edit Documents\"; route: \"document-links\" }\n  | { name: \"Upload API or Site\"; route: \"webmaster-tools\" }\n  | { name: \"Uniforms\"; route: \"uniforms\" }\n  | { name: \"Money\"; route: \"money\"; tab: MoneyTab | null };\n\n// Admin Tab Constructors\n\nexport const adminCreateEvent = (gigRequestId: number | null): AdminRoute => ({\n  name: \"Create Event\",\n  route: \"create-event\",\n  gigRequestId\n});\nexport const adminGigRequests: AdminRoute = {\n  name: \"Gig Requests\",\n  route: \"gig-requests\"\n};\nexport const adminAbsenceRequests: AdminRoute = {\n  name: \"Absence Requests\",\n  route: \"absence-requests\"\n};\nexport const adminSemesters = (tab: SemesterTab | null): AdminRoute => ({\n  name: \"Edit the Semester\",\n  route: \"semesters\",\n  tab\n});\nexport const adminOfficerPositions: AdminRoute = {\n  name: \"Edit Officers\",\n  route: \"officer-positions\"\n};\nexport const adminSitePermissions: AdminRoute = {\n  name: \"Edit Permissions\",\n  route: \"site-permissions\"\n};\nexport const adminDocumentLinks: AdminRoute = {\n  name: \"Edit Documents\",\n  route: \"document-links\"\n};\nexport const adminWebmasterTools: AdminRoute = {\n  name: \"Upload API or Site\",\n  route: \"webmaster-tools\"\n};\nexport const adminUniforms: AdminRoute = {\n  name: \"Uniforms\",\n  route: \"uniforms\"\n};\nexport const adminMoney = (tab: MoneyTab | null): AdminRoute => ({\n  name: \"Money\",\n  route: \"money\",\n  tab\n});\n\n// Money Tabs //////////////////////////\n\nexport type MoneyTab =\n  | { route: \"assign-dues\"; name: \"Assign everyone dues\" }\n  | { route: \"assign-late-dues\"; name: \"Make remaining dues late\" }\n  | {\n      route: \"batch-transactions\";\n      name: \"Bake a batch of chocolate chip transactions\";\n    };\n\n// Money Tab Constructors\n\nexport const moneyAssignDues: MoneyTab = {\n  route: \"assign-dues\",\n  name: \"Assign everyone dues\"\n};\nexport const moneyAssignLateDues: MoneyTab = {\n  route: \"assign-late-dues\",\n  name: \"Make remaining dues late\"\n};\nexport const moneyBatchTransactions: MoneyTab = {\n  route: \"batch-transactions\",\n  name: \"Bake a batch of chocolate chip transactions\"\n};\n\n// Edit Semester Tabs //////////////////////////\n\nexport type SemesterTab =\n  | { route: \"change\"; name: \"Switch semesters\" }\n  | { route: \"create\"; name: \"Birth a semester\" }\n  | {\n      route: \"edit\";\n      name: \"Edit this semester\";\n    };\n\n// Edit Semester Tab Constructors\n\nexport const semesterChange: SemesterTab = {\n  route: \"change\",\n  name: \"Switch semesters\"\n};\nexport const semesterCreate: SemesterTab = {\n  route: \"create\",\n  name: \"Birth a semester\"\n};\nexport const semesterEdit: SemesterTab = {\n  route: \"edit\",\n  name: \"Edit this semester\"\n};\n\n// Edit Semester Tabs //////////////////////////\n\nexport type RepertoireTab =\n  | { route: \"details\"; name: \"Details\" }\n  | { route: \"edit\"; name: \"Edit\" };\n\n// Edit Semester Tab Constructors\n\nexport const repertoireDetails: RepertoireTab = {\n  route: \"details\",\n  name: \"Details\"\n};\nexport const repertoireEdit: RepertoireTab = {\n  route: \"edit\",\n  name: \"Edit\"\n};\n\n// Parsing Routes //////////////////////////\n\nexport const parseRoute = (segments: string[]): GlubRoute | null => {\n  if (segments.length === 0) {\n    return routeHome;\n  }\n\n  switch (segments[0]) {\n    case routeLogin.route:\n      return routeLogin;\n\n    case routeRoster.route:\n      return routeRoster;\n\n    case routeProfile(\"\", null).route:\n      return parseProfileRoute(segments.slice(1));\n\n    case routeEditProfile.route:\n      return routeEditProfile;\n\n    case routeEvents(null, null).route:\n      return parseEventsRoute(segments.slice(1));\n\n    case routeEditCarpools(0).route:\n      return parseEditCarpoolsRoute(segments.slice(1));\n\n    case routeRepertoire(null, null).route:\n      return parseRepertoireRoute(segments.slice(1));\n\n    case routeMinutes(null, null).route:\n      return parseMinutesRoute(segments.slice(1));\n\n    case routeForgotPassword.route:\n      return routeForgotPassword;\n\n    case routeResetPassword(null).route:\n      return parseResetPasswordRoute(segments.slice(1));\n\n    case routeAdmin(null).route:\n      return parseAdminRoute(segments.slice(1));\n\n    default:\n      return null;\n  }\n};\n\n// Parsing Helpers\n\nconst parseProfileRoute = (segments: string[]): GlubRoute | null => {\n  if (segments.length === 0) {\n    return null;\n  }\n\n  const email = segments[0];\n  switch (segments[1]) {\n    case undefined:\n      return routeProfile(email, null);\n\n    case profileAttendance.route:\n      return routeProfile(email, profileAttendance);\n\n    case profileDetails.route:\n      return routeProfile(email, profileDetails);\n\n    case profileMoney.route:\n      return routeProfile(email, profileMoney);\n\n    case profileSemesters.route:\n      return routeProfile(email, profileSemesters);\n\n    default:\n      return null;\n  }\n};\n\nconst parseEventsRoute = (segments: string[]): GlubRoute | null => {\n  if (segments.length === 0) {\n    return routeEvents(null, null);\n  }\n\n  const eventId = parseInt(segments[0]);\n  if (isNaN(eventId)) {\n    return null;\n  }\n\n  switch (segments[1]) {\n    case undefined:\n      return routeEvents(eventId, null);\n\n    case eventDetails.route:\n      return routeEvents(eventId, eventDetails);\n\n    case eventAttendees.route:\n      return routeEvents(eventId, eventAttendees);\n\n    case eventAttendance.route:\n      return routeEvents(eventId, eventAttendance);\n\n    case eventSetlist.route:\n      return routeEvents(eventId, eventSetlist);\n\n    case eventCarpools.route:\n      return routeEvents(eventId, eventCarpools);\n\n    case eventRequestAbsence.route:\n      return routeEvents(eventId, eventRequestAbsence);\n\n    case eventEdit.route:\n      return routeEvents(eventId, eventEdit);\n\n    default:\n      return null;\n  }\n};\n\nconst parseEditCarpoolsRoute = (segments: string[]): GlubRoute | null => {\n  const eventId = parseInt(segments[0]);\n  if (!isNaN(eventId)) {\n    return routeEditCarpools(eventId);\n  } else {\n    return null;\n  }\n};\n\nconst parseRepertoireRoute = (segments: string[]): GlubRoute | null => {\n  if (segments.length === 0) {\n    return routeRepertoire(null, null);\n  }\n\n  const songId = parseInt(segments[0]);\n  if (isNaN(songId)) {\n    return null;\n  }\n\n  switch (segments[1]) {\n    case undefined:\n      return routeRepertoire(songId, null);\n\n    case repertoireDetails.route:\n      return routeRepertoire(songId, repertoireDetails);\n\n    case repertoireEdit.route:\n      return routeRepertoire(songId, repertoireEdit);\n\n    default:\n      return null;\n  }\n};\n\nconst parseMinutesRoute = (segments: string[]): GlubRoute | null => {\n  if (segments.length === 0) {\n    return routeMinutes(null, null);\n  }\n\n  const minutesId = parseInt(segments[0]);\n  if (isNaN(minutesId)) {\n    return null;\n  }\n\n  switch (segments[1]) {\n    case undefined:\n      return routeMinutes(minutesId, null);\n\n    case minutesPublic.route:\n      return routeMinutes(minutesId, minutesPublic);\n\n    case minutesPrivate.route:\n      return routeMinutes(minutesId, minutesPrivate);\n\n    case minutesEdit.route:\n      return routeMinutes(minutesId, minutesEdit);\n\n    default:\n      return null;\n  }\n};\n\nconst parseResetPasswordRoute = (segments: string[]): GlubRoute | null => {\n  return routeResetPassword(segments[0] || null);\n};\n\nconst parseAdminRoute = (segments: string[]): GlubRoute | null => {\n  if (segments.length === 0) {\n    return routeAdmin(null);\n  }\n\n  switch (segments[0]) {\n    case adminGigRequests.route:\n      return routeAdmin(adminGigRequests);\n\n    case adminAbsenceRequests.route:\n      return routeAdmin(adminAbsenceRequests);\n\n    case adminOfficerPositions.route:\n      return routeAdmin(adminOfficerPositions);\n\n    case adminSitePermissions.route:\n      return routeAdmin(adminSitePermissions);\n\n    case adminDocumentLinks.route:\n      return routeAdmin(adminDocumentLinks);\n\n    case adminWebmasterTools.route:\n      return routeAdmin(adminWebmasterTools);\n\n    case adminUniforms.route:\n      return routeAdmin(adminUniforms);\n\n    case adminSemesters(null).route:\n      if (segments.length === 1) {\n        return routeAdmin(adminSemesters(null));\n      }\n\n      switch (segments[1]) {\n        case semesterChange.route:\n          return routeAdmin(adminSemesters(semesterChange));\n\n        case semesterCreate.route:\n          return routeAdmin(adminSemesters(semesterCreate));\n\n        case semesterEdit.route:\n          return routeAdmin(adminSemesters(semesterEdit));\n\n        default:\n          return null;\n      }\n\n    case adminMoney(null).route:\n      if (segments.length === 1) {\n        return routeAdmin(adminMoney(null));\n      }\n\n      switch (segments[1]) {\n        case moneyAssignDues.route:\n          return routeAdmin(adminMoney(moneyAssignDues));\n\n        case moneyAssignLateDues.route:\n          return routeAdmin(adminMoney(moneyAssignLateDues));\n\n        case moneyBatchTransactions.route:\n          return routeAdmin(adminMoney(moneyBatchTransactions));\n\n        default:\n          return null;\n      }\n\n    case adminCreateEvent(null).route:\n      if (segments.length === 1) {\n        return routeAdmin(adminCreateEvent(null));\n      }\n\n      const gigRequestId = parseInt(segments[1]);\n      if (!isNaN(gigRequestId)) {\n        return routeAdmin(adminCreateEvent(gigRequestId));\n      } else {\n        return null;\n      }\n\n    default:\n      return null;\n  }\n};\n\n// Routes to String //////////////////////////\n\nexport const renderRoute = (route: GlubRoute): string =>\n  `#/${buildRoute(route).join(\"/\")}`;\n\n// Route Building Helpers\n\nconst buildAdminRoute = (base: string, tab: AdminRoute | null): string[] => {\n  if (tab === null) {\n    return [base];\n  } else if (tab.route === \"create-event\" && tab.gigRequestId !== null) {\n    return [base, tab.route, `${tab.gigRequestId}`];\n  } else if (tab.route === \"money\" && tab.tab !== null) {\n    return [base, tab.route, tab.tab.route];\n  } else if (tab.route === \"semesters\" && tab.tab !== null) {\n    return [base, tab.route, tab.tab.route];\n  } else {\n    return [base, tab.route];\n  }\n};\n\nconst buildEventsRoute = (\n  base: string,\n  id: number | null,\n  tab: EventTab | null\n): string[] => [base, ...(id ? [`${id}`] : []), ...(tab ? [tab.route] : [])];\n\nconst buildRepertoireRoute = (\n  base: string,\n  songId: number | null,\n  tab: RepertoireTab | null\n): string[] => [\n  base,\n  ...(songId ? [`${songId}`] : []),\n  ...(tab ? [tab.route] : [])\n];\n\nconst buildMinutesRoute = (\n  base: string,\n  id: number | null,\n  tab: MinutesTab | null\n): string[] => [base, ...(id ? [`${id}`] : []), ...(tab ? [tab.route] : [])];\n\nconst buildRoute = (route: GlubRoute): string[] => {\n  if (!route.route) {\n    return [];\n  } else if (route.route === \"events\") {\n    return buildEventsRoute(route.route, route.eventId, route.tab);\n  } else if (route.route === \"minutes\") {\n    return buildMinutesRoute(route.route, route.minutesId, route.tab);\n  } else if (route.route === \"admin\") {\n    return buildAdminRoute(route.route, route.tab);\n  } else if (route.route === \"repertoire\") {\n    return buildRepertoireRoute(route.route, route.songId, route.tab);\n  } else if (route.route === \"profile\") {\n    return [route.route, route.email, ...(route.tab ? [route.tab.route] : [])];\n  } else if (route.route === \"reset-password\") {\n    return [route.route, ...(route.token ? [route.token] : [])];\n  } else if (route.route === \"edit-carpools\") {\n    return [route.route, `${route.eventId}`];\n  } else {\n    return [route.route];\n  }\n};\n","import { createContext, Context } from \"react\";\nimport { Member, Info, Semester } from \"state/models\";\nimport { GlubRoute, parseRoute, renderRoute } from \"state/route\";\nimport { useLocation, useHistory } from \"react-router-dom\";\n\ninterface GlubHubContextData {\n  user: Member | null;\n  members: Member[];\n  info: Info;\n  currentSemester: Semester;\n}\n\ninterface GlubHubContextUpdate {\n  updateUser: (member: Member | null) => void;\n  updateMembers: (members: Member[]) => void;\n  updateInfo: (info: Info) => void;\n  updateCurrentSemester: (semester: Semester) => void;\n  refreshAll: () => Promise<void>;\n}\n\ntype GlubHubContextType = GlubHubContextData & GlubHubContextUpdate;\n\nconst initialContext: GlubHubContextType = {\n  user: null,\n  members: [],\n  info: null!,\n  currentSemester: null!,\n  updateUser: () => {},\n  updateMembers: () => {},\n  updateInfo: () => {},\n  updateCurrentSemester: () => {},\n  refreshAll: async () => {}\n};\n\nexport const GlubHubContext: Context<GlubHubContextType> = createContext(\n  initialContext\n);\n\ninterface GlubRouteHooks {\n  location: GlubRoute | null;\n  goToRoute: (route: GlubRoute) => void;\n  replaceRoute: (route: GlubRoute) => void;\n}\n\nexport const useGlubRoute = (): GlubRouteHooks => {\n  const location = useLocation();\n  const history = useHistory();\n\n  let glubLocation;\n  if (!location.hash.startsWith(\"#/\")) {\n    glubLocation = null;\n  } else {\n    glubLocation = parseRoute(location.hash.slice(2).split(\"/\"));\n  }\n\n  return {\n    location: glubLocation,\n    goToRoute: route => history.push(renderRoute(route)),\n    replaceRoute: route => history.replace(renderRoute(route))\n  };\n};\n","import { Pitch } from \"./models\";\n\nexport const GREASE_TOKEN_NAME = \"grease-token\";\n\nexport const GREASE_OLD_TOKEN_NAME = \"grease-old-token\";\n\nexport const API_URL = \"https://gleeclub.gatech.edu/cgi-bin/api/\";\n\nexport const GOLD_COLOR = \"#b4a46a\";\n\nexport const SUBMISSION_STATE_BOX_ID = \"submission-box\";\n\nexport const SECTION_ORDER = [\"Tenor 1\", \"Tenor 2\", \"Baritone\", \"Bass\", null];\n\nexport const NO_SECTION = \"Homeless\";\n\nexport const ALL_PITCHES: Pitch[] = [\n  Pitch.AFlat,\n  Pitch.A,\n  Pitch.ASharp,\n  Pitch.BFlat,\n  Pitch.B,\n  Pitch.BSharp,\n  Pitch.CFlat,\n  Pitch.C,\n  Pitch.CSharp,\n  Pitch.DFlat,\n  Pitch.D,\n  Pitch.DSharp,\n  Pitch.EFlat,\n  Pitch.E,\n  Pitch.ESharp,\n  Pitch.FFlat,\n  Pitch.F,\n  Pitch.FSharp,\n  Pitch.GFlat,\n  Pitch.G,\n  Pitch.GSharp\n];\n","import { GlubHubError } from \"./error\";\nimport { GlubResponseType } from \"utils/request\";\nimport { SUBMISSION_STATE_BOX_ID } from \"./constants\";\n\nexport type RemoteData<T> =\n  | { status: \"notAsked\" }\n  | { status: \"loading\" }\n  | { status: \"loaded\"; data: T }\n  | { status: \"errorLoading\"; error: GlubHubError };\n\nexport const notAsked: RemoteData<any> = { status: \"notAsked\" };\nexport const loading: RemoteData<any> = { status: \"loading\" };\nexport const loaded = <T extends any>(data: T): RemoteData<T> => ({\n  status: \"loaded\",\n  data\n});\nexport const errorLoading = <T extends any>(\n  error: GlubHubError\n): RemoteData<T> => ({\n  status: \"errorLoading\",\n  error\n});\n\nexport type SubmissionState =\n  | { status: \"notSentYet\" }\n  | { status: \"sending\" }\n  | { status: \"errorSending\"; error: GlubHubError };\n\nexport const notSentYet: SubmissionState = { status: \"notSentYet\" };\nexport const sending: SubmissionState = { status: \"sending\" };\nexport const errorSending = (error: GlubHubError): SubmissionState => ({\n  status: \"errorSending\",\n  error\n});\n\nexport const mapLoaded = <T, U>(\n  data: RemoteData<T>,\n  mapper: (t: T) => U\n): RemoteData<U> => (isLoaded(data) ? loaded(mapper(data.data)) : data);\n\nexport const resultToRemote = <T>(result: GlubResponseType<T>): RemoteData<T> =>\n  result.successful ? loaded(result.data) : errorLoading(result.error);\n\nexport const resultToSubmissionState = <T>(\n  result: GlubResponseType<T>\n): SubmissionState =>\n  result.successful ? notSentYet : errorSending(result.error);\n\nexport const checkSubmissionResult = <T>(\n  result: GlubResponseType<T>,\n  setState: (state: SubmissionState) => void\n): void => {\n  if (result.successful) {\n    setState(notSentYet);\n  } else {\n    setState(errorSending(result.error));\n    const element = document.getElementById(SUBMISSION_STATE_BOX_ID);\n    if (element) {\n      element.scrollIntoView({ behavior: \"smooth\" });\n    }\n  }\n};\n\nexport const isSending = (\n  state: SubmissionState\n): state is { status: \"sending\" } => state.status === \"sending\";\n\nexport const isLoading = <T>(\n  data: RemoteData<T>\n): data is { status: \"loading\" } => data.status === \"loading\";\n\nexport const isLoaded = <T>(\n  data: RemoteData<T>\n): data is { status: \"loaded\"; data: T } => data.status === \"loaded\";\n\nexport const failedToLoad = <T>(\n  data: RemoteData<T>\n): data is { status: \"errorLoading\"; error: GlubHubError } =>\n  data.status === \"errorLoading\";\n\nexport const failedToSend = (\n  data: SubmissionState\n): data is { status: \"errorSending\"; error: GlubHubError } =>\n  data.status === \"errorSending\";\n","import { Pitch, Member, GlubEvent, RolePermission } from \"state/models\";\nimport {\n  AdminRoute,\n  adminCreateEvent,\n  adminGigRequests,\n  adminAbsenceRequests,\n  adminSemesters,\n  adminDocumentLinks,\n  adminOfficerPositions,\n  adminUniforms,\n  adminSitePermissions,\n  adminWebmasterTools,\n  adminMoney\n} from \"state/route\";\nimport Tone from \"tone\";\nimport * as Permissions from \"state/permissions\";\nimport { GREASE_TOKEN_NAME, GREASE_OLD_TOKEN_NAME } from \"state/constants\";\n\nexport const fullName = (member: Member) =>\n  `${member.preferredName || member.firstName} ${member.lastName}`;\n\nexport const formatPhone = (phone: string) =>\n  phone.length !== 10\n    ? phone\n    : `(${phone.slice(0, 3)}) ${phone.slice(3, 6)}-${phone.slice(6)}`;\n\nexport const permittedTo = (user: Member, permission: string): boolean =>\n  (user.permissions || []).some(p => p.name === permission);\n\nexport const eventIsOver = (event: GlubEvent): boolean =>\n  new Date().getTime() > (event.releaseTime || event.callTime);\n\nexport const getToken = () => localStorage.getItem(GREASE_TOKEN_NAME);\n\nexport const setToken = (token: string | null) =>\n  token\n    ? localStorage.setItem(GREASE_TOKEN_NAME, token)\n    : localStorage.removeItem(GREASE_TOKEN_NAME);\n\nexport const getOldToken = () => localStorage.getItem(GREASE_OLD_TOKEN_NAME);\n\nexport const setOldToken = (oldToken: string | null) =>\n  oldToken\n    ? localStorage.setItem(GREASE_OLD_TOKEN_NAME, oldToken)\n    : localStorage.removeItem(GREASE_OLD_TOKEN_NAME);\n\nexport const playPitch = (pitch: Pitch): void => {\n  const synth = new Tone.Synth().toMaster();\n  synth.triggerAttackRelease(Tone.Midi(`${pitchToUnicode(pitch)}4`), \"1n\");\n};\n\nexport const rolePermissionsAreEqual = (\n  permission1: RolePermission,\n  permission2: RolePermission\n): boolean =>\n  permission1.role === permission2.role &&\n  permission1.permission === permission2.permission &&\n  permission1.eventType === permission2.eventType;\n\nexport const roundToTwoDigits = (x: number): number =>\n  Math.round(x * 100) / 100.0;\n\nexport const fileToBase64 = async (file: File): Promise<string> =>\n  new Promise(resolve => {\n    const reader = new FileReader();\n    reader.onloadend = event => resolve((event.target!.result as string).replace(/^data:(.*,)?/, ''));\n    reader.readAsDataURL(file);\n  });\n\nexport const visibleAdminTabs = (user: Member): AdminRoute[][] => {\n  const eventTabs: [AdminRoute, boolean][] = [\n    [adminCreateEvent(null), permittedTo(user, Permissions.createEvent)],\n    [adminGigRequests, permittedTo(user, Permissions.processGigRequests)],\n    [\n      adminAbsenceRequests,\n      permittedTo(user, Permissions.processAbsenceRequests)\n    ]\n  ];\n  const dataTabs: [AdminRoute, boolean][] = [\n    [adminSemesters(null), permittedTo(user, Permissions.editSemester)],\n    [adminDocumentLinks, permittedTo(user, Permissions.editLinks)],\n    [adminMoney(null), permittedTo(user, Permissions.editTransaction)],\n    [adminOfficerPositions, permittedTo(user, Permissions.editOfficers)],\n    [adminUniforms, permittedTo(user, Permissions.editUniforms)],\n    [adminSitePermissions, permittedTo(user, Permissions.editPermissions)]\n  ];\n  const webmasterTab: [AdminRoute, boolean][] = [\n    [adminWebmasterTools, (user.positions || []).includes(\"Webmaster\")]\n  ];\n\n  return [eventTabs, dataTabs, webmasterTab]\n    .map(tabGroup =>\n      tabGroup\n        .filter(([_tab, visible]) => visible)\n        .map(([tab, _visible]) => tab)\n    )\n    .filter(tabGroup => tabGroup.length);\n};\n\nexport const pitchToUnicode = (pitch: Pitch): string => {\n  switch (pitch) {\n    case Pitch.AFlat:\n      return \"A♭\";\n    case Pitch.A:\n      return \"A\";\n    case Pitch.ASharp:\n      return \"A♯\";\n    case Pitch.BFlat:\n      return \"B♭\";\n    case Pitch.B:\n      return \"B\";\n    case Pitch.BSharp:\n      return \"B♯\";\n    case Pitch.CFlat:\n      return \"C♭\";\n    case Pitch.C:\n      return \"C\";\n    case Pitch.CSharp:\n      return \"C♯\";\n    case Pitch.DFlat:\n      return \"D♭\";\n    case Pitch.D:\n      return \"D\";\n    case Pitch.DSharp:\n      return \"D♯\";\n    case Pitch.EFlat:\n      return \"E♭\";\n    case Pitch.E:\n      return \"E\";\n    case Pitch.ESharp:\n      return \"E♯\";\n    case Pitch.FFlat:\n      return \"F♭\";\n    case Pitch.F:\n      return \"F\";\n    case Pitch.FSharp:\n      return \"F♯\";\n    case Pitch.GFlat:\n      return \"G♭\";\n    case Pitch.G:\n      return \"G\";\n    case Pitch.GSharp:\n      return \"G♯\";\n    default:\n      throw new Error();\n  }\n};\n\nexport const pitchFromUnicode = (unicode: string): Pitch | null => {\n  switch (unicode) {\n    case \"A♭\":\n      return Pitch.AFlat;\n    case \"A\":\n      return Pitch.A;\n    case \"A♯\":\n      return Pitch.ASharp;\n    case \"B♭\":\n      return Pitch.BFlat;\n    case \"B\":\n      return Pitch.B;\n    case \"B♯\":\n      return Pitch.BSharp;\n    case \"C♭\":\n      return Pitch.CFlat;\n    case \"C\":\n      return Pitch.C;\n    case \"C♯\":\n      return Pitch.CSharp;\n    case \"D♭\":\n      return Pitch.DFlat;\n    case \"D\":\n      return Pitch.D;\n    case \"D♯\":\n      return Pitch.DSharp;\n    case \"E♭\":\n      return Pitch.EFlat;\n    case \"E\":\n      return Pitch.E;\n    case \"E♯\":\n      return Pitch.ESharp;\n    case \"F♭\":\n      return Pitch.FFlat;\n    case \"F\":\n      return Pitch.F;\n    case \"F♯\":\n      return Pitch.FSharp;\n    case \"G♭\":\n      return Pitch.GFlat;\n    case \"G\":\n      return Pitch.G;\n    case \"G♯\":\n      return Pitch.GSharp;\n    default:\n      return null;\n  }\n};\n\nexport const halfStepsAboveA = (pitch: Pitch): number => {\n  switch (pitch) {\n    case Pitch.AFlat:\n      return 11;\n    case Pitch.A:\n      return 0;\n    case Pitch.ASharp:\n      return 1;\n    case Pitch.BFlat:\n      return 1;\n    case Pitch.B:\n      return 2;\n    case Pitch.BSharp:\n      return 3;\n    case Pitch.CFlat:\n      return 2;\n    case Pitch.C:\n      return 3;\n    case Pitch.CSharp:\n      return 4;\n    case Pitch.DFlat:\n      return 4;\n    case Pitch.D:\n      return 5;\n    case Pitch.DSharp:\n      return 6;\n    case Pitch.EFlat:\n      return 6;\n    case Pitch.E:\n      return 7;\n    case Pitch.ESharp:\n      return 8;\n    case Pitch.FFlat:\n      return 7;\n    case Pitch.F:\n      return 8;\n    case Pitch.FSharp:\n      return 9;\n    case Pitch.GFlat:\n      return 9;\n    case Pitch.G:\n      return 10;\n    case Pitch.GSharp:\n      return 11;\n  }\n};\n\nexport const romanNumeral = (n: number): string => {\n  const wordNumeralPairs: [string, string][] = [\n    [\"zero\", \"0\"],\n    [\"one\", \"I\"],\n    [\"two\", \"II\"],\n    [\"three\", \"III\"],\n    [\"four\", \"IV\"],\n    [\"five\", \"V\"],\n    [\"six\", \"VI\"],\n    [\"seven\", \"VII\"],\n    [\"eight\", \"VIII\"],\n    [\"nine\", \"IX\"],\n    [\"ten\", \"X\"],\n    [\"eleven\", \"XI\"],\n    [\"twelve\", \"XII\"],\n    [\"thirteen\", \"XIII\"],\n    [\"fourteen\", \"XIV\"],\n    [\"fifteen\", \"XV\"],\n    [\"sixteen\", \"XVI\"],\n    [\"seventeen\", \"XVII\"],\n    [\"eighteen\", \"XVIII\"],\n    [\"nineteen\", \"XIX\"],\n    [\"twenty\", \"XX\"]\n  ];\n\n  const pair = wordNumeralPairs[n];\n  if (pair) {\n    const [word, numeral] = pair;\n    return `${word} (${numeral})`;\n  } else {\n    return `${n}`;\n  }\n};\n","export const editRepertoire = \"edit-repertoire\";\n\nexport const viewCompleteMinutes = \"view-complete-minutes\";\n\nexport const editMinutes = \"edit-minutes\";\n\nexport const switchUser = \"switch-user\";\n\nexport const deleteUser = \"delete-user\";\n\nexport const editLinks = \"edit-links\";\n\nexport const viewEventPrivateDetails = \"view-event-private-details\";\n\nexport const createEvent = \"create-event\";\n\nexport const processGigRequests = \"process-gig-requests\";\n\nexport const processAbsenceRequests = \"process-absence-requests\";\n\nexport const editSemester = \"edit-semester\";\n\nexport const editTransaction = \"edit-transaction\";\n\nexport const editOfficers = \"edit-officers\";\n\nexport const editPermissions = \"edit-permissions\";\n\nexport const editUniforms = \"edit-uniforms\";\n\nexport const editCarpool = \"edit-carpool\";\n\nexport const editAttendance = \"edit-attendance\";\n\nexport const editEvents = \"edit-events\";\n","import React from \"react\";\nimport { formatPhone } from \"utils/helpers\";\n\nexport const Spinner: React.FC = () => (\n  <div className=\"spinner\">\n    <div className=\"spinner-inner\">\n      <i className=\"oldgold-text fas fa-circle-notch fa-2x fa-spin\" />\n    </div>\n  </div>\n);\n\ninterface CenteredProps {\n  centered?: boolean;\n}\n\nexport const Title: React.FC<CenteredProps> = ({ centered, children }) => (\n  <h1 className=\"title\" style={centered ? { textAlign: \"center\" } : undefined}>\n    {children}\n  </h1>\n);\n\nexport const Title4: React.FC = ({ children }) => (\n  <h4 className=\"title is-4\">{children}</h4>\n);\n\nexport const Subtitle: React.FC<CenteredProps> = ({ centered, children }) => (\n  <h3\n    className=\"subtitle is-3\"\n    style={centered ? { textAlign: \"center\" } : undefined}\n  >\n    {children}\n  </h3>\n);\n\nexport const Columns: React.FC = ({ children }) => (\n  <div className=\"columns\">{children}</div>\n);\n\nexport const Column: React.FC<{ narrow?: boolean }> = ({\n  narrow,\n  children\n}) => <div className={\"column\" + (narrow ? \" is-narrow\" : \"\")}>{children}</div>;\n\nexport const Box: React.FC = ({ children }) => (\n  <div className=\"box\">{children}</div>\n);\n\nexport const Section: React.FC = ({ children }) => (\n  <section className=\"section\">{children}</section>\n);\n\nexport const Container: React.FC = ({ children }) => (\n  <div className=\"container\">{children}</div>\n);\n\ninterface TooltipProps {\n  content: string;\n  type?: \"left\" | \"right\" | \"multiline\";\n}\n\nexport const Tooltip: React.FC<TooltipProps> = ({\n  content,\n  type,\n  children\n}) => (\n  <span\n    style={{ cursor: \"pointer\" }}\n    data-tooltip={content}\n    className={\"tooltip is-tooltip\" + (type ? `is-tooltip-${type}` : \"\")}\n  >\n    {children}\n  </span>\n);\n\nexport const CheckOrCross: React.FC<{ checked: boolean }> = ({ checked }) => (\n  <span className=\"icon is-medium\">\n    <i className={\"fas fa-lg fa-\" + (checked ? \"check\" : \"times\")} />\n  </span>\n);\n\nexport interface DividerProps {\n  vertical?: boolean;\n  content?: string;\n}\n\nexport const Divider: React.FC<DividerProps> = ({ vertical, content }) => {\n  const className = vertical ? \"is-divider-vertical\" : \"is-divider\";\n\n  if (content) {\n    return <div className={className} data-content={content} />;\n  } else {\n    return <div className={className} />;\n  }\n};\n\nexport const EmailLink: React.FC<{ email: string }> = ({ email }) => (\n  <a href={\"mailto:\" + email}>{email}</a>\n);\n\nexport const PhoneLink: React.FC<{ phone: string }> = ({ phone }) => (\n  <a href={\"tel:\" + phone}>{formatPhone(phone)}</a>\n);\n","import React from \"react\";\nimport { GlubHubError } from \"state/error\";\nimport { SUBMISSION_STATE_BOX_ID } from \"state/constants\";\n\ninterface ErrorBoxProps {\n  error: GlubHubError;\n}\n\nconst ErrorBox: React.FC<ErrorBoxProps> = ({ error }) => {\n  let title: string;\n  let content: string;\n\n  if (error.message === \"login required\") {\n    title = \"unauthorized\";\n    content = \"You aren't allowed to be here! Go on, get!\";\n  } else if (error.message === \"member not active yet\") {\n    title = \"not active yet\";\n    content =\n      \"You're gonna need to confirm your account for the semester to do stuff.\";\n  } else if (error.message === \"member already logged in\") {\n    title = \"already logged in\";\n    content = \"You tried to login twice, dummy. No need to work so hard.\";\n  } else if (error.message === \"access forbidden\") {\n    title = error.requiredPermission\n      ? `unable to ${error.requiredPermission}`\n      : \"forbidden\";\n    content =\n      \"Well, well, well, looks like you tried to do something you weren't allowed to. Go to your room!\";\n  } else if (error.message === \"resource not found\") {\n    title = \"resource not found\";\n    content =\n      \"I've looked everywhere, but I can't find what you're looking for...\";\n  } else if (error.message === \"bad request\") {\n    title = \"bad request\";\n    content = `I've got some bad news for ya: ${error.reason}`;\n  } else if (error.message === \"server error\") {\n    title = \"server error\";\n    content = `Oh lordy, something terrible has come to pass: ${error.error}`;\n  } else if (error.message === \"database error\") {\n    title = \"database error\";\n    content = `Don't shoot the messenger, but this came in from headquarters: ${error.error}`;\n  } else if (error.message === \"error connecting to database\") {\n    title = \"connection error\";\n    content = `Blame my friend the database, for they have broken something: ${error.error}`;\n  } else {\n    title = `unknown error (status ${error.statusCode})`;\n    content = `I don't even know what happened: ${error.error}`;\n  }\n\n  return (\n    <article\n      id={SUBMISSION_STATE_BOX_ID}\n      className=\"message is-danger\"\n      style={{ paddingTop: \"5px\", paddingBottom: \"5px\" }}\n    >\n      <div className=\"message-header\">\n        <p>\n          Something went wrong. (<i>{title}</i>)\n        </p>\n      </div>\n      <div className=\"message-body\">{content}</div>\n    </article>\n  );\n};\n\nexport default ErrorBox;\n","import React, { useContext, PropsWithChildren } from \"react\";\nimport { eventIsOver, permittedTo, fullName } from \"utils/helpers\";\nimport { GlubEvent } from \"state/models\";\nimport { RemoteData, SubmissionState } from \"state/types\";\nimport ErrorBox from \"./ErrorBox\";\nimport { GlubHubContext } from \"utils/context\";\nimport { Tooltip, CheckOrCross, Spinner, Box } from \"./Basics\";\n\nexport const AttendanceIcon: React.FC<{ event: GlubEvent }> = ({ event }) => {\n  if (!event.attendance || eventIsOver(event)) {\n    return <></>;\n  }\n\n  const colorClass = event.attendance.confirmed\n    ? \"has-text-success\"\n    : \"has-text-grey\";\n  const tooltipContent = `${\n    event.attendance.confirmed ? \"confirmed\" : \"unconfirmed\"\n  }, ${event.attendance.shouldAttend ? \"attending\" : \"not attending\"}`;\n\n  return (\n    <div className={colorClass}>\n      <Tooltip content={tooltipContent} type=\"right\">\n        <CheckOrCross checked={event.attendance.shouldAttend} />\n      </Tooltip>\n    </div>\n  );\n};\n\ninterface RemoteContentProps<T> {\n  data: RemoteData<T>;\n  render: (data: T) => JSX.Element;\n  notAsked?: JSX.Element;\n}\n\nexport const RemoteContent = <T extends any>({\n  data,\n  render,\n  notAsked\n}: PropsWithChildren<RemoteContentProps<T>>) => {\n  switch (data.status) {\n    case \"notAsked\":\n      return notAsked || <></>;\n\n    case \"loading\":\n      return <Spinner />;\n\n    case \"loaded\":\n      return render(data.data);\n\n    case \"errorLoading\":\n      return <ErrorBox error={data.error} />;\n  }\n};\n\nexport const RequiresPermission: React.FC<{ permission: string }> = ({\n  permission,\n  children\n}) => {\n  const { user } = useContext(GlubHubContext);\n\n  return user && permittedTo(user, permission) ? <>{children}</> : <></>;\n};\n\ninterface SidebarProps<T> {\n  data: RemoteData<T>;\n  render: (data: T) => JSX.Element;\n  close: () => void;\n}\n\nexport const Sidebar = <T extends any>({\n  data,\n  render,\n  close\n}: PropsWithChildren<SidebarProps<T>>) => {\n  if (data.status === \"notAsked\") {\n    return <div className=\"sidenav\" hidden />;\n  }\n\n  return (\n    <div>\n      <div className=\"transparent-overlay\" onClick={close} />\n      <div className=\"sidenav\" style={{ padding: \"20px\", paddingTop: \"80px\" }}>\n        {data.status === \"loading\" ? (\n          <Spinner />\n        ) : data.status === \"loaded\" ? (\n          render(data.data)\n        ) : (\n          <ErrorBox error={data.error} />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport const SubmissionStateBox: React.FC<{ state: SubmissionState }> = ({\n  state\n}) => {\n  switch (state.status) {\n    case \"notSentYet\":\n      return <></>;\n\n    case \"sending\":\n      return <Spinner />;\n\n    case \"errorSending\":\n      return <ErrorBox error={state.error} />;\n  }\n};\n\nexport const Modal: React.FC<{ close: () => void }> = ({ close, children }) => (\n  <div className=\"modal is-active\">\n    <div className=\"modal-background\" onClick={close} />\n    <div className=\"modal-content\" style={{ textAlign: \"center\" }}>\n      <Box>{children}</Box>\n    </div>\n  </div>\n);\n\nexport const MemberName: React.FC<{ email: string }> = ({ email }) => {\n  const { members } = useContext(GlubHubContext);\n  const member = members.find(member => member.email === email);\n\n  if (member) {\n    return <>{fullName(member)}</>;\n  } else {\n    return <i>{email}</i>;\n  }\n};\n","import React, { CSSProperties } from \"react\";\n\ninterface TableProps {\n  fullwidth?: boolean;\n  scrollable?: boolean;\n  striped?: boolean;\n  hoverable?: boolean;\n  className?: string;\n  style?: CSSProperties;\n}\n\nexport const Table: React.FC<TableProps> = props => {\n  const className = [\n    \"table\",\n    props.className,\n    props.fullwidth && \"is-fullwidth\",\n    props.striped && \"is-striped\",\n    props.hoverable && \"is-hoverable\"\n  ]\n    .filter(c => !!c)\n    .join(\" \");\n\n  const table = (\n    <table className={className} style={props.style}>\n      {props.children}\n    </table>\n  );\n\n  return props.scrollable ? (\n    <div className=\"table-container\">{table}</div>\n  ) : (\n    table\n  );\n};\n","import React, { PropsWithChildren } from \"react\";\nimport { RemoteData } from \"state/types\";\nimport { Box, Title, Column } from \"./Basics\";\nimport { GOLD_COLOR } from \"../state/constants\";\nimport { RemoteContent } from \"./Complex\";\nimport { Table } from \"./Table\";\n\ninterface SelectableListProps<T> {\n  listItems: RemoteData<T[][]>;\n  render: (data: T) => JSX.Element;\n  onSelect: (data: T) => void;\n  isSelected: (data: T) => boolean;\n  messageIfEmpty: string;\n  title?: string;\n  contentAtTop?: JSX.Element;\n  contentAtBottom?: JSX.Element;\n}\n\nexport const SelectableList = <T extends any>(\n  props: PropsWithChildren<SelectableListProps<T>>\n) => (\n  <Column narrow>\n    {props.title && <Title>{props.title}</Title>}\n    <Box>\n      {props.contentAtTop}\n      <RemoteContent\n        data={props.listItems}\n        render={groups => {\n          const nonEmptyGroups = groups.filter(group => group.length);\n\n          if (!nonEmptyGroups.length) {\n            return <p>{props.messageIfEmpty}</p>;\n          }\n\n          return (\n            <Table fullwidth hoverable className=\"no-bottom-border\">\n              <thead />\n              <tbody>\n                {nonEmptyGroups\n                  .map((group, index) => [\n                    ...group.map(item => singleRow(item, props)),\n                    index === nonEmptyGroups.length - 1 ? <></> : <DividerRow />\n                  ])\n                  .flatMap(group => group)}\n              </tbody>\n            </Table>\n          );\n        }}\n      />\n      {props.contentAtBottom}\n    </Box>\n  </Column>\n);\n\nconst singleRow = <T extends any>(\n  item: T,\n  props: PropsWithChildren<SelectableListProps<T>>\n) => (\n  <tr\n    style={{\n      backgroundColor: props.isSelected(item) ? GOLD_COLOR : \"\"\n    }}\n    onClick={() => props.onSelect(item)}\n  >\n    {props.render(item)}\n  </tr>\n);\n\nconst DividerRow: React.FC = () => (\n  <tr className=\"not-hoverable\">\n    <div className=\"is-divider\" style={{ margin: \"1rem\" }} />\n  </tr>\n);\n","import { Member } from \"./models\";\n\nexport interface NotFoundError {\n  message: \"resource not found\";\n  statusCode: 404;\n}\nexport const notFoundError: NotFoundError = {\n  message: \"resource not found\",\n  statusCode: 404\n};\n\nexport interface AlreadyLoggedInError {\n  message: \"member already logged in\";\n  statusCode: 400;\n  token: string;\n}\nexport const alreadyLoggedInError = (token: string): AlreadyLoggedInError => ({\n  message: \"member already logged in\",\n  statusCode: 400,\n  token\n});\n\nexport interface UnauthorizedError {\n  message: \"login required\";\n  statusCode: 401;\n}\nexport const unauthorizedError = {\n  message: \"login required\",\n  statusCode: 401\n};\n\nexport interface NotActiveYetError {\n  message: \"member not active yet\";\n  statusCode: 401;\n  member: Member;\n}\nexport const notActiveYetError = (member: Member): NotActiveYetError => ({\n  message: \"member not active yet\",\n  statusCode: 401,\n  member\n});\n\nexport interface ForbiddenError {\n  message: \"access forbidden\";\n  statusCode: 403;\n  requiredPermission?: string;\n}\nexport const forbiddenError = (\n  requiredPermission?: string\n): ForbiddenError => ({\n  message: \"access forbidden\",\n  statusCode: 403,\n  requiredPermission\n});\n\nexport interface ServerError {\n  message: \"server error\";\n  statusCode: 500;\n  error: string;\n}\nexport const serverError = (error: string): ServerError => ({\n  message: \"server error\",\n  statusCode: 500,\n  error\n});\n\nexport interface BadRequestError {\n  message: \"bad request\";\n  statusCode: 400;\n  reason: string;\n}\nexport const badRequestError = (reason: string): BadRequestError => ({\n  message: \"bad request\",\n  statusCode: 400,\n  reason\n});\n\nexport interface DatabaseError {\n  message: \"database error\";\n  statusCode: 500;\n  error: string;\n}\nexport const databaseError = (error: string): DatabaseError => ({\n  message: \"database error\",\n  statusCode: 500,\n  error\n});\n\nexport interface ConnectionError {\n  message: \"error connecting to database\";\n  statusCode: 500;\n  error: string;\n}\nexport const connectionError = (error: string): ConnectionError => ({\n  message: \"error connecting to database\",\n  statusCode: 500,\n  error\n});\n\nexport interface UnknownError {\n  message: \"unknown error\";\n  statusCode: number;\n  error: string;\n}\nexport const unknownError = (\n  statusCode: number,\n  error: string\n): UnknownError => ({\n  message: \"unknown error\",\n  statusCode,\n  error\n});\n\nexport type GlubHubError =\n  | NotFoundError\n  | AlreadyLoggedInError\n  | UnauthorizedError\n  | NotActiveYetError\n  | ForbiddenError\n  | ServerError\n  | BadRequestError\n  | DatabaseError\n  | ConnectionError\n  | UnknownError;\n\nexport const parseError = async (error: Response): Promise<GlubHubError> => {\n  try {\n    const errorBody = await error.json();\n    const message = errorBody?.message;\n\n    switch (message) {\n      case \"resource not found\":\n        return errorBody as NotFoundError;\n\n      case \"member already logged in\":\n        return errorBody as AlreadyLoggedInError;\n\n      case \"login required\":\n        return errorBody as UnauthorizedError;\n\n      case \"member not active yet\":\n        return errorBody as NotActiveYetError;\n\n      case \"access forbidden\":\n        return errorBody as ForbiddenError;\n\n      case \"server error\":\n        return errorBody as ServerError;\n\n      case \"bad request\":\n        return errorBody as BadRequestError;\n\n      case \"database error\":\n        return errorBody as DatabaseError;\n\n      case \"error connecting to database\":\n        return errorBody as ConnectionError;\n\n      default:\n        return unknownError(error.status, `${errorBody}`);\n    }\n  } catch (e) {\n    return unknownError(error.status, `${e}`);\n  }\n};\n","import { API_URL } from \"state/constants\";\nimport { parseError, unknownError, GlubHubError } from \"state/error\";\nimport { getToken } from \"./helpers\";\n\nexport interface NewId {\n  id: number;\n}\n\nexport interface NewToken {\n  token: string;\n}\n\nexport type GlubResponseType<T> =\n  | { successful: true; data: T }\n  | { successful: false; error: GlubHubError };\n\nexport const success = <T>(data: T): GlubResponseType<T> => ({\n  successful: true,\n  data\n});\n\nexport const get = async <T = any>(url: string): Promise<GlubResponseType<T>> =>\n  makeRequest<null, T>(url, \"GET\", null, true);\n\nexport const post = async <T>(\n  url: string,\n  body: T\n): Promise<GlubResponseType<null>> =>\n  makeRequest<T, null>(url, \"POST\", body, false);\n\nexport const postReturning = async <T, U>(\n  url: string,\n  body: T\n): Promise<GlubResponseType<U>> => makeRequest<T, U>(url, \"POST\", body, true);\n\nexport const deleteRequest = async (\n  url: string\n): Promise<GlubResponseType<null>> =>\n  makeRequest<void, null>(url, \"DELETE\", null, false);\n\nconst makeRequest = async <T extends any, R>(\n  url: string,\n  method: string,\n  body: T | null,\n  parseReturnVal: boolean\n): Promise<GlubResponseType<R>> => {\n  try {\n    const token = getToken();\n    const headers = token ? { token } : undefined;\n    const config = {\n      method,\n      headers,\n      body: method === \"POST\" ? JSON.stringify(body) : undefined\n    };\n    const resp = await fetch(API_URL + url, config);\n\n    if (resp.status === 200) {\n      if (parseReturnVal) {\n        const data = await resp.json();\n        return { successful: true, data };\n      } else {\n        return { successful: true, data: (null as unknown) as R };\n      }\n    } else {\n      const error = await parseError(resp);\n      return { successful: false, error };\n    }\n  } catch {\n    return {\n      successful: false,\n      error: unknownError(0, \"failed to make request\")\n    };\n  }\n};\n\nexport type GlubRequest<T> = Promise<GlubResponseType<T>>;\n\nexport const chain = async <T, U>(\n  req1: GlubRequest<T>,\n  req2: (u: T) => GlubRequest<U>\n): Promise<GlubResponseType<U>> => {\n  const result = await req1;\n  if (!result.successful) {\n    return result;\n  }\n\n  return req2(result.data);\n};\n\nexport const collect2 = async <T, U>(\n  req1: GlubRequest<T>,\n  req2: GlubRequest<U>\n): Promise<GlubResponseType<[T, U]>> => {\n  const [result1, result2] = await Promise.all([req1, req2]);\n  if (!result1.successful) {\n    return result1;\n  } else if (!result2.successful) {\n    return result2;\n  } else {\n    return { successful: true, data: [result1.data, result2.data] };\n  }\n};\n\nexport const collect3 = async <T, U, V>(\n  req1: GlubRequest<T>,\n  req2: GlubRequest<U>,\n  req3: GlubRequest<V>\n): Promise<GlubResponseType<[T, U, V]>> => {\n  const [result1, result2, result3] = await Promise.all([req1, req2, req3]);\n  if (!result1.successful) {\n    return result1;\n  } else if (!result2.successful) {\n    return result2;\n  } else if (!result3.successful) {\n    return result3;\n  } else {\n    return {\n      successful: true,\n      data: [result1.data, result2.data, result3.data]\n    };\n  }\n};\n\nexport const collect4 = async <T, U, V, W>(\n  req1: GlubRequest<T>,\n  req2: GlubRequest<U>,\n  req3: GlubRequest<V>,\n  req4: GlubRequest<W>\n): Promise<GlubResponseType<[T, U, V, W]>> => {\n  const [result1, result2, result3, result4] = await Promise.all([\n    req1,\n    req2,\n    req3,\n    req4\n  ]);\n  if (!result1.successful) {\n    return result1;\n  } else if (!result2.successful) {\n    return result2;\n  } else if (!result3.successful) {\n    return result3;\n  } else if (!result4.successful) {\n    return result4;\n  } else {\n    return {\n      successful: true,\n      data: [result1.data, result2.data, result3.data, result4.data]\n    };\n  }\n};\n","import React, { CSSProperties } from \"react\";\nimport { GlubRoute } from \"state/route\";\nimport { useGlubRoute } from \"utils/context\";\n\ninterface BackButtonProps {\n  content: string;\n  click: () => void;\n}\n\nconst middleInlineStyle: CSSProperties = {\n  display: \"inline-block\",\n  verticalAlign: \"middle\"\n};\n\nexport const BackButton: React.FC<BackButtonProps> = ({ content, click }) => (\n  <span style={{ cursor: \"pointer\", ...middleInlineStyle }} onClick={click}>\n    <i\n      className=\"fas fa-arrow-left\"\n      style={{ fontSize: \"16px\", ...middleInlineStyle }}\n    />{\" \"}\n    <span style={middleInlineStyle}>{content}</span>\n  </span>\n);\n\nexport const DeleteButton: React.FC<{ click: () => void }> = ({ click }) => (\n  <button className=\"delete\" aria-label=\"close\" onClick={click} />\n);\n\ninterface ButtonGroupProps {\n  connected?: boolean;\n  alignment?: \"is-centered\" | \"is-right\";\n}\n\nexport const ButtonGroup: React.FC<ButtonGroupProps> = ({\n  connected,\n  alignment,\n  children\n}) => (\n  <div\n    className={[\"buttons\", alignment, connected ? \"has-addons\" : null]\n      .filter(x => !!x)\n      .join(\" \")}\n  >\n    {children}\n  </div>\n);\n\ninterface ButtonAttributes {\n  color?: ButtonColor;\n  size?: ButtonSize;\n  loading?: boolean;\n  inverted?: boolean;\n  outlined?: boolean;\n  fullwidth?: boolean;\n  className?: string;\n  style?: CSSProperties;\n}\n\nexport type BulmaColor = \"is-primary\" | \"is-danger\" | \"is-info\";\n\nexport const isBulmaColor = (color: string): color is BulmaColor =>\n  [\"is-primary\", \"is-danger\", \"is-info\"].includes(color);\n\nexport type ButtonColor = BulmaColor | { rgb: string };\n\nexport type ButtonSize = \"is-small\" | \"is-normal\" | \"is-medium\" | \"is-large\";\n\nconst buttonClassAndStyle = (\n  attrs: ButtonAttributes\n): { className: string; style: CSSProperties } => {\n  const colorStyle: CSSProperties | undefined =\n    typeof attrs.color === \"object\" ? { color: attrs.color.rgb } : undefined;\n\n  const classes = [\n    \"button\",\n    attrs.size,\n    attrs.loading ? \"is-loading\" : undefined,\n    attrs.fullwidth ? \"is-fullwidth\" : undefined,\n    attrs.inverted ? \"is-inverted\" : undefined,\n    attrs.outlined ? \"is-outlined\" : undefined,\n    attrs.color && typeof attrs.color === \"string\" ? attrs.color : undefined,\n    attrs.className\n  ];\n\n  return {\n    className: classes.filter(c => c !== undefined).join(\" \"),\n    style: { ...attrs.style, ...colorStyle }\n  };\n};\n\ninterface ButtonProps extends ButtonAttributes {\n  onClick?: () => void;\n  element?: \"a\";\n}\n\nexport const Button: React.FC<ButtonProps> = props => {\n  const attrs = {\n    onClick: props.onClick,\n    disabled: props.onClick === undefined,\n    ...buttonClassAndStyle(props)\n  };\n\n  switch (props.element) {\n    case \"a\":\n      return <a {...attrs}>{props.children}</a>;\n\n    default:\n      return (\n        <button type=\"button\" {...attrs}>\n          {props.children}\n        </button>\n      );\n  }\n};\n\ninterface LinkButtonProps extends ButtonAttributes {\n  route: GlubRoute;\n}\n\nexport const LinkButton: React.FC<LinkButtonProps> = props => {\n  const { goToRoute } = useGlubRoute();\n\n  return (\n    <a\n      type=\"button\"\n      {...buttonClassAndStyle(props)}\n      onClick={() => goToRoute(props.route)}\n    >\n      {props.children}\n    </a>\n  );\n};\n\nexport const SubmitButton: React.FC<ButtonAttributes> = props => (\n  <button type=\"submit\" {...buttonClassAndStyle(props)}>\n    {props.children}\n  </button>\n);\n","import moment from \"moment\";\n\nexport const fullDateTimeFormatter = (timestamp: number): string =>\n  moment(timestamp).format(\"dddd, MMMM D, YYYY h:mm A\");\n\nexport const simpleDateTimeFormatter = (timestamp: number): string =>\n  moment(timestamp).format(\"MMM D h:mm A\");\n\nexport const timeFormatter = (timestamp: number): string =>\n  moment(timestamp).format(\"H:mm A\");\n\nexport const hyphenDateFormatter = (timestamp: number): string =>\n  moment(timestamp).format(\"YYYY-MM-DD\");\n\nexport const twentyFourHourTimeFormatter = (timestamp: number): string =>\n  moment(timestamp).format(\"HH:MM\");\n\nexport const dateFormatter = (timestamp: number): string =>\n  moment(timestamp).format(\"dddd, MMMM Do\");\n\nexport const simpleDateWithYearFormatter = (timestamp: number): string =>\n  moment(timestamp).format(\"MMM DD, YYYY\");\n\nexport const simpleDateFormatter = (timestamp: number): string =>\n  moment(timestamp).format(\"M/D\");\n\nexport const timeFromNow = (timestamp: number): string =>\n  moment(timestamp).fromNow();\n\nexport const parseFormDateString = (date: string): number | null =>\n  moment(date)\n    ?.toDate()\n    ?.getTime() || null;\n\nexport const parseFormDateAndTimeString = (\n  date: string,\n  time: string\n): number | null =>\n  moment(`${date} ${time}`)\n    ?.toDate()\n    ?.getTime() || null;\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport {\n  RemoteData,\n  loading,\n  notSentYet,\n  resultToRemote,\n  sending,\n  checkSubmissionResult,\n  loaded,\n  mapLoaded,\n  isLoaded\n} from \"state/types\";\nimport { Title, Box } from \"components/Basics\";\nimport { get, post } from \"utils/request\";\nimport { ButtonGroup, Button } from \"components/Buttons\";\nimport { AbsenceRequest, GlubEvent } from \"state/models\";\nimport { renderRoute, routeEvents, routeProfile } from \"state/route\";\nimport { dateFormatter, timeFormatter } from \"utils/datetime\";\nimport {\n  RemoteContent,\n  SubmissionStateBox,\n  MemberName\n} from \"components/Complex\";\nimport { Table } from \"components/Table\";\n\nexport const AbsenceRequests: React.FC = () => {\n  const [requestsAndEvents, updateRequestsAndEvents] = useState<\n    RemoteData<[AbsenceRequest, GlubEvent][]>\n  >(loading);\n  const [state, setState] = useState(notSentYet);\n\n  const respondToAbsenceRequest = useCallback(\n    async (request: AbsenceRequest, action: \"approve\" | \"deny\") => {\n      if (!isLoaded(requestsAndEvents)) return;\n      setState(sending);\n\n      const url = `absence_requests/${request.event}/${request.member}/${action}`;\n      const update = await post(url, {});\n\n      checkSubmissionResult<null>(update, setState);\n      if (update.successful) {\n        updateRequestsAndEvents(\n          loaded(\n            requestsAndEvents.data.map(([r, e]) => [\n              r.event === request.event && r.member === request.member\n                ? { ...r, state: action === \"approve\" ? \"Approved\" : \"Denied\" }\n                : r,\n              e\n            ])\n          )\n        );\n      }\n    },\n    [requestsAndEvents, updateRequestsAndEvents, setState]\n  );\n\n  useEffect(() => {\n    const loadAbsenceRequests = async () => {\n      const result = await get<[AbsenceRequest, GlubEvent][]>(\n        `absence_requests`\n      );\n      updateRequestsAndEvents(resultToRemote(result));\n    };\n\n    loadAbsenceRequests();\n  }, [updateRequestsAndEvents]);\n\n  return (\n    <div style={{ width: \"100%\" }}>\n      <Title>Open Absence Requests</Title>\n      <Box>\n        <RemoteContent\n          data={mapLoaded(requestsAndEvents, x =>\n            x.filter(([r, e]) => r.state === \"Pending\")\n          )}\n          render={requestsAndEvents => (\n            <AbsenceRequestTable\n              requestsAndEvents={requestsAndEvents}\n              respond={respondToAbsenceRequest}\n            />\n          )}\n        />\n      </Box>\n      <Title>Closed Absence Requests</Title>\n      <Box>\n        <RemoteContent\n          data={mapLoaded(requestsAndEvents, x =>\n            x.filter(([r, e]) => r.state !== \"Pending\")\n          )}\n          render={requestsAndEvents => (\n            <AbsenceRequestTable\n              requestsAndEvents={requestsAndEvents}\n              respond={respondToAbsenceRequest}\n            />\n          )}\n        />\n      </Box>\n      <SubmissionStateBox state={state} />\n    </div>\n  );\n};\n\ntype RespondToAbsenceRequestFn = (\n  request: AbsenceRequest,\n  action: \"approve\" | \"deny\"\n) => Promise<void>;\n\ninterface AbsenceRequestTableProps {\n  requestsAndEvents: [AbsenceRequest, GlubEvent][];\n  respond: RespondToAbsenceRequestFn;\n}\n\nconst AbsenceRequestTable: React.FC<AbsenceRequestTableProps> = ({\n  requestsAndEvents,\n  respond\n}) => (\n  <Table scrollable style={{ width: \"100%\" }}>\n    <thead>\n      <tr style={{ width: \"100%\" }}>\n        <th>When Submitted</th>\n        <th>Event Name</th>\n        <th>Event Date</th>\n        <th>Loser</th>\n        <th>Excuse</th>\n      </tr>\n    </thead>\n    <tbody>\n      {requestsAndEvents.map(([request, event]) => (\n        <>\n          <AbsenceRequestRow request={request} event={event} />\n          <AbsenceRequestButtons request={request} respond={respond} />\n        </>\n      ))}\n    </tbody>\n  </Table>\n);\n\ninterface AbsenceRequestRowProps {\n  request: AbsenceRequest;\n  event: GlubEvent;\n}\n\nconst AbsenceRequestRow: React.FC<AbsenceRequestRowProps> = ({\n  request,\n  event\n}) => (\n  <tr key={request.time} className=\"no-bottom-border\">\n    <td>\n      {dateFormatter(request.time)}\n      <br />\n      {timeFormatter(request.time)}\n    </td>\n    <td>\n      <a href={renderRoute(routeEvents(event.id, null))}>{event.name}</a>\n    </td>\n    <td>\n      {dateFormatter(event.callTime)}\n      <br />\n      {timeFormatter(event.callTime)}\n      <br />\n      {event.location || \"\"}\n    </td>\n    <td>\n      <a href={renderRoute(routeProfile(request.member, null))}>\n        <MemberName email={request.member} />\n      </a>\n    </td>\n    <td>\n      <i>{`\"${request.reason}\"`}</i>\n    </td>\n  </tr>\n);\n\ninterface AbsenceRequestButtonsProps {\n  request: AbsenceRequest;\n  respond: RespondToAbsenceRequestFn;\n}\n\nconst AbsenceRequestButtons: React.FC<AbsenceRequestButtonsProps> = ({\n  request,\n  respond\n}) => {\n  let leftButton: JSX.Element;\n  let rightButton: JSX.Element;\n\n  switch (request.state) {\n    case \"Pending\":\n      leftButton = (\n        <Button onClick={() => respond(request, \"deny\")}>Get fukt nerd</Button>\n      );\n      rightButton = (\n        <Button color=\"is-primary\" onClick={() => respond(request, \"approve\")}>\n          Bestow mercy\n        </Button>\n      );\n      break;\n\n    case \"Approved\":\n      leftButton = (\n        <Button onClick={() => respond(request, \"deny\")}>\n          Jk get fukt nerd\n        </Button>\n      );\n      rightButton = <Button>Mercy bestowed</Button>;\n      break;\n\n    case \"Denied\":\n      leftButton = <Button>Nerd got fukt</Button>;\n      rightButton = (\n        <Button\n          style={{ whiteSpace: \"normal\", maxWidth: \"150px\", height: \"initial\" }}\n          onClick={() => respond(request, \"approve\")}\n        >\n          I have heard your pleas and acquiesced to your request\n        </Button>\n      );\n      break;\n  }\n\n  return (\n    <tr className=\"no-bottom-border\">\n      <td colSpan={5}>\n        <ButtonGroup alignment=\"is-right\">\n          {leftButton}\n          {rightButton}\n        </ButtonGroup>\n      </td>\n    </tr>\n  );\n};\n","import React, { PropsWithChildren } from \"react\";\nimport {\n  Info,\n  Enrollment,\n  Uniform,\n  Member,\n  Semester,\n  Pitch,\n  SongMode\n} from \"state/models\";\nimport { fullName, pitchToUnicode, pitchFromUnicode } from \"utils/helpers\";\n\nexport const Control: React.FC<{ expanded?: boolean }> = ({\n  expanded,\n  children\n}) => (\n  <p className={\"control\" + (expanded ? \" is-expanded\" : \"\")}>{children}</p>\n);\n\nexport interface InputAttributes {\n  title?: string;\n  horizontal?: boolean;\n  required?: boolean;\n  helpText?: string;\n  placeholder?: string;\n  expanded?: boolean;\n  loading?: boolean;\n  prefix?: string;\n  suffix?: string;\n  autocomplete?: boolean;\n}\n\nexport const InputWrapper: React.FC<InputAttributes> = props => (\n  <div className={\"field\" + (props.horizontal ? \" is-horizontal\" : \"\")}>\n    {props.title &&\n      (props.horizontal ? (\n        <div className=\"field-label is-normal\">\n          <label className=\"label\">{props.title}</label>\n        </div>\n      ) : (\n        <label className=\"label\">{props.title}</label>\n      ))}\n    <div className=\"field-body\">{props.children}</div>\n    {props.helpText && <p className=\"help\">{props.helpText}</p>}\n  </div>\n);\n\nexport const FieldWrapper: React.FC<InputAttributes> = props => {\n  const classes = [\n    \"field\",\n    props.expanded ? \"is-expanded\" : null,\n    props.loading ? \"is-loading\" : null,\n    props.prefix || props.suffix ? \"has-addons\" : null\n  ];\n\n  return (\n    <div className={classes.filter(c => !!c).join(\" \")}>\n      {props.prefix && (\n        <Control>\n          {/* eslint-disable-next-line */}\n          <a className=\"button is-static\">{props.prefix}</a>\n        </Control>\n      )}\n      {props.children}\n      {props.suffix && (\n        <Control>\n          {/* eslint-disable-next-line */}\n          <a className=\"button is-static\">{props.suffix}</a>\n        </Control>\n      )}\n    </div>\n  );\n};\n\nexport interface TextInputProps<T> extends InputAttributes {\n  value: T;\n  type: FormInputType<T>;\n  onInput: (t: T) => void;\n}\n\nexport const TextInput = <T extends any>(\n  props: PropsWithChildren<TextInputProps<T>>\n) => (\n  <InputWrapper {...props}>\n    <FieldWrapper {...props}>\n      <Control>\n        <input\n          className={\"input\" + (props.loading ? \" is-loading\" : \"\")}\n          value={props.type.toString(props.value)}\n          onChange={event =>\n            props.onInput(props.type.fromString(event.target.value))\n          }\n          type={props.type.textType}\n          placeholder={props.placeholder}\n          required={props.required}\n          autoComplete={props.autocomplete === false ? \"off\" : \"on\"}\n        />\n      </Control>\n    </FieldWrapper>\n  </InputWrapper>\n);\n\nexport interface TextareaInputProps extends InputAttributes {\n  value: string;\n  onInput: (val: string) => void;\n}\n\nexport const TextareaInput: React.FC<TextareaInputProps> = props => (\n  <InputWrapper {...props}>\n    <FieldWrapper {...props}>\n      <Control>\n        <textarea\n          className={\"textarea\" + (props.loading ? \" is-loading\" : \"\")}\n          value={props.value}\n          onChange={event => props.onInput(event.target.value)}\n          placeholder={props.placeholder}\n          required={props.required}\n          autoComplete={props.autocomplete === false ? \"off\" : \"on\"}\n        />\n      </Control>\n    </FieldWrapper>\n  </InputWrapper>\n);\n\nexport interface SelectInputProps<T> extends InputAttributes {\n  values: T[];\n  selected: T;\n  type: FormInputType<T>;\n  onInput: (t: T) => void;\n  leftAligned?: boolean;\n}\n\nexport const SelectInput = <T extends any>(\n  props: PropsWithChildren<SelectInputProps<T>>\n) => (\n  <InputWrapper {...props}>\n    <FieldWrapper {...props}>\n      <div className={\"select control\" + (props.loading ? \" is-loading\" : \"\") + (props.leftAligned ? \" is-pulled-left\" : \"\")}>\n        <select\n          onInput={event =>\n            props.onInput(props.type.fromString(event.currentTarget.value))\n          }\n        >\n          {props.values\n            .map(val => props.type.toString(val))\n            .map(value => (\n              <option\n                key={value}\n                value={value}\n                selected={value === props.type.toString(props.selected)}\n              >\n                {value}\n              </option>\n            ))}\n        </select>\n      </div>\n    </FieldWrapper>\n  </InputWrapper>\n);\n\nexport interface RadioInputProps<T> extends InputAttributes {\n  values: T[];\n  selected: T;\n  render: (t: T) => string;\n  onInput: (t: T) => void;\n}\n\nexport const RadioInput = <T extends any>(\n  props: PropsWithChildren<RadioInputProps<T>>\n) => (\n  <InputWrapper {...props}>\n    <FieldWrapper {...props}>\n      {props.values.map((val, index) => (\n        <>\n          <label key={props.render(val)} className=\"radio\">\n            <input\n              type=\"radio\"\n              checked={`${val}` === `${props.selected}`}\n              onClick={() => props.onInput(val)}\n            />\n            {\" \" + props.render(val)}\n          </label>\n          {index !== props.values.length - 1 && <br />}\n        </>\n      ))}\n    </FieldWrapper>\n  </InputWrapper>\n);\n\nexport interface CheckboxInputProps {\n  content: string;\n  checked: boolean;\n  onChange: (checked: boolean) => void;\n}\n\nexport const CheckboxInput: React.FC<CheckboxInputProps> = ({\n  content,\n  checked,\n  onChange\n}) => (\n  <div className=\"control checkbox\">\n    <label className=\"checkbox\">\n      <input\n        type=\"checkbox\"\n        checked={checked}\n        onChange={() => onChange(!checked)}\n      />{\" \"}\n      {content}\n    </label>\n  </div>\n);\n\ninterface FileInputProps extends InputAttributes {\n  file: File | null;\n  selectFile: (file: File | null) => void;\n}\n\nexport const FileInput: React.FC<FileInputProps> = props => (\n  <InputWrapper {...props}>\n    <div className=\"file has-name\">\n      <label className=\"file-label\">\n        <input\n          className=\"file-input\"\n          type=\"file\"\n          onChange={event =>\n            props.selectFile(event.target.files?.item(0) || null)\n          }\n        />\n        <span className=\"file-cta\">\n          <span className=\"file-icon\">\n            <i className=\"fas fa-upload\" />\n          </span>\n          <span className=\"file-label\">Choose a file...</span>\n        </span>\n        {props.file && <span className=\"file-name\">{props.file.name}</span>}\n      </label>\n    </div>\n  </InputWrapper>\n);\n\nexport interface FormInputType<T> {\n  toString: (t: T) => string;\n  fromString: (s: string) => T;\n  textType: TextInputType;\n}\n\nexport type TextInputType =\n  | \"text\"\n  | \"number\"\n  | \"tel\"\n  | \"email\"\n  | \"password\"\n  | \"date\"\n  | \"time\";\n\nexport const stringType: FormInputType<string> = {\n  toString: x => x,\n  fromString: x => x,\n  textType: \"text\"\n};\n\nexport const dateType: FormInputType<string> = {\n  toString: x => x,\n  fromString: x => x,\n  textType: \"date\"\n};\n\nexport const timeType: FormInputType<string> = {\n  toString: x => x,\n  fromString: x => x,\n  textType: \"time\"\n};\n\nexport const emailType: FormInputType<string> = {\n  toString: x => x,\n  fromString: x => x,\n  textType: \"email\"\n};\n\nexport const passwordType: FormInputType<string> = {\n  toString: x => x,\n  fromString: x => x,\n  textType: \"password\"\n};\n\nexport const phoneType: FormInputType<string> = {\n  toString: x => x,\n  fromString: x => x,\n  textType: \"tel\"\n};\n\nexport const numberType: FormInputType<number | null> = {\n  toString: x => (x ? `${x}` : \"\"),\n  fromString: x => (isNaN(parseInt(x)) ? null : parseInt(x)),\n  textType: \"number\"\n};\n\nexport const sectionType = (\n  info: Info | null\n): FormInputType<string | null> => ({\n  toString: x => x || \"No Section\",\n  fromString: x => (info?.sections || []).find(s => s === x) || null,\n  textType: \"text\"\n});\n\nexport const uniformType = (\n  info: Info | null\n): FormInputType<Uniform | null> => ({\n  toString: u => u?.name || \"(no uniform)\",\n  fromString: u =>\n    (info?.uniforms || []).find(uniform => uniform.name === u) || null,\n  textType: \"text\"\n});\n\nexport const memberType = (\n  members: Member[]\n): FormInputType<Member | null> => ({\n  toString: member => (member ? fullName(member) : \"(nobody)\"),\n  fromString: name => members.find(m => fullName(m) === name) || null,\n  textType: \"text\"\n});\n\nexport const enrollmentType: FormInputType<Enrollment | null> = {\n  toString: x => x || \"Inactive\",\n  fromString: x => (x === \"Class\" || x === \"Club\" ? x : null),\n  textType: \"text\"\n};\n\nexport const semesterType = (\n  semesters: Semester[]\n): FormInputType<Semester | null> => ({\n  toString: x => x?.name || \"(no semester)\",\n  fromString: x => semesters.find(s => s.name === x) || null,\n  textType: \"text\"\n});\n\nexport const pitchType: FormInputType<Pitch | null> = {\n  toString: p => (p ? pitchToUnicode(p) : \"?\"),\n  fromString: pitchFromUnicode,\n  textType: \"text\"\n};\n\nexport const songModeType: FormInputType<SongMode | null> = {\n  toString: sm => sm || \"(no mode)\",\n  fromString: sm => ([\"Major\", \"Minor\"].includes(sm) ? (sm as SongMode) : null),\n  textType: \"text\"\n};\n","import { GlubEventType, Uniform, Semester, GigRequest } from \"state/models\";\nimport {\n  twentyFourHourTimeFormatter,\n  hyphenDateFormatter,\n  parseFormDateAndTimeString\n} from \"utils/datetime\";\n\nexport interface EventAndGigForm {\n  event: EventForm;\n  gig: GigForm;\n}\n\nexport interface EventForm {\n  name: string;\n  semester: string;\n  type: GlubEventType;\n  callTime: string;\n  callDate: string;\n  releaseTime: string;\n  releaseDate: string;\n  points: number | null;\n  comments: string;\n  location: string;\n  gigCount: boolean;\n  defaultAttend: boolean;\n  repeat: RepeatPeriod;\n  repeatUntil: string;\n}\n\nexport interface GigForm {\n  performanceTime: string;\n  uniform: Uniform | null;\n  contactName: string;\n  contactEmail: string;\n  contactPhone: string;\n  price: number | null;\n  public: boolean;\n  summary: string;\n  description: string;\n}\n\nexport const emptyEventForm = (currentSemester: Semester): EventForm => ({\n  name: \"\",\n  semester: currentSemester.name,\n  type: \"Rehearsal\",\n  callTime: \"\",\n  callDate: \"\",\n  releaseTime: \"\",\n  releaseDate: \"\",\n  points: null,\n  comments: \"\",\n  location: \"\",\n  gigCount: false,\n  defaultAttend: true,\n  repeat: \"No\",\n  repeatUntil: \"\"\n});\n\nexport const emptyGigForm: GigForm = {\n  performanceTime: \"\",\n  uniform: null,\n  contactName: \"\",\n  contactEmail: \"\",\n  contactPhone: \"\",\n  price: null,\n  public: false,\n  summary: \"\",\n  description: \"\"\n};\n\nexport const eventFormFromGigRequest = (\n  request: GigRequest,\n  currentSemester: Semester\n): EventForm => ({\n  name: `${request.name} for ${request.organization}`,\n  semester: currentSemester.name,\n  type: \"Volunteer Gig\",\n  callTime: twentyFourHourTimeFormatter(request.startTime),\n  callDate: hyphenDateFormatter(request.startTime),\n  releaseTime: \"\",\n  releaseDate: \"\",\n  points: 5,\n  comments: request.comments || \"\",\n  location: request.location,\n  gigCount: true,\n  defaultAttend: false,\n  repeat: \"No\",\n  repeatUntil: \"\"\n});\n\nexport const gigFormFromGigRequest = (request: GigRequest): GigForm => ({\n  performanceTime: twentyFourHourTimeFormatter(request.startTime),\n  uniform: null,\n  contactName: request.contactName,\n  contactEmail: request.contactEmail,\n  contactPhone: request.contactPhone,\n  price: null,\n  public: false,\n  summary: \"\",\n  description: \"\"\n});\n\nexport type RepeatPeriod =\n  | \"No\"\n  | \"Daily\"\n  | \"Weekly\"\n  | \"Biweekly\"\n  | \"Monthly\"\n  | \"Yearly\";\n\nexport const allRepeatPeriods: RepeatPeriod[] = [\n  \"No\",\n  \"Daily\",\n  \"Weekly\",\n  \"Biweekly\",\n  \"Monthly\",\n  \"Yearly\"\n];\n\nexport const formJson = ({ event, gig }: EventAndGigForm) => {\n  const includeGig = !!(\n    gig.performanceTime ||\n    gig.uniform ||\n    gig.contactName ||\n    gig.contactEmail ||\n    gig.contactPhone ||\n    gig.price ||\n    gig.summary ||\n    gig.description\n  );\n\n  return {\n    name: event.name,\n    semester: event.semester,\n    type: event.type,\n    callTime: parseFormDateAndTimeString(event.callDate, event.callTime),\n    releaseTime: parseFormDateAndTimeString(\n      event.releaseDate,\n      event.releaseTime\n    ),\n    points: event.points || 5,\n    comments: event.comments,\n    location: event.location,\n    gigCount: event.gigCount,\n    defaultAttend: event.defaultAttend,\n    gig: includeGig\n      ? {\n          performanceTime: parseFormDateAndTimeString(\n            event.callDate,\n            gig.performanceTime\n          ),\n          uniform: gig.uniform?.id || null,\n          contactName: gig.contactName,\n          contactEmail: gig.contactEmail,\n          contactPhone: gig.contactPhone,\n          price: gig.price,\n          public: gig.public,\n          summary: gig.summary,\n          description: gig.description\n        }\n      : null,\n    repeat: event.repeat,\n    repeatUntil: parseFormDateAndTimeString(event.repeatUntil, \"00:00\")\n  };\n};\n","import React, { useState, useEffect, useContext, useCallback, FormEvent } from \"react\";\nimport {\n  RemoteData,\n  loaded,\n  loading,\n  notSentYet,\n  mapLoaded,\n  resultToRemote,\n  isLoaded,\n  isSending,\n  failedToSend,\n  SubmissionState,\n  sending,\n  resultToSubmissionState,\n  isLoading\n} from \"state/types\";\nimport { Semester, GigRequest, GlubEventType } from \"state/models\";\nimport { get, postReturning, NewId } from \"utils/request\";\nimport { GlubHubContext, useGlubRoute } from \"utils/context\";\nimport { Title, Box, Columns, Column } from \"components/Basics\";\nimport {\n  TextInput,\n  stringType,\n  dateType,\n  timeType,\n  numberType,\n  RadioInput,\n  SelectInput,\n  uniformType,\n  TextareaInput,\n  CheckboxInput\n} from \"components/Forms\";\nimport { SubmitButton } from \"components/Buttons\";\nimport ErrorBox from \"components/ErrorBox\";\nimport {\n  EventAndGigForm,\n  allRepeatPeriods,\n  RepeatPeriod,\n  eventFormFromGigRequest,\n  gigFormFromGigRequest,\n  emptyEventForm,\n  emptyGigForm,\n  formJson\n} from \"./state\";\nimport { routeEvents } from \"state/route\";\nimport { RemoteContent } from \"components/Complex\";\n\nexport const CreateEvent: React.FC<{ gigRequestId: number | null }> = ({\n  gigRequestId\n}) => {\n  const { currentSemester } = useContext(GlubHubContext);\n  const { goToRoute } = useGlubRoute();\n\n  const [form, updateForm] = useState<RemoteData<EventAndGigForm>>(loading);\n  const [semesters, setSemesters] = useState<RemoteData<Semester[]>>(loading);\n  const [state, setState] = useState(notSentYet);\n\n  const submit = useCallback(async (event: FormEvent) => {\n    event.preventDefault();\n\n    if (!isLoaded(form)) return;\n    setState(sending);\n\n    const url = gigRequestId\n      ? `gig_requests/${gigRequestId}/create_event`\n      : `events`;\n    const result = await postReturning<any, NewId>(url, formJson(form.data));\n\n    setState(resultToSubmissionState(result));\n    if (result.successful) {\n      goToRoute(routeEvents(result.data.id, null));\n    }\n  }, [form, setState, gigRequestId, goToRoute]);\n\n  useEffect(() => {\n    const loadSemesters = async () => {\n      const result = await get<Semester[]>(`semesters`);\n      setSemesters(resultToRemote(result));\n    };\n\n    loadSemesters();\n    if (gigRequestId !== null) {\n      get<GigRequest>(`gig_requests/${gigRequestId}`).then(result => {\n        updateForm(\n          mapLoaded(resultToRemote(result), r => ({\n            event: eventFormFromGigRequest(r, currentSemester!),\n            gig: gigFormFromGigRequest(r)\n          }))\n        );\n      });\n    } else {\n      updateForm(\n        loaded({ event: emptyEventForm(currentSemester!), gig: emptyGigForm })\n      );\n    }\n  }, [setSemesters, currentSemester, updateForm, gigRequestId]);\n\n  return (\n    <>\n      <Title>Create Event</Title>\n      <Box>\n        <RemoteContent\n          data={form}\n          render={form => (\n            <form onSubmit={submit}>\n              <Columns>\n                <LeftColumn\n                  form={form}\n                  update={form => updateForm(loaded(form))}\n                />\n                <MiddleColumn\n                  form={form}\n                  update={form => updateForm(loaded(form))}\n                  semesters={semesters}\n                />\n                <RightColumn\n                  form={form}\n                  update={form => updateForm(loaded(form))}\n                  state={state}\n                />\n              </Columns>\n            </form>\n          )}\n        />\n      </Box>\n    </>\n  );\n};\n\ninterface LeftColumnProps {\n  form: EventAndGigForm;\n  update: (form: EventAndGigForm) => void;\n}\n\nconst LeftColumn: React.FC<LeftColumnProps> = ({ form, update }) => (\n  <Column>\n    <TextInput\n      type={stringType}\n      value={form.event.name}\n      onInput={name => update({ ...form, event: { ...form.event, name } })}\n      title=\"Event Name\"\n      placeholder=\"Flashmobbing the HOMO SEX IS SIN people\"\n      helpText=\"Make it descriptive, make it short.\"\n      required\n    />\n    <TextInput\n      type={stringType}\n      value={form.event.location}\n      onInput={location =>\n        update({ ...form, event: { ...form.event, location } })\n      }\n      title=\"Event Location\"\n      placeholder=\"Your mom's house 😂\"\n      helpText=\"ha gottem\"\n    />\n    <TextInput\n      type={dateType}\n      value={form.event.callDate}\n      onInput={callDate =>\n        update({ ...form, event: { ...form.event, callDate } })\n      }\n      title=\"Date of Event\"\n      required\n    />\n    <TextInput\n      type={timeType}\n      value={form.event.callTime}\n      onInput={callTime =>\n        update({ ...form, event: { ...form.event, callTime } })\n      }\n      title=\"Call Time\"\n      helpText=\"4:20 lamo\"\n      required\n    />\n    <TextInput\n      type={timeType}\n      value={form.gig.performanceTime}\n      onInput={performanceTime =>\n        update({ ...form, gig: { ...form.gig, performanceTime } })\n      }\n      title=\"Event Time\"\n      helpText=\"4:21 lamo\"\n    />\n    <TextInput\n      type={timeType}\n      value={form.event.releaseTime}\n      onInput={releaseTime =>\n        update({ ...form, event: { ...form.event, releaseTime } })\n      }\n      title=\"Release Time\"\n      helpText=\"4:22 lamo\"\n    />\n    <TextInput\n      type={dateType}\n      value={form.event.releaseDate}\n      onInput={releaseDate =>\n        update({ ...form, event: { ...form.event, releaseDate } })\n      }\n      title=\"Release Date\"\n    />\n    <TextInput\n      type={numberType}\n      value={form.event.points}\n      onInput={points => update({ ...form, event: { ...form.event, points } })}\n      title=\"How many points is this worth?\"\n      placeholder=\"69\"\n    />\n  </Column>\n);\n\ninterface MiddleColumnProps {\n  form: EventAndGigForm;\n  update: (form: EventAndGigForm) => void;\n  semesters: RemoteData<Semester[]>;\n}\n\nconst MiddleColumn: React.FC<MiddleColumnProps> = ({\n  form,\n  update,\n  semesters\n}) => {\n  const { currentSemester, info } = useContext(GlubHubContext);\n\n  return (\n    <Column>\n      <RadioInput<GlubEventType>\n        render={x => x}\n        values={info?.eventTypes.map(type => type.name) || []}\n        selected={form.event.type}\n        onInput={type => update({ ...form, event: { ...form.event, type } })}\n        title=\"Event Type\"\n      />\n      <SelectInput\n        type={stringType}\n        values={\n          isLoaded(semesters)\n            ? semesters.data.map(s => s.name)\n            : [currentSemester!.name]\n        }\n        selected={form.event.semester}\n        onInput={semester =>\n          update({ ...form, event: { ...form.event, semester } })\n        }\n        title=\"Semester\"\n        loading={isLoading(semesters)}\n      />\n      <SelectInput\n        type={uniformType(info)}\n        values={[null, ...(info?.uniforms || [])]}\n        selected={form.gig.uniform}\n        onInput={uniform => update({ ...form, gig: { ...form.gig, uniform } })}\n        title=\"Uniform\"\n      />\n      <TextareaInput\n        value={form.event.comments}\n        onInput={comments =>\n          update({ ...form, event: { ...form.event, comments } })\n        }\n        title=\"Event Summary\"\n        placeholder=\"We're gonna get in there, we're gonna use our mouths, and we're gonna get out.\"\n      />\n    </Column>\n  );\n};\n\ninterface RightColumnProps {\n  form: EventAndGigForm;\n  update: (form: EventAndGigForm) => void;\n  state: SubmissionState;\n}\n\nconst RightColumn: React.FC<RightColumnProps> = ({ form, update, state }) => (\n  <Column>\n    <CheckboxInput\n      content=\"This event is public, so I want it to show up on the external site\"\n      checked={form.gig.public}\n      onChange={isPublic =>\n        update({ ...form, gig: { ...form.gig, public: isPublic } })\n      }\n    />\n    {form.gig.public && (\n      <>\n        <TextInput\n          type={stringType}\n          value={form.gig.summary}\n          onInput={summary =>\n            update({ ...form, gig: { ...form.gig, summary } })\n          }\n          title=\"Public Summary\"\n          helpText=\"Careful, real people will see this\"\n          placeholder=\"Friends? Countrymen? Bueller?\"\n        />\n        <TextareaInput\n          value={form.gig.description}\n          onInput={description =>\n            update({ ...form, gig: { ...form.gig, description } })\n          }\n          title=\"Public Description\"\n          helpText=\"Careful, real people will see this\"\n          placeholder=\"We the people, in order to kick a more perfect ass, I don't know where this is going\"\n        />\n      </>\n    )}\n    <CheckboxInput\n      content=\"No one has to come to this event (forum, fundatory, etc)\"\n      checked={!form.event.defaultAttend}\n      onChange={defaultNotAttend =>\n        update({\n          ...form,\n          event: { ...form.event, defaultAttend: !defaultNotAttend }\n        })\n      }\n    />\n    <CheckboxInput\n      content=\"This event counts as a volunteer gig\"\n      checked={form.event.gigCount}\n      onChange={gigCount =>\n        update({ ...form, event: { ...form.event, gigCount } })\n      }\n    />\n    <SelectInput\n      type={stringType}\n      values={allRepeatPeriods}\n      selected={form.event.repeat}\n      onInput={period =>\n        update({\n          ...form,\n          event: { ...form.event, repeat: period as RepeatPeriod }\n        })\n      }\n      title=\"Repeat\"\n    />\n    <TextInput\n      type={dateType}\n      value={form.event.repeatUntil}\n      onInput={repeatUntil =>\n        update({ ...form, event: { ...form.event, repeatUntil } })\n      }\n      title=\"Repeat Until\"\n      required={form.event.repeat !== \"No\"}\n    />\n    <br />\n    <SubmitButton color=\"is-primary\" loading={isSending(state)}>\n      Yeehaw\n    </SubmitButton>\n    {failedToSend(state) && <ErrorBox error={state.error} />}\n  </Column>\n);\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport {\n  RemoteData,\n  loading,\n  notSentYet,\n  resultToRemote,\n  sending,\n  loaded,\n  resultToSubmissionState,\n  isLoaded\n} from \"state/types\";\nimport { DocumentLink, emptyDocumentLink } from \"state/models\";\nimport { get, post, deleteRequest } from \"utils/request\";\nimport { Title, Box } from \"components/Basics\";\nimport { TextInput, stringType } from \"components/Forms\";\nimport { Button, DeleteButton } from \"components/Buttons\";\nimport { RemoteContent, SubmissionStateBox } from \"components/Complex\";\n\nexport const DocumentLinks: React.FC = () => {\n  const [links, updateLinks] = useState<RemoteData<DocumentLink[]>>(loading);\n  const [newLink, updateNewLink] = useState<DocumentLink>(emptyDocumentLink);\n  const [state, setState] = useState(notSentYet);\n\n  const updateLink = useCallback(\n    async (index: number, link: DocumentLink) => {\n      if (!isLoaded(links)) return;\n\n      setState(sending);\n      const update = await post(`google_docs/${links.data[index].name}`, link);\n\n      setState(resultToSubmissionState(update));\n      if (update.successful) {\n        updateLinks(loaded(links.data.map((l, i) => (i === index ? link : l))));\n      }\n    },\n    [links, setState, updateLinks]\n  );\n\n  const deleteLink = useCallback(\n    async (index: number) => {\n      if (!isLoaded(links)) return;\n\n      const link = links.data[index];\n      if (!link) return;\n\n      setState(sending);\n      const result = await deleteRequest(`google_docs/${link.name}`);\n\n      setState(resultToSubmissionState(result));\n      if (result.successful) {\n        updateLinks(loaded(links.data.filter((_, i) => i !== index)));\n      }\n    },\n    [links, setState, updateLinks]\n  );\n\n  const createLink = useCallback(async () => {\n    if (!isLoaded(links) || !newLink.name || !newLink.url) return;\n\n    setState(sending);\n    const result = await post(`google_docs`, newLink);\n\n    setState(resultToSubmissionState(result));\n    if (result.successful) {\n      updateLinks(loaded([...links.data, newLink]));\n      updateNewLink(emptyDocumentLink);\n    }\n  }, [links, newLink, setState, updateLinks, updateNewLink]);\n\n  useEffect(() => {\n    const loadLinks = async () => {\n      const links = await get<DocumentLink[]>(`google_docs`);\n      updateLinks(resultToRemote(links));\n    };\n\n    loadLinks();\n  }, [updateLinks]);\n\n  return (\n    <>\n      <Title>Document Links</Title>\n      <Box>\n        <RemoteContent\n          data={links}\n          render={links => (\n            <table style={{ borderSpacing: \"5px\", borderCollapse: \"separate\" }}>\n              {links.map((link, index) => (\n                <tr key={link.name}>\n                  <td style={{ paddingRight: \"10px\" }}>\n                    <span\n                      style={{\n                        display: \"inline-block\",\n                        verticalAlign: \"middle\"\n                      }}\n                    >\n                      {link.name}\n                    </span>\n                  </td>\n                  <td>\n                    <TextInput\n                      type={stringType}\n                      value={link.url}\n                      onInput={url => updateLink(index, { ...link, url })}\n                      placeholder=\"URL\"\n                    />\n                  </td>\n                  <td>\n                    <span\n                      style={{\n                        display: \"inline-block\",\n                        verticalAlign: \"middle\"\n                      }}\n                    >\n                      <DeleteButton click={() => deleteLink(index)} />\n                    </span>\n                  </td>\n                </tr>\n              ))}\n              <tr>\n                <td>\n                  <b>New</b>\n                </td>\n              </tr>\n              <NewLinkRow\n                newLink={newLink}\n                update={updateNewLink}\n                create={createLink}\n              />\n            </table>\n          )}\n        />\n        <SubmissionStateBox state={state} />\n      </Box>\n    </>\n  );\n};\n\ninterface NewLinkRowProps {\n  newLink: DocumentLink;\n  create: () => void;\n  update: (link: DocumentLink) => void;\n}\n\nconst NewLinkRow: React.FC<NewLinkRowProps> = ({ newLink, update, create }) => (\n  <tr>\n    <td>\n      <TextInput\n        type={stringType}\n        value={newLink.name}\n        onInput={name => update({ ...newLink, name })}\n        placeholder=\"Name\"\n      />\n    </td>\n    <td>\n      <TextInput\n        type={stringType}\n        value={newLink.url}\n        onInput={url => update({ ...newLink, url })}\n        placeholder=\"URL\"\n      />\n    </td>\n    <td>\n      <Button onClick={create}>sí</Button>\n    </td>\n  </tr>\n);\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport {\n  RemoteData,\n  loading,\n  notSentYet,\n  resultToRemote,\n  isLoaded,\n  sending,\n  resultToSubmissionState,\n  loaded,\n  mapLoaded\n} from \"state/types\";\nimport { GigRequest } from \"state/models\";\nimport { get, post } from \"utils/request\";\nimport { Title, Box, EmailLink, PhoneLink } from \"components/Basics\";\nimport { dateFormatter, timeFormatter } from \"utils/datetime\";\nimport { ButtonGroup, Button, LinkButton } from \"components/Buttons\";\nimport { routeAdmin, adminCreateEvent, routeEvents } from \"state/route\";\nimport { RemoteContent, SubmissionStateBox } from \"components/Complex\";\nimport { Table } from \"components/Table\";\n\nexport const GigRequests: React.FC = () => {\n  const [requests, updateRequests] = useState<RemoteData<GigRequest[]>>(\n    loading\n  );\n  const [state, setState] = useState(notSentYet);\n\n  const dismissRequest = useCallback(\n    async (request: GigRequest) => {\n      if (!isLoaded(requests) || request.status !== \"Pending\") return;\n      setState(sending);\n\n      const result = await post(`gig_requests/${request.id}/dismiss`, {});\n      setState(resultToSubmissionState(result));\n\n      if (result.successful) {\n        updateRequests(\n          loaded(\n            requests.data.map(r =>\n              r.id === request.id ? { ...r, status: \"Dismissed\" } : r\n            )\n          )\n        );\n      }\n    },\n    [requests, setState, updateRequests]\n  );\n\n  const reopenRequest = useCallback(\n    async (request: GigRequest) => {\n      if (!isLoaded(requests) || request.status !== \"Dismissed\") return;\n      setState(sending);\n\n      const result = await post(`gig_requests/${request.id}/reopen`, {});\n      setState(resultToSubmissionState(result));\n\n      if (result.successful) {\n        updateRequests(\n          loaded(\n            requests.data.map(r =>\n              r.id === request.id ? { ...r, status: \"Pending\" } : r\n            )\n          )\n        );\n      }\n    },\n    [requests, setState, updateRequests]\n  );\n\n  useEffect(() => {\n    const loadGigRequests = async () => {\n      const result = await get<GigRequest[]>(`gig_requests?all=true`);\n      updateRequests(resultToRemote(result));\n    };\n\n    loadGigRequests();\n  }, [updateRequests]);\n\n  return (\n    <>\n      <Title>Gig Requests</Title>\n      <Box>\n        <RemoteContent\n          data={mapLoaded(requests, all =>\n            all.filter(r => r.status === \"Pending\")\n          )}\n          render={requests => (\n            <GigRequestTable\n              requests={requests}\n              reopen={reopenRequest}\n              dismiss={dismissRequest}\n            />\n          )}\n        />\n        <SubmissionStateBox state={state} />\n      </Box>\n      <Title>Accepted Gig Requests</Title>\n      <Box>\n        <RemoteContent\n          data={mapLoaded(requests, all =>\n            all.filter(r => r.status === \"Accepted\")\n          )}\n          render={requests => (\n            <GigRequestTable\n              requests={requests}\n              reopen={reopenRequest}\n              dismiss={dismissRequest}\n            />\n          )}\n        />\n      </Box>\n      <Title>Dismissed Gig Requests</Title>\n      <Box>\n        <RemoteContent\n          data={mapLoaded(requests, all =>\n            all.filter(r => r.status === \"Dismissed\")\n          )}\n          render={requests => (\n            <GigRequestTable\n              requests={requests}\n              reopen={reopenRequest}\n              dismiss={dismissRequest}\n            />\n          )}\n        />\n      </Box>\n    </>\n  );\n};\n\ninterface GigRequestTableProps {\n  requests: GigRequest[];\n  reopen: (request: GigRequest) => void;\n  dismiss: (request: GigRequest) => void;\n}\n\nconst GigRequestTable: React.FC<GigRequestTableProps> = ({\n  requests,\n  reopen,\n  dismiss\n}) => (\n  <Table scrollable style={{ width: \"100%\" }}>\n    <thead>\n      <tr style={{ width: \"100%\" }}>\n        <th>When Submitted</th>\n        <th>Event Name</th>\n        <th>Event Date</th>\n        <th>Contact</th>\n        <th>Description</th>\n      </tr>\n    </thead>\n    <tbody>\n      {requests.map(request => (\n        <>\n          <SingleGigRequest request={request} />\n          <GigRequestButtons\n            request={request}\n            reopen={reopen}\n            dismiss={dismiss}\n          />\n        </>\n      ))}\n    </tbody>\n  </Table>\n);\n\nconst SingleGigRequest: React.FC<{ request: GigRequest }> = ({ request }) => (\n  <tr key={request.id} className=\"no-bottom-border\">\n    <td>\n      {dateFormatter(request.time)}\n      <br />\n      {timeFormatter(request.time)}\n    </td>\n    <td>{request.name}</td>\n    <td>\n      {dateFormatter(request.startTime)}\n      <br />\n      {timeFormatter(request.startTime)}\n      <br />\n      {request.location}\n    </td>\n    <td>\n      {request.organization}\n      <br />\n      {request.contactName}\n      <br />\n      <PhoneLink phone={request.contactPhone} />\n      <br />\n      <EmailLink email={request.contactEmail} />\n    </td>\n    <td>\n      <i>\"{request.comments || \"no description given\"}\"</i>\n    </td>\n  </tr>\n);\n\ninterface GigRequestButtonsProps {\n  request: GigRequest;\n  reopen: (request: GigRequest) => void;\n  dismiss: (request: GigRequest) => void;\n}\n\nconst GigRequestButtons: React.FC<GigRequestButtonsProps> = ({\n  request,\n  reopen,\n  dismiss\n}) => {\n  let leftButton: JSX.Element;\n  let rightButton: JSX.Element;\n\n  switch (request.status) {\n    case \"Pending\":\n      leftButton = (\n        <Button onClick={() => dismiss(request)}>We do not deign</Button>\n      );\n      rightButton = (\n        <LinkButton\n          color=\"is-primary\"\n          route={routeAdmin(adminCreateEvent(request.id))}\n        >\n          We deign\n        </LinkButton>\n      );\n      break;\n\n    case \"Accepted\":\n      leftButton = <Button>Too late to go back now</Button>;\n      rightButton = (\n        <LinkButton route={routeEvents(request.event, null)}>\n          We deigned\n        </LinkButton>\n      );\n      break;\n\n    case \"Dismissed\":\n      leftButton = <Button>We did not deign</Button>;\n      rightButton = <Button onClick={() => reopen(request)}>Hol up</Button>;\n      break;\n  }\n\n  return (\n    <tr className=\"no-bottom-border\">\n      <td colSpan={5}>\n        <ButtonGroup alignment=\"is-right\">\n          {leftButton}\n          {rightButton}\n        </ButtonGroup>\n      </td>\n    </tr>\n  );\n};\n","import React, { useState, useEffect, useCallback, useContext, FormEvent } from \"react\";\nimport {\n  notSentYet,\n  loaded,\n  resultToRemote,\n  resultToSubmissionState,\n  sending,\n  SubmissionState,\n  errorSending,\n  isSending,\n  isLoaded,\n  failedToSend\n} from \"state/types\";\nimport { Transaction, Fee, emptyTransactionBatch, Member } from \"state/models\";\nimport { useGlubRoute, GlubHubContext } from \"utils/context\";\nimport { RemoteData, loading } from \"state/types\";\nimport { get, post } from \"utils/request\";\nimport { Title, Columns, Box, Column } from \"components/Basics\";\nimport {\n  MoneyTab,\n  routeAdmin,\n  adminMoney,\n  moneyAssignDues,\n  moneyAssignLateDues,\n  moneyBatchTransactions\n} from \"state/route\";\nimport {\n  TextInput,\n  numberType,\n  SelectInput,\n  stringType,\n  InputWrapper,\n  CheckboxInput\n} from \"components/Forms\";\nimport ErrorBox from \"components/ErrorBox\";\nimport { BackButton, LinkButton, SubmitButton, Button } from \"components/Buttons\";\nimport { fullName } from \"utils/helpers\";\nimport { simpleDateWithYearFormatter } from \"utils/datetime\";\nimport {\n  RemoteContent,\n  SubmissionStateBox,\n  MemberName,\n  Modal,\n  Sidebar\n} from \"components/Complex\";\nimport { Table } from \"components/Table\";\n\nexport const Money: React.FC<{ tab: MoneyTab | null }> = ({ tab }) => {\n  const [fees, updateFees] = useState<RemoteData<Fee[]>>(loading);\n  const [feeState, setFeeState] = useState(notSentYet);\n  const [transactions, updateTransactions] = useState<\n    RemoteData<Transaction[]>\n  >(loading);\n  const [transactionState, setTransactionState] = useState(notSentYet);\n\n  const resolveTransaction = useCallback(\n    async (transactionId: number, resolved: boolean) => {\n      if (!isLoaded(transactions)) return;\n\n      setTransactionState(sending);\n      updateTransactions(\n        loaded(\n          transactions.data.map(t =>\n            t.id === transactionId ? { ...t, resolved } : t\n          )\n        )\n      );\n\n      const url = `transactions/${transactionId}/resolve/${resolved}`;\n      const update = await post(url, {});\n\n      setTransactionState(resultToSubmissionState(update));\n    },\n    [transactions, updateTransactions, setTransactionState]\n  );\n\n  const updateFeeAmount = useCallback(\n    async (fee: Fee) => {\n      if (!isLoaded(fees)) return;\n\n      setFeeState(sending);\n      updateFees(loaded(fees.data.map(f => (f.name === fee.name ? fee : f))));\n\n      const url = `fees/${fee.name}/${fee.amount}`;\n      const update = await post(url, {});\n\n      setFeeState(resultToSubmissionState(update));\n    },\n    [fees, updateFees, setFeeState]\n  );\n\n  useEffect(() => {\n    const loadFees = async () => {\n      const fees = await get<Fee[]>(`fees`);\n      updateFees(resultToRemote(fees));\n    };\n    const loadTransactions = async () => {\n      const transactions = await get<Transaction[]>(`transactions`);\n      updateTransactions(resultToRemote(transactions));\n    };\n\n    loadFees();\n    loadTransactions();\n  }, []);\n\n  return (\n    <div>\n      <Title>Dues</Title>\n      <Columns>\n        <Column>\n          <Box>\n            <RemoteContent\n              data={fees}\n              render={fees => (\n                <div>\n                  {fees.map(fee => (\n                    <SingleFee fee={fee} update={updateFeeAmount} />\n                  ))}\n                </div>\n              )}\n            />\n            <SubmissionStateBox state={feeState} />\n          </Box>\n        </Column>\n        <Column>\n          <ul>\n            <MoneyActionButton tab={moneyAssignDues} />\n            <MoneyActionButton tab={moneyAssignLateDues} />\n            <MoneyActionButton tab={moneyBatchTransactions} />\n          </ul>\n        </Column>\n      </Columns>\n      <Title>Transactions</Title>\n      <Box>\n        <RemoteContent\n          data={transactions}\n          render={transactions => (\n            <TransactionTable\n              transactions={transactions}\n              state={transactionState}\n              resolve={resolveTransaction}\n            />\n          )}\n        />\n      </Box>\n      <TabContent tab={tab} />\n    </div>\n  );\n};\n\nconst TabContent: React.FC<{ tab: MoneyTab | null }> = ({ tab }) => {\n  switch (tab?.route) {\n    case \"assign-dues\":\n      return <AssignDuesModal />;\n\n    case \"assign-late-dues\":\n      return <AssignLateDuesModal />;\n\n    case \"batch-transactions\":\n      return <BatchTransactions />;\n\n    default:\n      return <></>;\n  }\n};\n\nconst MoneyActionButton: React.FC<{ tab: MoneyTab }> = ({ tab }) => {\n  const { replaceRoute } = useGlubRoute();\n\n  return (\n    <li style={{ marginBottom: \"10px\" }}>\n      <button\n        className=\"button is-primary\"\n        onClick={() => replaceRoute(routeAdmin(adminMoney(tab)))}\n      >\n        {tab.name}\n      </button>\n    </li>\n  );\n};\n\ninterface SingleFeeProps {\n  fee: Fee;\n  update: (fee: Fee) => void;\n}\n\nconst SingleFee: React.FC<SingleFeeProps> = ({ fee, update }) => (\n  <TextInput\n    key={fee.name}\n    type={numberType}\n    value={fee.amount}\n    onInput={amount => update({ ...fee, amount: amount || 0 })}\n    horizontal\n    title={fee.description}\n  />\n);\n\ninterface TransactionTableProps {\n  transactions: Transaction[];\n  state: SubmissionState;\n  resolve: (transactionId: number, resolved: boolean) => void;\n}\n\nconst TransactionTable: React.FC<TransactionTableProps> = ({\n  transactions,\n  state,\n  resolve\n}) => (\n    <>\n      <Table striped fullwidth scrollable>\n        <tbody>\n          {transactions\n            .sort((t1, t2) => t1.time - t2.time)\n            .map(transaction => (\n              <tr className=\"no-bottom-border\">\n                <td>{simpleDateWithYearFormatter(transaction.time)}</td>\n                <td>\n                  <MemberName email={transaction.member} />\n                </td>\n                <td>{transaction.type}</td>\n                <td>{`${transaction.amount}`}</td>\n                <td>{transaction.resolved ? \"Resolved\" : \"Outstanding\"}</td>\n                <td>\n                  <Button\n                    size=\"is-small\"\n                    color={!transaction.resolved ? \"is-primary\" : undefined}\n                    onClick={() => resolve(transaction.id, !transaction.resolved)}\n                  >\n                    {transaction.resolved ? \"Unresolve\" : \"Resolve\"}\n                  </Button>\n                </td>\n                <td>{transaction.description}</td>\n              </tr>\n            ))}\n        </tbody>\n      </Table>\n      <SubmissionStateBox state={state} />\n    </>\n  );\n\nconst BeholdThe: React.FC<{ text: string }> = ({ text }) => (\n  <p style={{ marginBottom: \"10px\" }}>\n    <h3 className=\"subtitle is-3\">Behold the {text}</h3>\n  </p>\n);\n\nconst CancelButton: React.FC = () => (\n  <LinkButton className=\"is-pulled-right\" route={routeAdmin(adminMoney(null))}>\n    ABORT! ABORT!\n  </LinkButton>\n);\n\nconst AssignDuesModal: React.FC = () => {\n  const { replaceRoute } = useGlubRoute();\n  const [state, setState] = useState(notSentYet);\n\n  const assignDues = useCallback(async () => {\n    setState(sending);\n\n    const result = await post(`fees/charge_dues`, {});\n    if (result.successful) {\n      replaceRoute(routeAdmin(adminMoney(null)));\n    } else {\n      setState(errorSending(result.error));\n    }\n  }, [setState, replaceRoute]);\n\n  return (\n    <Modal close={() => replaceRoute(routeAdmin(adminMoney(null)))}>\n      <div style={{ padding: \"20px\" }}>\n        <Title>\n          You are fixin' to assign dues to everyone{\" \"}\n          <b>who has not yet been assigned dues this semester.</b>\n        </Title>\n        <BeholdThe text=\"power\" />\n        <BeholdThe text=\"corruption\" />\n        <BeholdThe text=\"folksy phrasing\" />\n        {failedToSend(state) && <ErrorBox error={state.error} />}\n        <br />\n        <Button\n          element=\"a\"\n          color=\"is-primary\"\n          className=\"is-pulled-left\"\n          loading={isSending(state)}\n          onClick={assignDues}\n        >\n          Dolla dolla bill, y'all\n        </Button>\n        <CancelButton />\n        <br />\n      </div>\n    </Modal>\n  );\n};\n\nconst AssignLateDuesModal: React.FC = () => {\n  const { replaceRoute } = useGlubRoute();\n  const [state, setState] = useState(notSentYet);\n\n  const assignLateDues = useCallback(async () => {\n    setState(sending);\n\n    const result = await post(`fees/charge_late_dues`, {});\n    if (result.successful) {\n      replaceRoute(routeAdmin(adminMoney(null)));\n    } else {\n      setState(errorSending(result.error));\n    }\n  }, [setState, replaceRoute]);\n\n  return (\n    <Modal close={() => replaceRoute(routeAdmin(adminMoney(null)))}>\n      <div style={{ padding: \"20px\" }}>\n        <Title>\n          You are fixin' to assign late dues to everyone{\" \"}\n          <b>who has not yet paid their dues this semester.</b>\n        </Title>\n        <BeholdThe text=\"power\" />\n        <BeholdThe text=\"corruption\" />\n        <BeholdThe text=\"folksy phrasing\" />\n        {failedToSend(state) && <ErrorBox error={state.error} />}\n        <br />\n        <Button\n          element=\"a\"\n          color=\"is-primary\"\n          className=\"is-pulled-left\"\n          loading={isSending(state)}\n          onClick={assignLateDues}\n        >\n          Dolla dolla bill, y'all\n        </Button>\n        <CancelButton />\n        <br />\n      </div>\n    </Modal>\n  );\n};\n\nconst BatchTransactions: React.FC = () => {\n  const { members, info } = useContext(GlubHubContext);\n  const { replaceRoute } = useGlubRoute();\n\n  const [batch, updateBatch] = useState(emptyTransactionBatch);\n  const [state, setState] = useState(notSentYet);\n\n  const closeSidebar = useCallback(\n    () => replaceRoute(routeAdmin(adminMoney(null))),\n    [replaceRoute]\n  );\n\n  const toggleMember = useCallback(\n    (email: string) => {\n      if (batch.members.includes(email)) {\n        updateBatch({\n          ...batch,\n          members: batch.members.filter(m => m !== email)\n        });\n      } else {\n        updateBatch({ ...batch, members: [...batch.members, email] });\n      }\n    },\n    [batch, updateBatch]\n  );\n\n  const sendBatch = useCallback(async (event: FormEvent) => {\n    event.preventDefault();\n    setState(sending);\n\n    const result = await post(`fees/create_batch`, batch);\n    if (result.successful) {\n      closeSidebar();\n    } else {\n      setState(errorSending(result.error));\n    }\n  }, [setState, batch, closeSidebar]);\n\n  return (\n    <Sidebar\n      data={loaded({})}\n      close={closeSidebar}\n      render={() => (\n        <form onSubmit={sendBatch}>\n          <BackButton content=\"cancel\" click={closeSidebar} />\n          <Title centered>Batch Transactions</Title>\n          <SelectInput\n            type={stringType}\n            values={info?.transactionTypes || []}\n            selected={batch.type}\n            onInput={type => updateBatch({ ...batch, type })}\n            title=\"What's its persuasion?\"\n          />\n          <TextInput\n            type={stringType}\n            value={batch.description}\n            onInput={description => updateBatch({ ...batch, description })}\n            title=\"What's it for?\"\n            placeholder=\"Scotland Trip 2029\"\n            required\n          />\n          <TextInput\n            type={numberType}\n            value={batch.amount}\n            onInput={amount => updateBatch({ ...batch, amount })}\n            title=\"How many doll hairs?\"\n            prefix=\"$\"\n            placeholder=\"420\"\n            required\n          />\n          <InputWrapper title=\"Whomdst\">\n            <Box>\n              <ul style={{ columnCount: 3, columnGap: \"20px\" }}>\n                {members.map(member => (\n                  <MemberBatchRow\n                    member={member}\n                    selected={batch.members.includes(member.email)}\n                    select={toggleMember}\n                  />\n                ))}\n              </ul>\n            </Box>\n          </InputWrapper>\n          <br />\n          <SubmitButton\n            color=\"is-primary\"\n            loading={isSending(state)}\n          >\n            My mind on my money and my money on my mind\n          </SubmitButton>\n          {failedToSend(state) && <ErrorBox error={state.error} />}\n        </form>\n      )}\n    />\n  );\n};\n\ninterface MemberBatchRowProps {\n  member: Member;\n  selected: boolean;\n  select: (email: string) => void;\n}\n\nconst MemberBatchRow: React.FC<MemberBatchRowProps> = ({\n  member,\n  selected,\n  select\n}) => (\n    <li>\n      <CheckboxInput\n        content={fullName(member)}\n        checked={selected}\n        onChange={() => select(member.email)}\n      />\n    </li>\n  );\n","import { CSSProperties } from \"react\";\n\nexport const inlineMiddleStyle: CSSProperties = {\n  display: \"inline-block\",\n  verticalAlign: \"middle\"\n};\n","import React, { useState, useEffect, useCallback, useContext } from \"react\";\nimport { GlubHubContext } from \"utils/context\";\nimport { MemberRole, Role, Member } from \"state/models\";\nimport { Title, Box } from \"components/Basics\";\nimport { get, post, collect2, success } from \"utils/request\";\nimport {\n  RemoteData,\n  loading,\n  notSentYet,\n  resultToRemote,\n  resultToSubmissionState,\n  sending,\n  loaded,\n  isLoaded\n} from \"state/types\";\nimport { inlineMiddleStyle } from \"utils/style\";\nimport { SelectInput, memberType } from \"components/Forms\";\nimport { RemoteContent, SubmissionStateBox } from \"components/Complex\";\n\nexport const OfficerPositions: React.FC = () => {\n  const { info } = useContext(GlubHubContext);\n\n  const [roles, updateRoles] = useState<RemoteData<MemberRole[]>>(loading);\n  const [state, setState] = useState(notSentYet);\n\n  const toggleOfficer = useCallback(\n    async (role: Role, from: Member | null, to: Member | null) => {\n      if (!isLoaded(roles)) return;\n\n      setState(sending);\n\n      const removeRole = from\n        ? post(`roles/remove`, { role: role.name, member: from.email })\n        : Promise.resolve(success(null));\n      const addRole = to\n        ? post(`roles/add`, { role: role.name, member: to.email })\n        : Promise.resolve(success(null));\n      const result = await collect2(removeRole, addRole);\n\n      setState(resultToSubmissionState(result));\n      if (result.successful) {\n        updateRoles(\n          loaded([\n            ...roles.data.filter(\n              memberRole =>\n                memberRole.role.name !== role.name ||\n                memberRole.member.email !== from?.email\n            ),\n            ...(to ? [{ role, member: to }] : [])\n          ])\n        );\n      }\n    },\n    [roles, setState, updateRoles]\n  );\n\n  useEffect(() => {\n    const loadOfficers = async () => {\n      const roles = await get<MemberRole[]>(`member_roles`);\n      updateRoles(resultToRemote(roles));\n    };\n\n    loadOfficers();\n  }, [updateRoles]);\n\n  const roleGroups = (roles: MemberRole[]): [Role, Member | null][] =>\n    info!.roles\n      .sort((r1, r2) => r1.rank - r2.rank)\n      .flatMap(role => {\n        const members = roles\n          .filter(memberRole => memberRole.role.name === role.name)\n          .map(memberRole => memberRole.member);\n        const slots = [...members, null].slice(0, role.maxQuantity);\n\n        return slots.map(slot => [role, slot] as [Role, Member | null]);\n      });\n\n  return (\n    <>\n      <Title>Positions</Title>\n      <Box>\n        <RemoteContent\n          data={roles}\n          render={roles => (\n            <table style={{ borderSpacing: \"5px\", borderCollapse: \"separate\" }}>\n              <tbody>\n                {roleGroups(roles).map(([role, member]) => (\n                  <MemberDropdown\n                    role={role}\n                    member={member}\n                    toggle={toggleOfficer}\n                  />\n                ))}\n              </tbody>\n            </table>\n          )}\n        />\n        <SubmissionStateBox state={state} />\n      </Box>\n    </>\n  );\n};\n\ninterface MemberDropdownProps {\n  role: Role;\n  member: Member | null;\n  toggle: (role: Role, from: Member | null, to: Member | null) => void;\n}\n\nconst MemberDropdown: React.FC<MemberDropdownProps> = ({\n  role,\n  member,\n  toggle\n}) => {\n  const { members } = useContext(GlubHubContext);\n\n  return (\n    <tr>\n      <td style={{ paddingRight: \"10px\" }}>\n        <span style={inlineMiddleStyle}>{role.name}</span>\n      </td>\n      <td>\n        <SelectInput\n          type={memberType(members)}\n          values={[null, ...members]}\n          selected={member}\n          onInput={newMember => toggle(role, member, newMember)}\n        />\n      </td>\n    </tr>\n  );\n};\n","import React, { useState, useEffect, useContext, useCallback, FormEvent } from \"react\";\nimport {\n  SemesterTab,\n  semesterChange,\n  semesterEdit,\n  semesterCreate,\n  routeAdmin,\n  adminSemesters\n} from \"state/route\";\nimport {\n  RemoteData,\n  loading,\n  notSentYet,\n  resultToRemote,\n  isSending,\n  failedToSend,\n  sending,\n  resultToSubmissionState,\n  SubmissionState,\n  loaded\n} from \"state/types\";\nimport { Semester } from \"state/models\";\nimport { hyphenDateFormatter, parseFormDateString } from \"utils/datetime\";\nimport { get, post } from \"utils/request\";\nimport { Title, Box, Column } from \"components/Basics\";\nimport {\n  ButtonGroup,\n  Button,\n  LinkButton,\n  SubmitButton,\n  BackButton\n} from \"components/Buttons\";\nimport {\n  SelectInput,\n  semesterType,\n  TextInput,\n  stringType,\n  dateType,\n  numberType\n} from \"components/Forms\";\nimport { GlubHubContext, useGlubRoute } from \"utils/context\";\nimport ErrorBox from \"components/ErrorBox\";\nimport { RemoteContent, Modal, Sidebar } from \"components/Complex\";\n\nexport const Semesters: React.FC<{ tab: SemesterTab | null }> = ({ tab }) => {\n  const [semesters, updateSemesters] = useState<RemoteData<Semester[]>>(\n    loading\n  );\n\n  useEffect(() => {\n    const loadSemesters = async () => {\n      const result = await get<Semester[]>(\"semesters\");\n      updateSemesters(resultToRemote(result));\n    };\n\n    loadSemesters();\n  }, [updateSemesters]);\n\n  return (\n    <>\n      <Title>Edit the Semester</Title>\n      <RemoteContent\n        data={semesters}\n        render={semesters => (\n          <>\n            <EditSemesterPrelude />\n            <ButtonGroup alignment=\"is-centered\">\n              {[semesterChange, semesterEdit, semesterCreate].map(option => (\n                <LinkButton\n                  color=\"is-primary\"\n                  route={routeAdmin(adminSemesters(option))}\n                >\n                  {option.name}\n                </LinkButton>\n              ))}\n            </ButtonGroup>\n            <br />\n            <TabContent\n              tab={tab}\n              semesters={semesters}\n              updateSemesters={s => updateSemesters(loaded(s))}\n            />\n          </>\n        )}\n      />\n    </>\n  );\n};\n\ninterface SemesterForm {\n  name: string;\n  startDate: string;\n  endDate: string;\n  gigRequirement: number | null;\n}\n\nconst emptySemesterForm: SemesterForm = {\n  name: \"\",\n  startDate: \"\",\n  endDate: \"\",\n  gigRequirement: null\n};\n\nconst formFromSemester = (semester: Semester): SemesterForm => ({\n  name: semester.name,\n  startDate: hyphenDateFormatter(semester.startDate),\n  endDate: hyphenDateFormatter(semester.endDate),\n  gigRequirement: semester.gigRequirement\n});\n\nconst semesterJson = (form: SemesterForm) => ({\n  name: form.name,\n  startDate: parseFormDateString(form.startDate) || new Date().getTime(),\n  endDate: parseFormDateString(form.endDate) || new Date().getTime(),\n  gigRequirement: form.gigRequirement || 5\n});\n\nconst EditSemesterPrelude: React.FC = () => (\n  <Box>\n    <p>\n      This is a form that will allow you to add and edit semesters in the\n      database. It will also change the current semester.\n    </p>\n    <br />\n    <p>\n      Changing the current semester will change the entire face of the website.\n      Only stuff from the current semester is shown on the main website. In new\n      semesters, every member's status is by default 'inactive' until they log\n      in and confirm themself.\n    </p>\n    <br />\n    <p>\n      With great power comes great potential to screw everyone over. Use this\n      feature wisely.\n    </p>\n    <br />\n    <p>Now, pick your poison:</p>\n  </Box>\n);\n\ninterface TabContentProps {\n  tab: SemesterTab | null;\n  semesters: Semester[];\n  updateSemesters: (semesters: Semester[]) => void;\n}\n\nconst TabContent: React.FC<TabContentProps> = ({\n  tab,\n  semesters,\n  updateSemesters\n}) => {\n  switch (tab?.route) {\n    case \"change\":\n      return <ChangeSemesterModal semesters={semesters} />;\n\n    case \"edit\":\n      return (\n        <EditSemesterSidebar\n          semesters={semesters}\n          updateSemesters={updateSemesters}\n        />\n      );\n\n    case \"create\":\n      return (\n        <CreateSemesterSidebar\n          semesters={semesters}\n          updateSemesters={updateSemesters}\n        />\n      );\n\n    default:\n      return <></>;\n  }\n};\n\ninterface ChangeSemesterModalProps {\n  semesters: Semester[];\n}\n\nconst ChangeSemesterModal: React.FC<ChangeSemesterModalProps> = ({\n  semesters\n}) => {\n  const { currentSemester, updateCurrentSemester } = useContext(GlubHubContext);\n  const { replaceRoute } = useGlubRoute();\n\n  const [selected, setSelected] = useState(currentSemester);\n  const [state, setState] = useState(notSentYet);\n\n  const closeModal = useCallback(\n    () => replaceRoute(routeAdmin(adminSemesters(null))),\n    [replaceRoute]\n  );\n\n  const changeSemester = useCallback(async () => {\n    if (!selected || selected.name === currentSemester?.name) return;\n\n    setState(sending);\n    const result = await post(`semesters/${selected.name}/set_current`, {});\n    setState(resultToSubmissionState(result));\n\n    if (result.successful) {\n      updateCurrentSemester(selected);\n      window.location.reload(true);\n      closeModal();\n    }\n  }, [selected, currentSemester, updateCurrentSemester, closeModal]);\n\n  return (\n    <Modal close={closeModal}>\n      <Column>\n        <h2 className=\"subtitle is-2\">\n          Which semester do you want to switch to?\n        </h2>\n        <p>\n          This will change everything. You really only want to do this at the\n          beginning of a new semester. If it's not a solstice, then don't.\n        </p>\n        <br />\n        <div className=\"field is-grouped is-grouped-centered\">\n          <SelectInput<Semester | null>\n            type={semesterType(semesters)}\n            values={semesters}\n            selected={selected}\n            onInput={selected => selected && setSelected(selected)}\n          />\n        </div>\n        <br />\n        <Button\n          element=\"a\"\n          color=\"is-primary\"\n          className=\"is-pulled-left\"\n          loading={isSending(state)}\n          onClick={changeSemester}\n        >\n          The ol' Glub Hub switcharoo\n        </Button>\n        <Button element=\"a\" className=\"is-pulled-right\" onClick={closeModal}>\n          ABORT! ABORT!\n        </Button>\n        <br />\n        {failedToSend(state) && <ErrorBox error={state.error} />}\n      </Column>\n    </Modal>\n  );\n};\n\ninterface CreateSemesterSidebarProps {\n  semesters: Semester[];\n  updateSemesters: (semesters: Semester[]) => void;\n}\n\nconst CreateSemesterSidebar: React.FC<CreateSemesterSidebarProps> = ({\n  semesters,\n  updateSemesters\n}) => {\n  const { replaceRoute } = useGlubRoute();\n\n  const [form, updateForm] = useState(emptySemesterForm);\n  const [state, setState] = useState(notSentYet);\n\n  const closeSidebar = useCallback(\n    () => replaceRoute(routeAdmin(adminSemesters(null))),\n    [replaceRoute]\n  );\n\n  const createSemester = useCallback(async (event: FormEvent) => {\n    event.preventDefault();\n\n    setState(sending);\n    const newSemester = semesterJson(form);\n    const result = await post(`semesters`, newSemester);\n\n    setState(resultToSubmissionState(result));\n    if (result.successful) {\n      updateSemesters(\n        [...semesters, { ...newSemester, current: false }].sort(\n          (s1, s2) => s1.startDate - s2.startDate\n        )\n      );\n      closeSidebar();\n    }\n  }, [setState, form, updateSemesters, semesters, closeSidebar]);\n\n  return (\n    <Sidebar\n      data={loaded({})}\n      close={closeSidebar}\n      render={() => (\n        <>\n          <BackButton content=\"cancel\" click={closeSidebar} />\n          <div className=\"column\" style={{ textAlign: \"center\" }}>\n            <h2 className=\"subtitle is-2\">Time marches on</h2>\n            <p>\n              Another day, another dollar. And also another semester. Make a new\n              semester baby now, and switch over to it whenever you want to\n              later, but before it turns 18.\n            </p>\n            <br />\n            <EditSemesterForm\n              form={form}\n              update={updateForm}\n              state={state}\n              submit={createSemester}\n              submitMessage=\"Break your water\"\n            />\n          </div>\n        </>\n      )}\n    />\n  );\n};\n\ninterface EditSemesterSidebarProps {\n  semesters: Semester[];\n  updateSemesters: (semesters: Semester[]) => void;\n}\n\nconst EditSemesterSidebar: React.FC<EditSemesterSidebarProps> = ({\n  semesters,\n  updateSemesters\n}) => {\n  const { currentSemester } = useContext(GlubHubContext);\n  const { replaceRoute } = useGlubRoute();\n\n  const [form, updateForm] = useState(formFromSemester(currentSemester!));\n  const [state, setState] = useState(notSentYet);\n\n  const closeSidebar = useCallback(\n    () => replaceRoute(routeAdmin(adminSemesters(null))),\n    [replaceRoute]\n  );\n\n  const editSemester = useCallback(async (event: FormEvent) => {\n    event.preventDefault();\n\n    setState(sending);\n    const editedSemester = semesterJson(form);\n    const result = await post(`semesters`, editedSemester);\n\n    setState(resultToSubmissionState(result));\n    if (result.successful) {\n      updateSemesters(\n        semesters.map(s =>\n          s.name === currentSemester?.name\n            ? { ...editedSemester, current: true }\n            : s\n        )\n      );\n      closeSidebar();\n    }\n  }, [\n    setState,\n    form,\n    currentSemester,\n    updateSemesters,\n    semesters,\n    closeSidebar\n  ]);\n\n  return (\n    <Sidebar\n      data={loaded({})}\n      close={closeSidebar}\n      render={() => (\n        <>\n          <BackButton content=\"cancel\" click={closeSidebar} />\n          <div className=\"column\" style={{ textAlign: \"center\" }}>\n            <h2 className=\"subtitle is-2\">Do it in pencil, not pen</h2>\n            <p>\n              Select the semester you want to make changes to, and then make the\n              changes. You cannot edit the past, sorry.\n            </p>\n            <br />\n            <EditSemesterForm\n              form={form}\n              update={updateForm}\n              state={state}\n              submit={editSemester}\n              submitMessage=\"Do this please\"\n            />\n          </div>\n        </>\n      )}\n    />\n  );\n};\n\ninterface EditSemesterFormProps {\n  form: SemesterForm;\n  state: SubmissionState;\n  submitMessage: string;\n  submit: (event: FormEvent) => void;\n  update: (form: SemesterForm) => void;\n}\n\nconst EditSemesterForm: React.FC<EditSemesterFormProps> = ({\n  form,\n  state,\n  submitMessage,\n  submit,\n  update\n}) => (\n    <form onSubmit={submit}>\n      <Column narrow>\n        <TextInput\n          type={stringType}\n          value={form.name}\n          onInput={name => update({ ...form, name })}\n          title=\"Semester Name\"\n          placeholder=\"Fall 20XX\"\n          required\n        />\n        <TextInput\n          type={dateType}\n          value={form.startDate}\n          onInput={startDate => update({ ...form, startDate })}\n          title=\"The first day of the rest of your life\"\n          required\n        />\n        <TextInput\n          type={dateType}\n          value={form.endDate}\n          onInput={endDate => update({ ...form, endDate })}\n          title=\"The last day of the rest of your life\"\n          required\n        />\n        <TextInput\n          type={numberType}\n          value={form.gigRequirement}\n          onInput={gigRequirement => update({ ...form, gigRequirement })}\n          title=\"Number of required volunteer gigs\"\n          placeholder=\"5\"\n          required\n        />\n        <br />\n        <SubmitButton color=\"is-primary\" loading={isSending(state)}>\n          {submitMessage}\n        </SubmitButton>\n        <br />\n        {failedToSend(state) && <ErrorBox error={state.error} />}\n      </Column>\n    </form>\n  );\n","import React, { useState, useCallback, useEffect, useContext } from \"react\";\nimport {\n  RemoteData,\n  loading,\n  notSentYet,\n  isLoaded,\n  loaded,\n  resultToRemote,\n  checkSubmissionResult,\n  sending\n} from \"state/types\";\nimport { RolePermission, Permission, Info, GlubEventType } from \"state/models\";\nimport { post, get } from \"utils/request\";\nimport { Title, Box, Tooltip } from \"components/Basics\";\nimport { GlubHubContext } from \"utils/context\";\nimport { rolePermissionsAreEqual } from \"utils/helpers\";\nimport { CheckboxInput } from \"components/Forms\";\nimport { RemoteContent, SubmissionStateBox } from \"components/Complex\";\n\nexport const SitePermissions: React.FC = () => {\n  const { info } = useContext(GlubHubContext);\n\n  const [rolePermissions, updateRolePermissions] = useState<\n    RemoteData<RolePermission[]>\n  >(loading);\n  const [state, setState] = useState(notSentYet);\n\n  const toggleRolePermission = useCallback(\n    async (rolePermission: RolePermission, enabled: boolean) => {\n      if (!isLoaded(rolePermissions)) return;\n      setState(sending);\n\n      if (enabled) {\n        updateRolePermissions(\n          loaded([...rolePermissions.data, rolePermission])\n        );\n      } else {\n        updateRolePermissions(\n          loaded(\n            rolePermissions.data.filter(\n              rp => !rolePermissionsAreEqual(rp, rolePermission)\n            )\n          )\n        );\n      }\n\n      const body = {\n        name: rolePermission.permission,\n        eventType: rolePermission.eventType\n      };\n      const url = `permissions/${rolePermission.role}/${\n        enabled ? \"enable\" : \"disable\"\n      }`;\n      const result = await post(url, body);\n\n      checkSubmissionResult(result, setState);\n    },\n    [rolePermissions, updateRolePermissions, setState]\n  );\n\n  useEffect(() => {\n    const loadRolePermissions = async () => {\n      const result = await get<RolePermission[]>(`role_permissions`);\n      updateRolePermissions(resultToRemote(result));\n    };\n\n    loadRolePermissions();\n  }, [updateRolePermissions]);\n\n  return (\n    <>\n      <Title>Permissions</Title>\n      <Box>\n        <RemoteContent\n          data={rolePermissions}\n          render={rolePermissions => (\n            <table>\n              <tbody>\n                <tr>\n                  <th></th>\n                  {info?.roles.map(role => (\n                    <th className=\"vertheader\">\n                      <div>{role.name}</div>\n                    </th>\n                  ))}\n                </tr>\n                {info?.permissions.map(permission => (\n                  <>\n                    {permissionEventTypes(permission, info).map(eventType => (\n                      <tr>\n                        <td style={{ whiteSpace: \"nowrap\" }}>\n                          {permission.name}\n                          {eventType && `:${eventType}`}\n                        </td>\n                        {info.roles.map(role => (\n                          <PermissionCheckbox\n                            rolePermission={{\n                              role: role.name,\n                              permission: permission.name,\n                              eventType\n                            }}\n                            currentPermissions={rolePermissions}\n                            toggle={toggleRolePermission}\n                          />\n                        ))}\n                      </tr>\n                    ))}\n                  </>\n                ))}\n              </tbody>\n            </table>\n          )}\n        />\n        <SubmissionStateBox state={state} />\n      </Box>\n    </>\n  );\n};\n\nconst permissionEventTypes = (\n  permission: Permission,\n  info: Info\n): (GlubEventType | null)[] => [\n  null,\n  ...(permission.type === \"Static\" ? [] : info.eventTypes.map(et => et.name))\n];\n\ninterface PermissionCheckboxProps {\n  rolePermission: RolePermission;\n  currentPermissions: RolePermission[];\n  toggle: (rp: RolePermission, enabled: boolean) => void;\n}\n\nconst PermissionCheckbox: React.FC<PermissionCheckboxProps> = ({\n  rolePermission,\n  currentPermissions,\n  toggle\n}) => (\n  <td>\n    <Tooltip content={rolePermission.role}>\n      <CheckboxInput\n        content=\"\"\n        checked={currentPermissions.some(rp =>\n          rolePermissionsAreEqual(rp, rolePermission)\n        )}\n        onChange={enabled => toggle(rolePermission, enabled)}\n      />\n    </Tooltip>\n  </td>\n);\n","import React from \"react\";\nimport { SubmissionState, isSending, failedToSend } from \"state/types\";\nimport ErrorBox from \"./ErrorBox\";\nimport { DeleteButton, Button } from \"./Buttons\";\n\nexport interface DeleteModalProps {\n  title: String;\n  cancel: () => void;\n  confirm: () => void;\n  state: SubmissionState;\n}\n\nconst DeleteModal: React.FC<DeleteModalProps> = props => (\n  <div className=\"modal is-active\">\n    <div className=\"modal-background\" onClick={props.cancel} />\n    <div className=\"modal-card\">\n      <header className=\"modal-card-head\">\n        <p className=\"modal-card-title\">{props.title}</p>\n        <DeleteButton click={props.cancel} />\n      </header>\n      <section className=\"modal-card-body\">{props.children}</section>\n      <ModalButtons {...props} />\n    </div>\n  </div>\n);\n\nconst ModalButtons: React.FC<DeleteModalProps> = ({\n  confirm,\n  state,\n  cancel\n}) => (\n  <footer className=\"modal-card-foot\">\n    <Button onClick={confirm} loading={isSending(state)} color=\"is-danger\">\n      Delete\n    </Button>\n    <Button onClick={cancel}>Cancel</Button>\n    {failedToSend(state) && <ErrorBox error={state.error} />}\n  </footer>\n);\n\nexport default DeleteModal;\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport {\n  RemoteData,\n  loading,\n  notSentYet,\n  resultToRemote,\n  sending,\n  resultToSubmissionState,\n  loaded,\n  SubmissionState,\n  isLoaded\n} from \"state/types\";\nimport { Uniform, emptyUniform } from \"state/models\";\nimport { get, post, deleteRequest, postReturning, NewId } from \"utils/request\";\nimport { Title, Box } from \"components/Basics\";\nimport { TextInput, stringType, TextareaInput } from \"components/Forms\";\nimport DeleteModal from \"components/DeleteModal\";\nimport { DeleteButton, Button } from \"components/Buttons\";\nimport { RemoteContent, SubmissionStateBox } from \"components/Complex\";\n\nexport const Uniforms: React.FC = () => {\n  const [uniforms, setUniforms] = useState<RemoteData<Uniform[]>>(loading);\n  const [newUniform, updateNewUniform] = useState<Uniform>(emptyUniform);\n  const [state, setState] = useState(notSentYet);\n  const [uniformToDelete, setUniformToDelete] = useState<Uniform | null>(null);\n\n  const updateUniform = useCallback(\n    async (uniform: Uniform) => {\n      setState(sending);\n\n      const body = { name: uniform.name, description: uniform.description };\n      const update = await post(`uniforms/${uniform.id}`, body);\n\n      setState(resultToSubmissionState(update));\n      if (update.successful && isLoaded(uniforms)) {\n        setUniforms(\n          loaded(uniforms.data.map(u => (u.id === uniform.id ? uniform : u)))\n        );\n      }\n    },\n    [setState, uniforms, setUniforms]\n  );\n\n  const deleteUniform = useCallback(\n    async (uniform: Uniform) => {\n      setState(sending);\n\n      const result = await deleteRequest(`uniforms/${uniform.id}`);\n\n      setState(resultToSubmissionState(result));\n      if (result.successful && isLoaded(uniforms)) {\n        setUniforms(loaded(uniforms.data.filter(u => u.id !== uniform.id)));\n      }\n    },\n    [setState, uniforms, setUniforms]\n  );\n\n  const createUniform = useCallback(async () => {\n    setState(sending);\n\n    const body = { name: newUniform.name, description: newUniform.description };\n    const result = await postReturning<typeof body, NewId>(`uniforms`, body);\n\n    setState(resultToSubmissionState(result));\n    if (result.successful && isLoaded(uniforms)) {\n      setUniforms(\n        loaded([...uniforms.data, { ...newUniform, id: result.data.id }])\n      );\n      updateNewUniform(emptyUniform);\n    }\n  }, [setState, uniforms, setUniforms, newUniform, updateNewUniform]);\n\n  useEffect(() => {\n    const loadUniforms = async () => {\n      const result = await get<Uniform[]>(`uniforms`);\n      setUniforms(resultToRemote(result));\n    };\n\n    loadUniforms();\n  }, [setUniforms]);\n\n  return (\n    <div style={{ width: \"100%\" }}>\n      <Title>Uniforms</Title>\n      <Box>\n        <RemoteContent\n          data={uniforms}\n          render={uniforms => (\n            <table\n              style={{\n                width: \"100%\",\n                borderSpacing: \"5px\",\n                borderCollapse: \"separate\"\n              }}\n            >\n              <tr>\n                <td>\n                  <b>Name</b>\n                </td>\n                <td>\n                  <b>Description</b>\n                </td>\n              </tr>\n              {uniforms.map(uniform => (\n                <UniformRow\n                  uniform={uniform}\n                  update={updateUniform}\n                  tryToDelete={setUniformToDelete}\n                />\n              ))}\n              <tr>\n                <td>\n                  <b>New</b>\n                </td>\n              </tr>\n              <NewUniformRow\n                uniform={newUniform}\n                update={updateNewUniform}\n                create={createUniform}\n              />\n            </table>\n          )}\n        />\n        <SubmissionStateBox state={state} />\n        {uniformToDelete && (\n          <DeleteUniformModal\n            uniform={uniformToDelete}\n            state={state}\n            cancel={() => setUniformToDelete(null)}\n            confirm={() => deleteUniform(uniformToDelete)}\n          />\n        )}\n      </Box>\n    </div>\n  );\n};\n\ninterface UniformRowProps {\n  uniform: Uniform;\n  update: (uniform: Uniform) => void;\n  tryToDelete: (uniform: Uniform) => void;\n}\n\nexport const UniformRow: React.FC<UniformRowProps> = ({\n  uniform,\n  update,\n  tryToDelete\n}) => (\n  <tr>\n    <td>\n      <TextInput\n        type={stringType}\n        value={uniform.name}\n        onInput={name => update({ ...uniform, name })}\n        placeholder=\"Name\"\n      />\n    </td>\n    <td>\n      <TextareaInput\n        value={uniform.description || \"\"}\n        onInput={description => update({ ...uniform, description })}\n        placeholder=\"Description\"\n      />\n    </td>\n    <td>\n      <span\n        style={{\n          display: \"inline-block\",\n          verticalAlign: \"middle\"\n        }}\n      >\n        <DeleteButton click={() => tryToDelete(uniform)} />\n      </span>\n    </td>\n  </tr>\n);\n\ninterface NewUniformRowProps {\n  uniform: Uniform;\n  create: () => void;\n  update: (uniform: Uniform) => void;\n}\n\nconst NewUniformRow: React.FC<NewUniformRowProps> = ({\n  uniform,\n  update,\n  create\n}) => (\n  <tr>\n    <td>\n      <TextInput\n        type={stringType}\n        value={uniform.name}\n        onInput={name => update({ ...uniform, name })}\n        placeholder=\"Name\"\n      />\n    </td>\n    <td>\n      <TextareaInput\n        value={uniform.description || \"\"}\n        onInput={description => update({ ...uniform, description })}\n        placeholder=\"Description\"\n      />\n    </td>\n    <td>\n      <Button color=\"is-primary\" onClick={create}>\n        Suit up.\n      </Button>\n    </td>\n  </tr>\n);\n\ninterface DeleteUniformModalProps {\n  uniform: Uniform;\n  state: SubmissionState;\n  cancel: () => void;\n  confirm: () => void;\n}\n\nconst DeleteUniformModal: React.FC<DeleteUniformModalProps> = ({\n  uniform,\n  state,\n  cancel,\n  confirm\n}) => (\n  <DeleteModal\n    title={`Delete uniform ${uniform.name}?`}\n    cancel={cancel}\n    confirm={confirm}\n    state={state}\n  >\n    <>\n      <p>Are you sure you want to delete the {uniform.name} uniform?</p>\n      <p>\n        <i>\n          Note: all events that have this uniform will no longer have a uniform.\n        </i>\n      </p>\n    </>\n  </DeleteModal>\n);\n","import React, { useState, useCallback } from \"react\";\nimport {\n  notSentYet,\n  sending,\n  errorSending,\n  isSending,\n  failedToSend\n} from \"state/types\";\nimport { getToken } from \"utils/helpers\";\nimport { parseError, unknownError } from \"state/error\";\nimport { Column, Title, Box, Columns, Divider } from \"components/Basics\";\nimport { FileInput } from \"components/Forms\";\nimport { Button } from \"components/Buttons\";\nimport ErrorBox from \"components/ErrorBox\";\nimport CopyToClipboard from \"react-copy-to-clipboard\";\n\nexport const WebmasterTools: React.FC = () => {\n  return (\n    <>\n      <Title>Webmaster Tools</Title>\n      <Box>\n        <Columns>\n          <WebmasterFile\n            title=\"API\"\n            uploadUrl=\"https://gleeclub.gatech.edu/cgi-bin/admin_tools/upload_api\"\n          />\n          <Divider vertical />\n          <WebmasterFile\n            title=\"frontend\"\n            uploadUrl=\"https://gleeclub.gatech.edu/cgi-bin/api/upload_frontend\"\n          />\n          <Divider vertical />\n          <Column>\n            <b>Copy your token:</b>\n            <br />\n            <br />\n            <CopyToClipboard text={getToken() || \"\"}>\n              <Button>Uno Tokeno</Button>\n            </CopyToClipboard>\n          </Column>\n        </Columns>\n      </Box>\n    </>\n  );\n};\n\ninterface WebmasterFileProps {\n  title: string;\n  uploadUrl: string;\n}\n\nexport const WebmasterFile: React.FC<WebmasterFileProps> = ({\n  title,\n  uploadUrl\n}) => {\n  const [file, setFile] = useState<File | null>(null);\n  const [state, setState] = useState(notSentYet);\n\n  const upload = useCallback(async () => {\n    if (!file) {\n      alert(\"fam. upload a file.\");\n      return;\n    }\n\n    try {\n      setState(sending);\n      const resp = await fetch(uploadUrl, {\n        method: \"POST\",\n        headers: { token: getToken() || \"\" },\n        body: file\n      });\n\n      if (resp.ok) {\n        setState(notSentYet);\n        setFile(null);\n      } else {\n        const error = await parseError(resp);\n        setState(errorSending(error));\n      }\n    } catch {\n      setState(errorSending(unknownError(0, \"failed to make request\")));\n    }\n  }, [file, uploadUrl, setState, setFile]);\n\n  return (\n    <Column>\n      <FileInput\n        file={file}\n        selectFile={setFile}\n        title={`Upload the ${title}:`}\n      />\n      <Button\n        onClick={upload}\n        loading={isSending(state)}\n        style={{ marginTop: \"10px\" }}\n      >\n        Send it!\n      </Button>\n      {failedToSend(state) && <ErrorBox error={state.error} />}\n    </Column>\n  );\n};\n","import React, { useContext } from \"react\";\nimport { loaded } from \"state/types\";\nimport { SelectableList } from \"components/List\";\nimport { visibleAdminTabs } from \"utils/helpers\";\nimport { AdminRoute, routeAdmin } from \"state/route\";\nimport { GlubHubContext, useGlubRoute } from \"utils/context\";\nimport { Section, Container, Columns, Box } from \"components/Basics\";\nimport { AbsenceRequests } from \"./AbsenceRequests\";\nimport { CreateEvent } from \"./create-event/Page\";\nimport { DocumentLinks } from \"./DocumentLinks\";\nimport { GigRequests } from \"./GigRequests\";\nimport { Money } from \"./Money\";\nimport { OfficerPositions } from \"./OfficerPositions\";\nimport { Semesters } from \"./Semesters\";\nimport { SitePermissions } from \"./SitePermissions\";\nimport { Uniforms } from \"./Uniforms\";\nimport { WebmasterTools } from \"./WebmasterTools\";\n\nexport const Admin: React.FC<{ tab: AdminRoute | null }> = ({ tab }) => {\n  const { goToRoute } = useGlubRoute();\n  const { user } = useContext(GlubHubContext);\n\n  return (\n    <Section>\n      <Container>\n        <Columns>\n          <SelectableList\n            listItems={loaded(user ? visibleAdminTabs(user) : [])}\n            isSelected={t => t.route === tab?.route}\n            messageIfEmpty=\"You have no officer permissions. Perish.\"\n            onSelect={t => goToRoute(routeAdmin(t))}\n            render={t => <td>{t.name}</td>}\n          />\n          <div>\n            {tab ? (\n              <TabContent tab={tab} />\n            ) : (\n              <Box>Please select a menu item</Box>\n            )}\n          </div>\n        </Columns>\n      </Container>\n    </Section>\n  );\n};\n\nconst TabContent: React.FC<{ tab: AdminRoute }> = ({ tab }) => {\n  switch (tab.route) {\n    case \"absence-requests\":\n      return <AbsenceRequests />;\n\n    case \"create-event\":\n      return <CreateEvent gigRequestId={tab.gigRequestId} />;\n\n    case \"document-links\":\n      return <DocumentLinks />;\n\n    case \"gig-requests\":\n      return <GigRequests />;\n\n    case \"money\":\n      return <Money tab={tab.tab} />;\n\n    case \"officer-positions\":\n      return <OfficerPositions />;\n\n    case \"semesters\":\n      return <Semesters tab={tab.tab} />;\n\n    case \"site-permissions\":\n      return <SitePermissions />;\n\n    case \"uniforms\":\n      return <Uniforms />;\n\n    case \"webmaster-tools\":\n      return <WebmasterTools />;\n  }\n};\n","import React, { useState, useEffect } from \"react\";\nimport {\n  EventCarpool,\n  Member,\n  GlubEvent,\n  SimpleAttendance,\n  UpdatedCarpool\n} from \"state/models\";\nimport {\n  RemoteContent,\n  RequiresPermission,\n  AttendanceIcon\n} from \"components/Complex\";\nimport { get } from \"utils/request\";\nimport { fullName } from \"utils/helpers\";\nimport { editCarpool } from \"state/permissions\";\nimport { routeEditCarpools, routeProfile } from \"state/route\";\nimport { RemoteData, loading, resultToRemote } from \"state/types\";\nimport { LinkButton } from \"components/Buttons\";\nimport { useGlubRoute } from \"utils/context\";\nimport { Table } from \"components/Table\";\n\nexport const Carpools: React.FC<{ event: GlubEvent }> = ({ event }) => {\n  const { goToRoute } = useGlubRoute();\n\n  const [carpools, setCarpools] = useState<RemoteData<EventCarpool[]>>(loading);\n\n  useEffect(() => {\n    const loadCarpools = async () => {\n      const result = await get<EventCarpool[]>(`events/${event.id}/carpools`);\n      setCarpools(resultToRemote(result));\n    };\n\n    loadCarpools();\n  }, [event, setCarpools]);\n\n  return (\n    <RemoteContent\n      data={carpools}\n      render={carpools => (\n        <>\n          {carpools.length === 0 ? (\n            <div>No carpools set for this event.</div>\n          ) : (\n            <Table scrollable>\n              {carpools.map(carpool => (\n                <CarpoolPartialTable\n                  includeIcon\n                  carpool={carpool}\n                  event={event}\n                  selection={{\n                    selected: [],\n                    selectEmptyCarpool: () => {},\n                    select: member => goToRoute(routeProfile(member, null))\n                  }}\n                />\n              ))}\n            </Table>\n          )}\n          <RequiresPermission permission={editCarpool}>\n            <div style={{ padding: \"10px\" }}>\n              <LinkButton route={routeEditCarpools(event.id)}>\n                Edit Carpools\n              </LinkButton>\n            </div>\n          </RequiresPermission>\n        </>\n      )}\n    />\n  );\n};\n\nexport interface EditCarpoolSelection {\n  selected: string[];\n  select: (member: string) => void;\n  selectEmptyCarpool: (driver: string) => void;\n}\n\ninterface CarpoolTableBaseProps {\n  event: GlubEvent;\n  selection?: EditCarpoolSelection;\n  includeIcon?: boolean;\n}\n\ninterface CarpoolTablesProps extends CarpoolTableBaseProps {\n  carpools: UpdatedCarpool[];\n}\n\nexport const CarpoolTables: React.FC<CarpoolTablesProps> = props => (\n  <Table>\n    {props.carpools.map(carpool => (\n      <CarpoolTable carpool={carpool} {...props} />\n    ))}\n  </Table>\n);\n\ninterface CarpoolTableProps extends CarpoolTableBaseProps {\n  carpool: UpdatedCarpool;\n}\n\nexport const CarpoolTable: React.FC<CarpoolTableProps> = props => (\n  <Table>\n    <CarpoolPartialTable {...props} />\n  </Table>\n);\n\nexport const CarpoolPartialTable: React.FC<CarpoolTableProps> = ({\n  event,\n  carpool,\n  selection,\n  includeIcon\n}) => (\n  <>\n    <thead>\n      <CarpoolRow\n        member={carpool.driver}\n        event={event}\n        isDriver\n        selection={selection}\n        includeIcon={includeIcon}\n      />\n    </thead>\n    <tbody>\n      {carpool.passengers.length === 0 ? (\n        <NoMembersRow\n          select={() => selection?.selectEmptyCarpool(carpool.driver.email)}\n        />\n      ) : (\n        <>\n          {carpool.passengers.map((passenger, index) => (\n            <CarpoolRow\n              member={passenger}\n              event={event}\n              selection={selection}\n              includeIcon={includeIcon && index === 0}\n            />\n          ))}\n        </>\n      )}\n    </tbody>\n  </>\n);\n\nconst NoMembersRow: React.FC<{ select: () => void }> = ({ select }) => (\n  <tr>\n    <td colSpan={5} style={{ width: \"100%\" }} onClick={select}>\n      <article className=\"message\">\n        <div className=\"message-body\">It sure is lonely here...</div>\n      </article>\n    </td>\n  </tr>\n);\n\ninterface CarpoolRowProps extends CarpoolTableBaseProps {\n  member: Member;\n  attendance?: SimpleAttendance;\n  isDriver?: boolean;\n}\n\nexport const CarpoolRow: React.FC<CarpoolRowProps> = props => {\n  const isSelected = props.selection?.selected.some(\n    email => email === props.member.email\n  );\n  const passengerCount = props.member.passengers\n    ? `${props.member.passengers}`\n    : \"\";\n  const ColumnElement: React.FC = ({ children }) =>\n    props.isDriver ? <th>{children}</th> : <td>{children}</td>;\n\n  return (\n    <tr\n      onClick={() => props.selection?.select(props.member.email)}\n      style={{ cursor: \"pointer\", width: \"100%\", minWidth: \"100%\" }}\n      className={isSelected ? \"is-selected\" : undefined}\n    >\n      <ColumnElement>\n        {props.includeIcon && (\n          <span className=\"icon\">\n            <i className={\"fas fa-\" + (props.isDriver ? \"user\" : \"users\")} />\n          </span>\n        )}\n      </ColumnElement>\n      <ColumnElement>{fullName(props.member)}</ColumnElement>\n      <ColumnElement>{props.member.location}</ColumnElement>\n      <ColumnElement>{passengerCount}</ColumnElement>\n      <ColumnElement>\n        <AttendanceIcon\n          event={{ ...props.event, attendance: props.attendance || null }}\n        />\n      </ColumnElement>\n    </tr>\n  );\n};\n","import React, { useState, useContext, useEffect, useCallback } from \"react\";\nimport {\n  GlubEvent,\n  EventAttendee,\n  UpdatedCarpool,\n  EventCarpool,\n  Member\n} from \"state/models\";\nimport {\n  loading,\n  RemoteData,\n  loaded,\n  errorLoading,\n  notSentYet,\n  sending,\n  errorSending,\n  isLoaded,\n  isSending,\n  failedToSend\n} from \"state/types\";\nimport {\n  Section,\n  Container,\n  Title,\n  Columns,\n  Column,\n  Box\n} from \"components/Basics\";\nimport {\n  CarpoolPartialTable,\n  EditCarpoolSelection,\n  CarpoolRow\n} from \"./Carpools\";\nimport ErrorBox from \"components/ErrorBox\";\nimport { collect3, get, post } from \"utils/request\";\nimport { GlubHubContext, useGlubRoute } from \"utils/context\";\nimport { routeEvents, eventCarpools } from \"state/route\";\nimport { LinkButton, Button } from \"components/Buttons\";\nimport { RemoteContent } from \"components/Complex\";\nimport { Table } from \"components/Table\";\n\ninterface CarpoolData {\n  event: GlubEvent;\n  attendance: EventAttendee[];\n  carpools: UpdatedCarpool[];\n}\n\nexport const EditCarpools: React.FC<{ eventId: number }> = ({ eventId }) => {\n  const { members } = useContext(GlubHubContext);\n  const { goToRoute } = useGlubRoute();\n\n  const [data, setData] = useState<RemoteData<CarpoolData>>(loading);\n  const [selected, setSelected] = useState<string[]>([]);\n  const [updateState, setUpdateState] = useState(notSentYet);\n\n  const getSelectedIfAllUnassigned = useCallback(():\n    | [CarpoolData, Member[]]\n    | null => {\n    if (!isLoaded(data) || !selected.length) {\n      return null;\n    }\n\n    const membersLeft = remainingMembers(members, data.data.carpools);\n    const selectedMembers = selected.map(email =>\n      membersLeft.find(member => member.email === email)\n    );\n\n    if (selectedMembers.every(m => !!m)) {\n      return [data.data, selectedMembers as Member[]];\n    } else {\n      return null;\n    }\n  }, [data, selected, members]);\n\n  const selectMember = useCallback(\n    (email: string) => {\n      if (selected.includes(email)) {\n        setSelected(selected.filter(s => s !== email));\n      } else {\n        setSelected([...selected, email]);\n      }\n    },\n    [selected, setSelected]\n  );\n\n  // const selectEmptyCarpool;\n\n  const moveBackToUnassigned = useCallback(() => {\n    if (!isLoaded(data) || !selected.length) return;\n\n    setData(\n      loaded({\n        ...data.data,\n        carpools: data.data.carpools\n          .map(c => ({\n            driver: c.driver,\n            passengers: c.passengers.filter(p =>\n              selected.every(s => s !== p.email)\n            )\n          }))\n          .filter(c => selected.every(s => s !== c.driver.email))\n      })\n    );\n    setSelected([]);\n  }, [data, selected, setData, setSelected]);\n\n  const addNewCarpool = useCallback(() => {\n    const allUnassigned = getSelectedIfAllUnassigned();\n    if (!allUnassigned) return;\n\n    const [loadedData, selectedMembers] = allUnassigned;\n    const driver = selectedMembers[0]!;\n    const passengers = selectedMembers.slice(1) as Member[];\n\n    setSelected([]);\n    setData(\n      loaded({\n        ...loadedData,\n        carpools: [...loadedData.carpools, { driver, passengers }]\n      })\n    );\n  }, [setData, setSelected, getSelectedIfAllUnassigned]);\n\n  const updateCarpools = useCallback(async () => {\n    if (!isLoaded(data)) return;\n\n    setUpdateState(sending);\n    const body = data.data.carpools.map(c => ({\n      driver: c.driver.email,\n      passengers: c.passengers.map(p => p.email)\n    }));\n    const update = await post(`events/${eventId}/carpools`, body);\n\n    if (update.successful) {\n      goToRoute(routeEvents(eventId, eventCarpools));\n    } else {\n      setUpdateState(errorSending(update.error));\n    }\n  }, [data, setUpdateState, eventId, goToRoute]);\n\n  useEffect(() => {\n    const loadData = async () => {\n      const eventUrl = `events/${eventId}`;\n      const requests = await collect3(\n        get<GlubEvent>(eventUrl),\n        get<EventAttendee[]>(eventUrl + \"/see_whos_attending\"),\n        get<EventCarpool[]>(eventUrl + \"/carpools\")\n      );\n\n      if (requests.successful) {\n        const [event, attendance, carpools] = requests.data;\n        setData(\n          loaded({ event, attendance, carpools: cleanupCarpools(carpools) })\n        );\n      } else {\n        setData(errorLoading(requests.error));\n      }\n    };\n\n    loadData();\n  }, [eventId, setData]);\n\n  const selection: EditCarpoolSelection = {\n    selected,\n    select: selectMember,\n    selectEmptyCarpool: () => {} // TODO\n  };\n\n  return (\n    <Section>\n      <Container>\n        <RemoteContent\n          data={data}\n          render={data => (\n            <>\n              <Title>Carpools for {data.event.name}</Title>\n              <Columns>\n                <Column>\n                  <Box>\n                    <RemainingMemberTable\n                      data={data}\n                      selection={selection}\n                      moveBackToUnassigned={moveBackToUnassigned}\n                    />\n                  </Box>\n                </Column>\n                <Column>\n                  <Box>\n                    <div style={{ width: \"100%\", paddingBottom: \"10px\" }}>\n                      <LinkButton\n                        route={routeEvents(eventId, eventCarpools)}\n                        className=\"is-pulled-left\"\n                      >\n                        Cancel\n                      </LinkButton>\n                      <Button\n                        color=\"is-primary\"\n                        className=\"is-pulled-right\"\n                        loading={isSending(updateState)}\n                        onClick={updateCarpools}\n                      >\n                        Update Carpools\n                      </Button>\n                      {failedToSend(updateState) && (\n                        <ErrorBox error={updateState.error} />\n                      )}\n                    </div>\n                    <Table style={{ width: \"100%\" }}>\n                      {data.carpools.map(carpool => (\n                        <CarpoolPartialTable\n                          carpool={carpool}\n                          event={data.event}\n                          includeIcon={true}\n                          selection={selection}\n                        />\n                      ))}\n                    </Table>\n                    <Button fullwidth onClick={addNewCarpool}>\n                      Pick a driver and then click here to add new carpool\n                    </Button>\n                  </Box>\n                </Column>\n              </Columns>\n            </>\n          )}\n        />\n      </Container>\n    </Section>\n  );\n};\n\ninterface RemainingMemberTableProps {\n  data: CarpoolData;\n  selection: EditCarpoolSelection;\n  moveBackToUnassigned: () => void;\n}\n\nconst RemainingMemberTable: React.FC<RemainingMemberTableProps> = ({\n  data,\n  selection,\n  moveBackToUnassigned\n}) => {\n  const { members } = useContext(GlubHubContext);\n  const membersLeft = remainingMembers(members, data.carpools);\n\n  if (!membersLeft.length) {\n    return (\n      <div onClick={moveBackToUnassigned}>\n        <i>That's everyone!</i>\n      </div>\n    );\n  }\n\n  return (\n    <Table>\n      <tbody>\n        {membersLeft.map(member => (\n          <CarpoolRow\n            member={member}\n            event={{ ...data.event, attendance: null }}\n            selection={selection}\n          />\n        ))}\n      </tbody>\n    </Table>\n  );\n};\n\nconst remainingMembers = (\n  members: Member[],\n  carpools: UpdatedCarpool[]\n): Member[] =>\n  members.filter(\n    member => !carpools.some(c => memberInCarpool(member.email, c))\n  );\n\nconst cleanupCarpools = (carpools: EventCarpool[]): UpdatedCarpool[] =>\n  carpools.map(c => ({\n    driver: c.driver,\n    passengers: c.passengers.filter(p => p.email !== c.driver.email)\n  }));\n\nconst memberInCarpool = (email: string, carpool: UpdatedCarpool) =>\n  carpool.driver.email === email ||\n  carpool.passengers.some(p => p.email === email);\n\n// type Msg\n//     | ClickUnassignedMember Member\n//     | ClickEmptyUnassignedMemberList\n//     | ClickDriver UpdatedCarpool\n//     | ClickPassenger UpdatedCarpool Member\n//     | ClickEmptyPassengerList UpdatedCarpool\n//     | AddNewCarpool\n//     | SaveCarpools\n//     | OnSaveCarpools (GreaseResult ())\n\n//         ClickUnassignedMember member ->\n//             case model.selection of\n//                 Driver carpool ->\n//                     ( unassignCarpoolDriver model carpool, Cmd.none )\n\n//                 Passengers carpool passengers ->\n//                     ( unassignCarpoolPassengers model carpool passengers, Cmd.none )\n\n//                 UnassignedMembers members ->\n//                     if members |> List.any (\\m -> m.email == member.email) then\n//                         ( { model | selection = UnassignedMembers (members |> List.filter (\\m -> m.email /= member.email)) }, Cmd.none )\n\n//                     else\n//                         ( { model | selection = UnassignedMembers (members ++ [ member ]) }, Cmd.none )\n\n//         ClickEmptyUnassignedMemberList ->\n//             case model.selection of\n//                 Driver carpool ->\n//                     ( unassignCarpoolDriver model carpool, Cmd.none )\n\n//                 Passengers carpool passengers ->\n//                     ( unassignCarpoolPassengers model carpool passengers, Cmd.none )\n\n//                 UnassignedMembers _ ->\n//                     ( model, Cmd.none )\n\n//         ClickDriver carpool ->\n//             case model.selection of\n//                 Driver otherCarpool ->\n//                     let\n//                         carpoolMapper c =\n//                             if c.driver.email == carpool.driver.email then\n//                                 { c | driver = otherCarpool.driver }\n\n//                             else if c.driver.email == otherCarpool.driver.email then\n//                                 { c | driver = carpool.driver }\n\n//                             else\n//                                 c\n//                     in\n//                     ( updateCarpoolsAndClearSelection model (List.map carpoolMapper), Cmd.none )\n\n//                 Passengers otherCarpool passengers ->\n//                     if otherCarpool.driver.email == carpool.driver.email then\n//                         ( model, Cmd.none )\n\n//                     else\n//                         case passengers |> uncons of\n//                             Just ( firstPassenger, [] ) ->\n//                                 let\n//                                     carpoolMapper c =\n//                                         if c.driver.email == carpool.driver.email then\n//                                             { c\n//                                                 | driver = firstPassenger\n//                                                 , passengers =\n//                                                     c.passengers\n//                                                         |> List.filter (\\p -> p.email /= firstPassenger.email)\n//                                             }\n\n//                                         else\n//                                             c\n//                                 in\n//                                 ( updateCarpoolsAndClearSelection model (List.map carpoolMapper), Cmd.none )\n\n//                             _ ->\n//                                 ( model, Cmd.none )\n\n//                 UnassignedMembers members ->\n//                     if List.isEmpty members then\n//                         ( { model | selection = Driver carpool }, Cmd.none )\n\n//                     else\n//                         case members |> uncons of\n//                             Just ( firstMember, [] ) ->\n//                                 let\n//                                     carpoolMapper c =\n//                                         if c.driver.email == carpool.driver.email then\n//                                             { c | driver = firstMember }\n\n//                                         else\n//                                             c\n//                                 in\n//                                 ( updateCarpoolsAndClearSelection model (List.map carpoolMapper), Cmd.none )\n\n//                             _ ->\n//                                 ( model, Cmd.none )\n\n//         ClickPassenger carpool passenger ->\n//             case model.selection of\n//                 Driver otherCarpool ->\n//                     if List.isEmpty otherCarpool.passengers then\n//                         ( updateCarpoolsAndClearSelection model\n//                             (List.concatMap\n//                                 (\\c ->\n//                                     if c.driver.email == otherCarpool.driver.email then\n//                                         []\n\n//                                     else if c.driver.email == carpool.driver.email then\n//                                         [ { c | passengers = c.passengers ++ [ otherCarpool.driver ] } ]\n\n//                                     else\n//                                         [ c ]\n//                                 )\n//                             )\n//                         , Cmd.none\n//                         )\n\n//                     else\n//                         ( model, Cmd.none )\n\n//                 Passengers otherCarpool passengers ->\n//                     if otherCarpool.driver.email == carpool.driver.email then\n//                         if passengers |> List.any (\\p -> p.email == passenger.email) then\n//                             ( { model | selection = Passengers otherCarpool (passengers |> List.filter (\\p -> p.email /= passenger.email)) }, Cmd.none )\n\n//                         else\n//                             ( { model | selection = Passengers otherCarpool (passengers ++ [ passenger ]) }, Cmd.none )\n\n//                     else\n//                         ( updateCarpoolsAndClearSelection model\n//                             (List.map\n//                                 (\\c ->\n//                                     if c.driver.email == carpool.driver.email then\n//                                         { c | passengers = c.passengers ++ passengers }\n\n//                                     else if c.driver.email == otherCarpool.driver.email then\n//                                         { c | passengers = c.passengers |> List.filter (\\p -> passengers |> List.all (\\cp -> cp.email /= p.email)) }\n\n//                                     else\n//                                         c\n//                                 )\n//                             )\n//                         , Cmd.none\n//                         )\n\n//                 UnassignedMembers members ->\n//                     if List.isEmpty members then\n//                         ( { model | selection = Passengers carpool [ passenger ] }, Cmd.none )\n\n//                     else\n//                         ( updateCarpoolsAndClearSelection model\n//                             (List.map\n//                                 (\\c ->\n//                                     if c.driver.email == carpool.driver.email then\n//                                         { c | passengers = c.passengers ++ members }\n\n//                                     else\n//                                         c\n//                                 )\n//                             )\n//                         , Cmd.none\n//                         )\n\n//         ClickEmptyPassengerList carpool ->\n//             case model.selection of\n//                 Driver otherCarpool ->\n//                     if List.isEmpty otherCarpool.passengers then\n//                         ( updateCarpoolsAndClearSelection model\n//                             (List.concatMap\n//                                 (\\c ->\n//                                     if c.driver.email == otherCarpool.driver.email then\n//                                         []\n\n//                                     else if c.driver.email == carpool.driver.email then\n//                                         [ { c | passengers = c.passengers ++ [ otherCarpool.driver ] } ]\n\n//                                     else\n//                                         [ c ]\n//                                 )\n//                             )\n//                         , Cmd.none\n//                         )\n\n//                     else\n//                         ( model, Cmd.none )\n\n//                 Passengers otherCarpool passengers ->\n//                     ( updateCarpoolsAndClearSelection model\n//                         (List.map\n//                             (\\c ->\n//                                 if c.driver.email == carpool.driver.email then\n//                                     { c | passengers = c.passengers ++ passengers }\n\n//                                 else if c.driver.email == otherCarpool.driver.email then\n//                                     { c | passengers = c.passengers |> List.filter (\\p -> passengers |> List.all (\\cp -> cp.email /= p.email)) }\n\n//                                 else\n//                                     c\n//                             )\n//                         )\n//                     , Cmd.none\n//                     )\n\n//                 UnassignedMembers members ->\n//                     ( updateCarpoolsAndClearSelection model\n//                         (List.map\n//                             (\\c ->\n//                                 if c.driver.email == carpool.driver.email then\n//                                     { c | passengers = c.passengers ++ members }\n\n//                                 else\n//                                     c\n//                             )\n//                         )\n//                     , Cmd.none\n//                     )\n\n//         AddNewCarpool ->\n//             ( addNewCarpool model, Cmd.none )\n\n// unassignCarpoolPassengers : Model -> UpdatedCarpool -> List Member -> Model\n// unassignCarpoolPassengers model carpool passengers =\n//     let\n//         mapCarpool givenCarpool =\n//             if givenCarpool.driver.email == carpool.driver.email then\n//                 { givenCarpool | passengers = givenCarpool.passengers |> filterPassengers }\n\n//             else\n//                 givenCarpool\n\n//         filterPassengers =\n//             List.filter (\\p -> passengers |> List.all (\\cp -> cp.email /= p.email))\n//     in\n//     updateCarpoolsAndClearSelection model (List.map mapCarpool)\n\n// unassignCarpoolDriver : Model -> UpdatedCarpool -> Model\n// unassignCarpoolDriver model carpool =\n//     if List.isEmpty carpool.passengers then\n//         let\n//             mapCarpools =\n//                 List.filter (\\c -> c.driver.email /= carpool.driver.email)\n//         in\n//         updateCarpoolsAndClearSelection model mapCarpools\n\n//     else\n//         model\n\n// updateCarpoolsAndClearSelection : Model -> (List UpdatedCarpool -> List UpdatedCarpool) -> Model\n// updateCarpoolsAndClearSelection model carpoolsMapper =\n//     let\n//         mapData =\n//             mapLoaded\n//                 (\\data ->\n//                     { data\n//                         | carpools = data.carpools |> carpoolsMapper\n//                     }\n//                 )\n//     in\n//     { model\n//         | selection = UnassignedMembers []\n//         , data = model.data |> mapData\n//     }\n\n// addNewCarpool : Model -> Model\n// addNewCarpool model =\n//     case model.selection of\n//         UnassignedMembers members ->\n//             case members |> uncons of\n//                 Just ( firstMember, [] ) ->\n//                     updateCarpoolsAndClearSelection model\n//                         (\\carpools ->\n//                             carpools\n//                                 ++ [ { id = Nothing\n//                                      , driver = firstMember\n//                                      , passengers = []\n//                                      }\n//                                    ]\n//                         )\n\n//                 _ ->\n//                     model\n\n//         Passengers carpool passengers ->\n//             case passengers |> uncons of\n//                 Just ( firstPassenger, [] ) ->\n//                     updateCarpoolsAndClearSelection model\n//                         (\\carpools ->\n//                             (carpools\n//                                 |> List.map\n//                                     (\\c ->\n//                                         if c.driver.email == carpool.driver.email then\n//                                             { c | passengers = c.passengers |> List.filter (\\p -> p.email /= firstPassenger.email) }\n\n//                                         else\n//                                             c\n//                                     )\n//                             )\n//                                 ++ [ { id = Nothing\n//                                      , driver = firstPassenger\n//                                      , passengers = []\n//                                      }\n//                                    ]\n//                         )\n\n//                 _ ->\n//                     model\n\n//         Driver carpool ->\n//             model\n\n// collectSelectedMembers : List Member -> List String -> List Member\n// collectSelectedMembers members emails =\n//     emails\n//         |> List.map (\\email -> members |> List.Extra.find (\\member -> email == member.email))\n//         |> List.concatMap (\\maybeMember -> maybeMember |> Maybe.map List.singleton |> Maybe.withDefault [])\n\n// allMembersAreNotInCarpools : CarpoolData -> List String -> Bool\n// allMembersAreNotInCarpools data selection =\n//     not\n//         (selection\n//             |> List.any\n//                 (\\email -> data.carpools |> List.any (memberInCarpool email))\n//         )\n\n// memberInCarpool : String -> UpdatedCarpool -> Bool\n// memberInCarpool email carpool =\n//     (carpool.driver.email == email)\n//         || (carpool.passengers |> List.any (\\passenger -> passenger.email == email))\n\n// remainingMembers : List UpdatedCarpool -> List Member -> List Member\n// remainingMembers carpools members =\n//     let\n//         carpoolEmails =\n//             carpools\n//                 |> List.concatMap\n//                     (\\carpool ->\n//                         carpool.driver.email :: (carpool.passengers |> List.map .email)\n//                     )\n//     in\n//     members |> List.filter (\\member -> carpoolEmails |> List.all ((/=) member.email))\n\n// findAttendance : CarpoolData -> String -> Maybe SimpleAttendance\n// findAttendance data email =\n//     data.attendance |> find (\\attendance -> attendance.member.email == email) |> Maybe.map .attendance\n","import React, { useState, useContext, useCallback, FormEvent } from \"react\";\nimport { GlubHubContext, useGlubRoute } from \"utils/context\";\nimport {\n  notSentYet,\n  sending,\n  resultToSubmissionState,\n  failedToSend,\n  SubmissionState,\n  isSending\n} from \"state/types\";\nimport { Enrollment, Member, Info } from \"state/models\";\nimport { Md5 } from \"ts-md5\";\nimport { post } from \"utils/request\";\nimport { routeProfile, routeLogin } from \"state/route\";\nimport { Section, Container, Title, Box, Title4 } from \"components/Basics\";\nimport ErrorBox from \"components/ErrorBox\";\nimport {\n  InputWrapper,\n  TextInput,\n  stringType,\n  emailType,\n  phoneType,\n  passwordType,\n  CheckboxInput,\n  numberType,\n  Control,\n  SelectInput,\n  sectionType\n} from \"components/Forms\";\nimport {\n  ButtonGroup,\n  LinkButton,\n  SubmitButton,\n  Button\n} from \"components/Buttons\";\n\nexport const EditProfile: React.FC = () => {\n  const { user, info } = useContext(GlubHubContext);\n  const { goToRoute } = useGlubRoute();\n\n  const [form, updateForm] = useState<ProfileForm>(\n    user ? formForUser(user) : emptyProfileForm(info)\n  );\n  const [state, setState] = useState(notSentYet);\n\n  const submit = useCallback(async (event: FormEvent) => {\n    event.preventDefault();\n    setState(sending);\n\n    const enteredPassword = !!(form.password || form.confirmPassword);\n    if (!enteredPassword && !user) {\n      alert(\"You must enter a password.\");\n      return;\n    } else if (form.password !== form.confirmPassword) {\n      alert(\"Your passwords don't match.\");\n      return;\n    } else if (!form.section) {\n      alert(\"You need a section, bucko.\");\n      return;\n    }\n\n    const passHash = enteredPassword\n      ? (Md5.hashStr(form.password) as string)\n      : null;\n    const body = buildProfileBody(form, passHash);\n    const result = await post(user ? \"members/profile\" : \"members\", body);\n\n    setState(resultToSubmissionState(result));\n    if (result.successful) {\n      if (user) {\n        goToRoute(routeProfile(user.email, null));\n      } else {\n        goToRoute(routeLogin);\n        alert(`You have successfully created an account with email ${body.email}!`);\n      }\n    }\n  }, [setState, form, user, goToRoute]);\n\n  return (\n    <Section>\n      <Container>\n        <Title>{user ? \"Edit Profile\" : \"Create Profile\"}</Title>\n        <Box>\n          <HeaderText loggedIn={!!user} />\n          <br />\n          <FormFields\n            form={form}\n            update={updateForm}\n            user={user}\n            submit={submit}\n            state={state}\n          />\n          {failedToSend(state) && <ErrorBox error={state.error} />}\n        </Box>\n      </Container>\n    </Section>\n  );\n};\n\nconst HeaderText: React.FC<{ loggedIn: boolean }> = ({ loggedIn }) => {\n  const strikethrough = (text: string) => (\n    <span style={{ textDecoration: \"line-through\" }}>{text}</span>\n  );\n\n  if (loggedIn) {\n    return (\n      <p>\n        You can make changes to your stats here. It's important we know as much\n        about you as possible to {strikethrough(\"creep\")}{\" \"}\n        {strikethrough(\"better serve you\")} make you drive carpools. It'll also\n        help your new friends get to know you!\n      </p>\n    );\n  } else {\n    return (\n      <p>\n        Note that this registration is not mandatory. If you are unwilling to\n        provide any of the required information, let an officer know and we will\n        work out alternate means of registration.\n      </p>\n    );\n  }\n};\n\ninterface FormFieldsProps {\n  form: ProfileForm;\n  user: Member | null;\n  state: SubmissionState;\n  submit: (event: FormEvent) => void;\n  update: (form: ProfileForm) => void;\n}\n\nconst FormFields: React.FC<FormFieldsProps> = ({\n  form,\n  user,\n  state,\n  submit,\n  update\n}) => (\n    <form onSubmit={submit}>\n      <Title4>Really Important Stuff</Title4>\n      <InputWrapper horizontal title=\"Name\">\n        <TextInput\n          type={stringType}\n          value={form.firstName}\n          onInput={firstName => update({ ...form, firstName })}\n          required\n          placeholder=\"First\"\n        />\n        <TextInput\n          type={stringType}\n          value={form.preferredName}\n          onInput={preferredName => update({ ...form, preferredName })}\n          placeholder=\"Preferred (optional)\"\n        />\n        <TextInput\n          type={stringType}\n          value={form.lastName}\n          onInput={lastName => update({ ...form, lastName })}\n          required\n          placeholder=\"Last\"\n        />\n      </InputWrapper>\n      <TextInput\n        type={emailType}\n        value={form.email}\n        onInput={email => update({ ...form, email })}\n        horizontal\n        required\n        title=\"E-mail\"\n        placeholder=\"gburdell3@gatech.edu\"\n      />\n      <TextInput\n        type={phoneType}\n        value={form.phoneNumber}\n        onInput={phoneNumber => update({ ...form, phoneNumber })}\n        horizontal\n        required\n        title=\"Phone Number\"\n        placeholder=\"6788675309\"\n      />\n      <InputWrapper horizontal title=\"Password\">\n        <TextInput\n          type={passwordType}\n          value={form.password}\n          onInput={password => update({ ...form, password })}\n          required\n          placeholder=\"Password\"\n        />\n        <TextInput\n          type={passwordType}\n          value={form.confirmPassword}\n          onInput={confirmPassword => update({ ...form, confirmPassword })}\n          required\n          placeholder=\"Confirm Password\"\n        />\n      </InputWrapper>\n      <InputWrapper horizontal title=\"Location\">\n        <LocationFieldBlock form={form} update={update} />\n      </InputWrapper>\n      <TextInput\n        type={stringType}\n        value={form.major}\n        onInput={major => update({ ...form, major })}\n        required\n        horizontal\n        title=\"Major\"\n        placeholder=\"Undecided Engineering\"\n      />\n      <TextInput\n        type={stringType}\n        value={form.hometown}\n        onInput={hometown => update({ ...form, hometown })}\n        required\n        horizontal\n        title=\"Hometown\"\n        placeholder=\"Winslow, Arizona\"\n      />\n      <InputWrapper horizontal title=\"Car\">\n        <CarFieldBlock form={form} update={update} />\n      </InputWrapper>\n      <InputWrapper horizontal title=\"Enrollment\">\n        <EnrollmentBlock form={form} update={update} user={user} />\n      </InputWrapper>\n\n      <Title4>Nice to Know</Title4>\n      <TextInput\n        type={stringType}\n        value={form.about}\n        onInput={about => update({ ...form, about })}\n        horizontal\n        title=\"About\"\n        placeholder=\"I like big butts and I cannot lie\"\n      />\n      <TextInput\n        type={stringType}\n        value={form.picture}\n        onInput={picture => update({ ...form, picture })}\n        horizontal\n        title=\"Picture URL\"\n        placeholder=\"https://create.mylittlepony.movie/images/ponyparticon_bodybig.png\"\n      />\n      <TextInput\n        type={numberType}\n        value={form.arrivedAtTech}\n        onInput={arrivedAtTech =>\n          update({\n            ...form,\n            arrivedAtTech: arrivedAtTech || new Date().getFullYear()\n          })\n        }\n        horizontal\n        title=\"Arrived at Tech\"\n        placeholder=\"2099\"\n      />\n      <ActionButtons user={user} state={state} />\n    </form>\n  );\n\ninterface ActionButtonsProps {\n  user: Member | null;\n  state: SubmissionState;\n}\n\nconst ActionButtons: React.FC<ActionButtonsProps> = ({ user, state }) => (\n  <ButtonGroup alignment=\"is-right\">\n    {user && (\n      <LinkButton route={routeProfile(user.email, null)}>Back</LinkButton>\n    )}\n    <SubmitButton color=\"is-primary\" loading={isSending(state)}>\n      Save\n    </SubmitButton>\n  </ButtonGroup>\n);\n\ninterface ProfileFormProps {\n  form: ProfileForm;\n  update: (form: ProfileForm) => void;\n}\n\nconst CarFieldBlock: React.FC<ProfileFormProps> = ({ form, update }) => (\n  <div className=\"field is-grouped\">\n    <CheckboxInput\n      content=\"I have a car\"\n      checked={form.passengers > 0}\n      onChange={hasCar => update({ ...form, passengers: hasCar ? 1 : 0 })}\n    />\n    {form.passengers > 0 ? (\n      <TextInput\n        type={numberType}\n        value={form.passengers}\n        onInput={passengers => update({ ...form, passengers: passengers || 0 })}\n        placeholder=\"How many?\"\n        suffix=\"passengers\"\n      />\n    ) : \"\"}\n  </div>\n);\n\nconst LocationFieldBlock: React.FC<ProfileFormProps> = ({ form, update }) => (\n  <>\n    <TextInput\n      type={stringType}\n      value={form.location}\n      onInput={location => update({ ...form, location })}\n      placeholder=\"Glenn\"\n    />\n    <Control>\n      <ButtonGroup connected>\n        <Button\n          color={form.onCampus ? \"is-primary\" : undefined}\n          onClick={() => update({ ...form, onCampus: true })}\n        >\n          On-campus\n        </Button>\n        <Button\n          color={!form.onCampus ? \"is-primary\" : undefined}\n          onClick={() => update({ ...form, onCampus: false })}\n        >\n          Off-campus\n        </Button>\n      </ButtonGroup>\n    </Control>\n  </>\n);\n\ninterface EnrollmentBlockProps extends ProfileFormProps {\n  user: Member | null;\n}\n\nconst EnrollmentBlock: React.FC<EnrollmentBlockProps> = ({\n  form,\n  update,\n  user\n}) => {\n  const { info } = useContext(GlubHubContext);\n\n  return (\n    <InputWrapper horizontal>\n      <Control>\n        <ButtonGroup connected>\n          {user && (\n            <EnrollmentOption form={form} update={update} enrollment={null} />\n          )}\n          <EnrollmentOption form={form} update={update} enrollment={\"Class\"} />\n          <EnrollmentOption form={form} update={update} enrollment={\"Club\"} />\n        </ButtonGroup>\n      </Control>\n      <span style={{ width: \"15px\" }} />\n      <SelectInput\n        type={sectionType(info)}\n        values={info?.sections || []}\n        selected={form.section}\n        onInput={section => update({ ...form, section })}\n      />\n    </InputWrapper>\n  );\n};\n\ninterface EnrollmentOptionProps extends ProfileFormProps {\n  enrollment: Enrollment | null;\n}\n\nconst EnrollmentOption: React.FC<EnrollmentOptionProps> = ({\n  form,\n  update,\n  enrollment\n}) => (\n    <Button\n      color={form.enrollment === enrollment ? \"is-primary\" : undefined}\n      onClick={() => update({ ...form, enrollment })}\n    >\n      {enrollment || \"Inactive\"}\n    </Button>\n  );\n\ninterface ProfileForm {\n  firstName: string;\n  preferredName: string;\n  lastName: string;\n  email: string;\n  password: string;\n  confirmPassword: string;\n  phoneNumber: string;\n  location: string;\n  onCampus: boolean;\n  major: string;\n  hometown: string;\n  passengers: number;\n  enrollment: Enrollment | null;\n  section: string | null;\n  about: string;\n  picture: string;\n  arrivedAtTech: number | null;\n  gatewayDrug: string;\n  conflicts: string;\n  dietaryRestrictions: string;\n}\n\nconst formForUser = (user: Member): ProfileForm => ({\n  firstName: user.firstName,\n  preferredName: user.preferredName || \"\",\n  lastName: user.lastName,\n  email: user.email,\n  password: \"\",\n  confirmPassword: \"\",\n  phoneNumber: user.phoneNumber,\n  location: user.location,\n  onCampus: user.onCampus || false,\n  major: user.major || \"\",\n  hometown: user.hometown || \"\",\n  passengers: user.passengers,\n  enrollment: user.enrollment,\n  section: user.section,\n  about: user.about || \"\",\n  picture: user.picture || \"\",\n  arrivedAtTech: user.arrivedAtTech,\n  gatewayDrug: user.gatewayDrug || \"\",\n  conflicts: user.conflicts || \"\",\n  dietaryRestrictions: user.dietaryRestrictions || \"\"\n});\n\nconst emptyProfileForm = (info: Info | null): ProfileForm => ({\n  firstName: \"\",\n  preferredName: \"\",\n  lastName: \"\",\n  email: \"\",\n  password: \"\",\n  confirmPassword: \"\",\n  phoneNumber: \"\",\n  location: \"\",\n  onCampus: true,\n  major: \"\",\n  hometown: \"\",\n  passengers: 0,\n  enrollment: \"Class\",\n  section: info?.sections[0] || null,\n  about: \"\",\n  picture: \"\",\n  arrivedAtTech: new Date().getFullYear(),\n  gatewayDrug: \"\",\n  conflicts: \"\",\n  dietaryRestrictions: \"\"\n});\n\nconst buildProfileBody = (form: ProfileForm, passHash: string | null) => ({\n  email: form.email,\n  firstName: form.firstName,\n  preferredName: form.preferredName,\n  lastName: form.lastName,\n  passHash,\n  phoneNumber: form.phoneNumber,\n  picture: form.picture,\n  passengers: form.passengers,\n  location: form.location,\n  onCampus: form.onCampus,\n  about: form.about,\n  major: form.major,\n  hometown: form.hometown,\n  arrivedAtTech: form.arrivedAtTech,\n  gatewayDrug: form.gatewayDrug,\n  conflicts: form.conflicts,\n  dietaryRestrictions: form.dietaryRestrictions,\n  section: form.section,\n  enrollment: form.enrollment\n});\n","import React, { useState, useCallback, useContext } from \"react\";\nimport { routeEvents, eventRequestAbsence, eventEdit } from \"state/route\";\nimport DeleteModal from \"components/DeleteModal\";\nimport { eventIsOver } from \"utils/helpers\";\nimport { post, deleteRequest } from \"utils/request\";\nimport { viewEventPrivateDetails } from \"state/permissions\";\nimport { GlubEvent, SimpleAttendance, Uniform, Gig } from \"state/models\";\nimport {\n  SubmissionState,\n  notSentYet,\n  sending,\n  errorSending,\n  isSending,\n  failedToSend\n} from \"state/types\";\nimport { Divider, PhoneLink, EmailLink } from \"components/Basics\";\nimport { Button } from \"components/Buttons\";\nimport { fullDateTimeFormatter, timeFormatter } from \"utils/datetime\";\nimport { GlubHubContext, useGlubRoute } from \"utils/context\";\nimport ErrorBox from \"components/ErrorBox\";\nimport { RequiresPermission } from \"components/Complex\";\n\ninterface DetailsProps {\n  event: GlubEvent;\n  deletedEvent: () => void;\n  updateEvent: (event: GlubEvent) => void;\n}\n\nexport const Details: React.FC<DetailsProps> = ({\n  event,\n  updateEvent,\n  deletedEvent\n}) => {\n  const { replaceRoute } = useGlubRoute();\n  const { info } = useContext(GlubHubContext);\n\n  const [rsvpState, setRsvpState] = useState<SubmissionState>(notSentYet);\n\n  const updateAttending = useCallback(\n    async (url: string, attending: boolean) => {\n      if (!event.attendance) return;\n\n      setRsvpState(sending);\n      const result = await post(url, {});\n\n      if (result.successful) {\n        setRsvpState(notSentYet);\n        updateEvent({\n          ...event,\n          attendance: {\n            ...event.attendance,\n            confirmed: true,\n            shouldAttend: attending\n          }\n        });\n      } else {\n        setRsvpState(errorSending(result.error));\n      }\n    },\n    [event, setRsvpState, updateEvent]\n  );\n\n  const rsvp = useCallback(\n    (attending: boolean) =>\n      updateAttending(`events/${event.id}/rsvp/${attending}`, attending),\n    [event, updateAttending]\n  );\n\n  const confirm = useCallback(\n    () => updateAttending(`events/${event.id}/confirm`, true),\n    [event, updateAttending]\n  );\n\n  const uniform =\n    (event.gig?.uniform &&\n      info?.uniforms.find(u => u.id === event.gig?.uniform)) ||\n    null;\n\n  return (\n    <div>\n      <SubtitleAndLocation event={event} />\n      {event.comments && (\n        <>\n          <p>{event.comments}</p>\n          <br />\n          <br />\n        </>\n      )}\n      <span>\n        <AttendanceBlock\n          event={event}\n          rsvpState={rsvpState}\n          rsvp={rsvp}\n          confirm={confirm}\n        />\n      </span>\n      {event.gig?.performanceTime && (\n        <p>Perform at: {timeFormatter(event.gig.performanceTime)}</p>\n      )}\n      <p>\n        This event is worth <b>{event.points}</b> points\n      </p>\n      {event.section && <p>This event is for the {event.section} section</p>}\n      {uniform && <UniformSection uniform={uniform} />}\n      <AbsenceRequestButton\n        event={event}\n        requestAbsence={() =>\n          replaceRoute(routeEvents(event.id, eventRequestAbsence))\n        }\n      />\n      <OfficerInfoSection event={event} deletedEvent={deletedEvent} />\n      {failedToSend(rsvpState) && <ErrorBox error={rsvpState.error} />}\n    </div>\n  );\n};\n\nconst SubtitleAndLocation: React.FC<{ event: GlubEvent }> = ({ event }) => (\n  <p className=\"subtitle is-5\">\n    {fullDateTimeFormatter(event.callTime)}\n    <br />\n    {event.location && (\n      <a\n        href={`https://www.google.com/maps/search/${event.location}`}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        {event.location}\n      </a>\n    )}\n  </p>\n);\n\ninterface AttendanceBlockProps {\n  event: GlubEvent;\n  rsvpState: SubmissionState;\n  confirm: () => void;\n  rsvp: (attending: boolean) => void;\n}\n\nconst AttendanceBlock: React.FC<AttendanceBlockProps> = ({\n  event,\n  rsvpState,\n  confirm,\n  rsvp\n}) => {\n  const { attendance, rsvpIssue } = event;\n\n  if (!attendance) {\n    // No attendance for inactive members\n    return <></>;\n  } else if (eventIsOver(event)) {\n    // Show whether the member attended the event\n    return <AttendanceSummary points={event.points} attendance={attendance} />;\n  } else if (!rsvpIssue) {\n    // If the event isn't over but they can still RSVP\n    return (\n      <RsvpActions rsvp={rsvp} rsvpState={rsvpState} attendance={attendance} />\n    );\n  } else if (attendance.confirmed) {\n    // If they can't RSVP but are already confirmed\n    return <>We know you're coming</>;\n  } else if ([\"Sectional\", \"Tutti Gig\", \"Rehearsal\"].includes(event.type)) {\n    // If they can't RSVP but are still allowed to confirm\n    return (\n      <>\n        <p>You're coming, right?</p>\n        <Button\n          color=\"is-primary\"\n          loading={isSending(rsvpState)}\n          onClick={confirm}\n        >\n          yep, I'll be there\n        </Button>\n      </>\n    );\n  } else {\n    // Can't confirm or RSVP, so show the error\n    return <p className=\"has-text-grey-light is-italic\">{rsvpIssue}</p>;\n  }\n};\n\ninterface RsvpActionsProps {\n  attendance: SimpleAttendance;\n  rsvpState: SubmissionState;\n  rsvp: (attending: boolean) => void;\n}\n\nconst RsvpActions: React.FC<RsvpActionsProps> = ({\n  attendance,\n  rsvpState,\n  rsvp\n}) => {\n  const rsvpButton = (attending: boolean, content: string) => (\n    <Button\n      color=\"is-primary\"\n      loading={isSending(rsvpState)}\n      outlined={!attending}\n      onClick={() => rsvp(attending)}\n    >\n      {content}\n    </Button>\n  );\n\n  if (attendance.confirmed) {\n    if (attendance.shouldAttend) {\n      return (\n        <>\n          <p>\n            You're <b>confirmed</b> to be <b>attending</b>\n          </p>\n          {rsvpButton(false, \"oops jk, gotta dip\")}\n        </>\n      );\n    } else {\n      return (\n        <>\n          <p>The officers know you won't be there</p>\n          {rsvpButton(true, \"sike I can come. put me in coach!\")}\n        </>\n      );\n    }\n  } else {\n    if (attendance.shouldAttend) {\n      return (\n        <>\n          <p>You're coming, right?</p>\n          {rsvpButton(false, \"sorry fam, not this time\")}\n          <span> </span>\n          {rsvpButton(true, \"yep, I'll be there\")}\n        </>\n      );\n    } else {\n      return (\n        <>\n          <p>You're not coming, right?</p>\n          {rsvpButton(true, \"akshually I can come. you're welcome\")}\n        </>\n      );\n    }\n  }\n};\n\ninterface AttendanceSummaryProps {\n  points: number;\n  attendance: SimpleAttendance;\n}\n\nconst AttendanceSummary: React.FC<AttendanceSummaryProps> = ({\n  points,\n  attendance\n}) => {\n  if (attendance.didAttend) {\n    if (attendance.shouldAttend) {\n      return <>You were there! What a great time. Real #tbt material.</>;\n    } else {\n      return <>Wow, thanks for coming. What a guy!</>;\n    }\n  } else {\n    if (attendance.shouldAttend) {\n      return (\n        <>\n          You <b>weren't there</b>, and that's <b>not ok</b>. You lost{\" \"}\n          {`${points}`} points.{\" \"}\n          <a href=\"mailto:gleeclub_officers@lists.gatech.edu?subject=Attendance Issue\">\n            Email the officers\n          </a>{\" \"}\n          if you think that's not right.\n        </>\n      );\n    } else {\n      return (\n        <>\n          You <b>weren't there</b>, but that's <b>ok</b>.\n        </>\n      );\n    }\n  }\n};\n\nconst UniformSection: React.FC<{ uniform: Uniform }> = ({ uniform }) => (\n  <p>\n    <span>{uniform.name} </span>\n    <span\n      style={{ cursor: \"pointer\" }}\n      className=\"icon tooltip has-tooltip-bottom is-tooltip-multiline has-text-grey-light is-small\"\n      data-tooltip={uniform.description || \"\"}\n    >\n      <i className=\"far fa-question-circle\" />\n    </span>\n    <br />\n  </p>\n);\n\ninterface AbsenceRequestButtonProps {\n  event: GlubEvent;\n  requestAbsence: () => void;\n}\n\nconst AbsenceRequestButton: React.FC<AbsenceRequestButtonProps> = ({\n  event,\n  requestAbsence\n}) => {\n  if (eventIsOver(event) && !event.rsvpIssue) {\n    return <></>;\n  } else if (event.absenceRequest) {\n    return (\n      <Button color=\"is-primary\" outlined>\n        {`Request ${event.absenceRequest.state}`}\n      </Button>\n    );\n  } else {\n    return (\n      <Button color=\"is-primary\" outlined onClick={requestAbsence}>\n        Request Absence\n      </Button>\n    );\n  }\n};\n\ninterface OfficerInfoSectionProps {\n  event: GlubEvent;\n  deletedEvent: () => void;\n}\n\nconst OfficerInfoSection: React.FC<OfficerInfoSectionProps> = ({\n  event,\n  deletedEvent\n}) => {\n  const { replaceRoute } = useGlubRoute();\n\n  const [deleteState, setDeleteState] = useState<SubmissionState | null>(null);\n\n  const deleteEvent = useCallback(async () => {\n    setDeleteState(sending);\n    const result = await deleteRequest(`events/${event.id}`);\n\n    if (result.successful) {\n      deletedEvent();\n    } else {\n      setDeleteState(errorSending(result.error));\n    }\n  }, [event, deletedEvent, setDeleteState]);\n\n  return (\n    <RequiresPermission permission={viewEventPrivateDetails}>\n      <Divider />\n      {event.gig && (\n        <>\n          <ContactInfo gig={event.gig} />\n          {event.gig.price !== null ? `${event.gig.price}` : \"\"}\n        </>\n      )}\n      <br />\n      <Button\n        onClick={() => replaceRoute(routeEvents(event.id, eventEdit))}\n        style={{ marginBottom: \"5px\" }}\n      >\n        Edit this bitch\n      </Button>\n      <br />\n      <Button\n        color=\"is-danger\"\n        outlined\n        onClick={() => setDeleteState(notSentYet)}\n        style={{ marginBottom: \"5px\" }}\n      >\n        Yeet this bitch into the void\n      </Button>\n\n      {deleteState && (\n        <DeleteModal\n          title={`Delete ${event.name}?`}\n          cancel={() => setDeleteState(null)}\n          confirm={deleteEvent}\n          state={deleteState}\n        >\n          <p>\n            Are you sure you want to delete this event? Once you delete it, it's\n            gone like Donkey Kong.\n          </p>\n        </DeleteModal>\n      )}\n    </RequiresPermission>\n  );\n};\n\nconst ContactInfo: React.FC<{ gig: Gig }> = ({ gig }) => {\n  if (!gig.contactName && !gig.contactEmail && !gig.contactPhone) {\n    return (\n      <p>\n        <i>No contact info</i>\n      </p>\n    );\n  }\n\n  return (\n    <p>\n      <u>Contact</u>\n      <br />\n      {gig.contactName || <i>idk who</i>}\n      <br />\n      {gig.contactPhone ? (\n        <PhoneLink phone={gig.contactPhone} />\n      ) : (\n        <i>no number, bro</i>\n      )}\n      <br />\n      {gig.contactEmail ? (\n        <EmailLink email={gig.contactEmail} />\n      ) : (\n        <i>no email, dude</i>\n      )}\n    </p>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { Song } from \"state/models\";\nimport { get } from \"utils/request\";\nimport { pitchToUnicode } from \"utils/helpers\";\nimport { RemoteContent } from \"components/Complex\";\nimport { renderRoute, routeRepertoire } from \"state/route\";\nimport { RemoteData, loading, resultToRemote } from \"state/types\";\nimport { Table } from \"components/Table\";\n\nexport const Setlist: React.FC<{ eventId: number }> = ({ eventId }) => {\n  const [songs, setSongs] = useState<RemoteData<Song[]>>(loading);\n\n  useEffect(() => {\n    const loadSongs = async () => {\n      const result = await get(`events/${eventId}/setlist`);\n      setSongs(resultToRemote(result));\n    };\n\n    loadSongs();\n  }, [setSongs, eventId]);\n\n  return (\n    <RemoteContent\n      data={songs}\n      render={songs =>\n        songs.length === 0 ? (\n          <div>No set list for this event.</div>\n        ) : (\n          <Table striped>\n            <tbody>\n              {songs.map((song, index) => (\n                <SongRow song={song} index={index + 1} />\n              ))}\n            </tbody>\n          </Table>\n        )\n      }\n    />\n  );\n};\n\ninterface SongRowProps {\n  song: Song;\n  index: number;\n}\n\nconst SongRow: React.FC<SongRowProps> = ({ song, index }) => (\n  <tr key={index}>\n    <td>{index}</td>\n    <td>\n      <a href={renderRoute(routeRepertoire(song.id, null))}>{song.title}</a>\n    </td>\n    <td>{song.key ? pitchToUnicode(song.key) : \"No key\"}</td>\n    <td>\n      {song.startingPitch\n        ? pitchToUnicode(song.startingPitch)\n        : \"No starting pitch\"}\n    </td>\n  </tr>\n);\n","import { Uniform, GlubEvent } from \"state/models\";\nimport {\n  twentyFourHourTimeFormatter,\n  hyphenDateFormatter,\n  parseFormDateAndTimeString\n} from \"utils/datetime\";\n\nexport interface EventForm {\n  name: string;\n  semester: string;\n  type: string;\n  callTime: string;\n  callDate: string;\n  releaseTime: string;\n  releaseDate: string;\n  points: number | null;\n  comments: string;\n  location: string;\n  gigCount: boolean;\n  defaultAttend: boolean;\n}\n\nexport interface GigForm {\n  performanceTime: string;\n  uniform: Uniform | null;\n  contactName: string;\n  contactEmail: string;\n  contactPhone: string;\n  price: number | null;\n  public: boolean;\n  summary: string;\n  description: string;\n}\n\nexport const eventFormFromEvent = (event: GlubEvent): EventForm => ({\n  name: event.name,\n  semester: event.semester,\n  type: event.type,\n  callTime: twentyFourHourTimeFormatter(event.callTime),\n  callDate: hyphenDateFormatter(event.callTime),\n  releaseTime: event.releaseTime\n    ? twentyFourHourTimeFormatter(event.releaseTime)\n    : \"\",\n  releaseDate: event.releaseTime ? hyphenDateFormatter(event.releaseTime) : \"\",\n  points: event.points,\n  comments: event.comments || \"\",\n  location: event.location || \"\",\n  gigCount: event.gigCount,\n  defaultAttend: event.defaultAttend\n});\n\nexport const emptyGigForm: GigForm = {\n  performanceTime: \"\",\n  uniform: null,\n  contactName: \"\",\n  contactEmail: \"\",\n  contactPhone: \"\",\n  price: null,\n  public: false,\n  summary: \"\",\n  description: \"\"\n};\n\nexport const gigFormFromEvent = (\n  event: GlubEvent,\n  allUniforms: Uniform[]\n): GigForm => {\n  if (!event.gig) {\n    return emptyGigForm;\n  }\n\n  return {\n    performanceTime: twentyFourHourTimeFormatter(event.gig.performanceTime),\n    uniform: allUniforms.find(u => u.id === event.gig?.uniform) || null,\n    contactName: event.gig.contactName || \"\",\n    contactEmail: event.gig.contactEmail || \"\",\n    contactPhone: event.gig.contactPhone || \"\",\n    price: event.gig.price,\n    public: event.gig.public,\n    summary: event.gig.summary || \"\",\n    description: event.gig.description || \"\"\n  };\n};\n\nexport const buildUpdateBody = (event: EventForm, gig: GigForm) => {\n  const includeGig = !!(\n    gig.performanceTime ||\n    gig.uniform ||\n    gig.contactName ||\n    gig.contactEmail ||\n    gig.contactPhone ||\n    gig.price ||\n    gig.summary ||\n    gig.description\n  );\n\n  return {\n    name: event.name,\n    semester: event.semester,\n    type: event.type,\n    callTime: parseFormDateAndTimeString(event.callDate, event.callTime),\n    releaseTime: parseFormDateAndTimeString(\n      event.releaseDate,\n      event.releaseTime\n    ),\n    points: event.points || 5,\n    comments: event.comments,\n    location: event.location,\n    gigCount: event.gigCount,\n    defaultAttend: event.defaultAttend,\n    gig: includeGig\n      ? {\n          performanceTime: parseFormDateAndTimeString(\n            event.callDate,\n            gig.performanceTime\n          ),\n          uniform: gig.uniform?.id || null,\n          contactName: gig.contactName,\n          contactEmail: gig.contactEmail,\n          contactPhone: gig.contactPhone,\n          price: gig.price,\n          public: gig.public,\n          summary: gig.summary,\n          description: gig.description\n        }\n      : null\n  };\n};\n","import React, { useState, useEffect, useContext, useCallback, FormEvent } from \"react\";\nimport { GlubEvent, Semester, Info } from \"state/models\";\nimport {\n  RemoteData,\n  loading,\n  notSentYet,\n  resultToRemote,\n  sending,\n  errorSending,\n  SubmissionState,\n  isLoaded,\n  isLoading,\n  isSending,\n  failedToSend\n} from \"state/types\";\nimport { get, post } from \"utils/request\";\nimport { GlubHubContext, useGlubRoute } from \"utils/context\";\nimport { Title, Column } from \"components/Basics\";\nimport {\n  TextInput,\n  stringType,\n  dateType,\n  timeType,\n  numberType,\n  RadioInput,\n  SelectInput,\n  uniformType,\n  TextareaInput,\n  CheckboxInput\n} from \"components/Forms\";\nimport ErrorBox from \"components/ErrorBox\";\nimport {\n  gigFormFromEvent,\n  eventFormFromEvent,\n  buildUpdateBody,\n  GigForm,\n  EventForm\n} from \"./state\";\nimport { SubmitButton } from \"components/Buttons\";\nimport { eventDetails, routeEvents } from \"state/route\";\n\ninterface EditEventProps {\n  event: GlubEvent;\n  updateEvent: (updated: GlubEvent) => void;\n}\n\nexport const EditEvent: React.FC<EditEventProps> = ({ event, updateEvent }) => {\n  const { info, currentSemester } = useContext(GlubHubContext);\n  const { replaceRoute } = useGlubRoute();\n\n  const [eventForm, updateEventForm] = useState(eventFormFromEvent(event));\n  const [gigForm, updateGigForm] = useState(\n    gigFormFromEvent(event, info?.uniforms || [])\n  );\n  const [semesters, setSemesters] = useState<RemoteData<Semester[]>>(loading);\n  const [state, setState] = useState(notSentYet);\n\n  const submit = useCallback(async (e: FormEvent) => {\n    e.preventDefault();\n    setState(sending);\n\n    const body = buildUpdateBody(eventForm, gigForm);\n    const url = `events/${event.id}`;\n    const update = await post(url, body);\n\n    if (update.successful) {\n      const updatedEvent = await get<GlubEvent>(url);\n      if (updatedEvent.successful) {\n        updateEvent(updatedEvent.data);\n        replaceRoute(routeEvents(event.id, eventDetails));\n      } else {\n        setState(errorSending(updatedEvent.error));\n      }\n    } else {\n      setState(errorSending(update.error));\n    }\n  }, [setState, eventForm, gigForm, event, updateEvent, replaceRoute]);\n\n  useEffect(() => {\n    const loadSemesters = async () => {\n      const result = await get<Semester[]>(\"semesters\");\n      setSemesters(resultToRemote(result));\n    };\n\n    loadSemesters();\n  }, [setSemesters]);\n\n  const formData: FormData = {\n    info,\n    state,\n    semesters,\n    currentSemester,\n    gig: gigForm,\n    event: eventForm,\n    updateGig: updateGigForm,\n    updateEvent: updateEventForm\n  };\n\n  return (\n    <div>\n      <Title centered>Edit Event</Title>\n      <form onSubmit={submit}>\n        <LeftColumn {...formData} />\n        <MiddleColumn {...formData} />\n        <RightColumn {...formData} />\n      </form>\n    </div>\n  );\n};\n\ninterface FormData {\n  gig: GigForm;\n  event: EventForm;\n  info: Info | null;\n  state: SubmissionState;\n  currentSemester: Semester | null;\n  semesters: RemoteData<Semester[]>;\n  updateGig: (gig: GigForm) => void;\n  updateEvent: (event: EventForm) => void;\n}\n\nconst LeftColumn: React.FC<FormData> = ({\n  event,\n  gig,\n  updateEvent,\n  updateGig\n}) => (\n    <Column>\n      <TextInput\n        type={stringType}\n        value={event.name}\n        onInput={name => updateEvent({ ...event, name })}\n        title=\"Event Name\"\n        placeholder=\"Flashmobbing the HOMO SEX IS SIN people\"\n        helpText=\"Make it descriptive, make it short.\"\n        required\n      />\n      <TextInput\n        type={stringType}\n        value={event.location}\n        onInput={location => updateEvent({ ...event, location })}\n        title=\"Event Location\"\n        placeholder=\"Your mom's house 😂\"\n        helpText=\"ha gottem\"\n      />\n      <TextInput\n        type={dateType}\n        value={event.callDate}\n        onInput={callDate => updateEvent({ ...event, callDate })}\n        title=\"Date of Event\"\n        required\n      />\n      <TextInput\n        type={timeType}\n        value={event.callTime}\n        onInput={callTime => updateEvent({ ...event, callTime })}\n        title=\"Call Time\"\n        helpText=\"4:20 lamo\"\n        required\n      />\n      <TextInput\n        type={timeType}\n        value={gig.performanceTime}\n        onInput={performanceTime => updateGig({ ...gig, performanceTime })}\n        title=\"Event Time\"\n        helpText=\"4:21 lamo\"\n      />\n      <TextInput\n        type={timeType}\n        value={event.releaseTime}\n        onInput={releaseTime => updateEvent({ ...event, releaseTime })}\n        title=\"Release Time\"\n        helpText=\"4:22 lamo\"\n      />\n      <TextInput\n        type={dateType}\n        value={event.releaseDate}\n        onInput={releaseDate => updateEvent({ ...event, releaseDate })}\n        title=\"Release Date\"\n      />\n      <TextInput\n        type={numberType}\n        value={event.points}\n        onInput={points => updateEvent({ ...event, points })}\n        title=\"How many points is this worth?\"\n        placeholder=\"69\"\n      />\n    </Column>\n  );\n\nconst allSemesters = (data: FormData): string[] =>\n  isLoaded(data.semesters)\n    ? data.semesters.data.map(s => s.name)\n    : [data.currentSemester?.name || \"\"];\n\nconst MiddleColumn: React.FC<FormData> = props => (\n  <Column>\n    <RadioInput\n      render={x => x}\n      values={props.info?.eventTypes.map(t => t.name) || []}\n      selected={props.event.type}\n      onInput={type => props.updateEvent({ ...props.event, type })}\n      title=\"Event Type\"\n    />\n    <SelectInput\n      values={allSemesters(props)}\n      selected={props.event.semester}\n      type={stringType}\n      onInput={semester => props.updateEvent({ ...props.event, semester })}\n      title=\"Semester\"\n      loading={isLoading(props.semesters)}\n    />\n    <SelectInput\n      values={[null, ...(props.info?.uniforms || [])]}\n      selected={props.gig.uniform}\n      type={uniformType(props.info)}\n      onInput={uniform => props.updateGig({ ...props.gig, uniform })}\n    />\n    <TextareaInput\n      value={props.event.comments}\n      onInput={comments => props.updateEvent({ ...props.event, comments })}\n      title=\"Event Summary\"\n      placeholder=\"We're gonna get in there, we're gonna use our mouths, and we're gonna get out.\"\n    />\n  </Column>\n);\n\nconst RightColumn: React.FC<FormData> = ({\n  event,\n  updateEvent,\n  gig,\n  updateGig,\n  state\n}) => (\n    <Column>\n      <CheckboxInput\n        checked={gig.public}\n        content=\"This event is public, so I want it to show up on the external site\"\n        onChange={pub => updateGig({ ...gig, public: pub })}\n      />\n      {gig.public && (\n        <>\n          <TextInput\n            type={stringType}\n            value={gig.summary}\n            onInput={summary => updateGig({ ...gig, summary })}\n            title=\"Public Summary\"\n            placeholder=\"Friends? Countrymen? Bueller?\"\n            helpText=\"Careful, real people will see this\"\n          />\n          <TextareaInput\n            value={gig.description}\n            onInput={description => updateGig({ ...gig, description })}\n            title=\"Public Description\"\n            helpText=\"Careful, real people will see this\"\n            placeholder=\"We the people, in order to kick a more perfect ass, I don't know where this is going\"\n          />\n        </>\n      )}\n      <CheckboxInput\n        checked={!event.defaultAttend}\n        content=\"No one has to come to this event (forum, fundatory, etc)\"\n        onChange={defaultNotAttend =>\n          updateEvent({ ...event, defaultAttend: !defaultNotAttend })\n        }\n      />\n      <CheckboxInput\n        checked={event.gigCount}\n        content=\"This event counts as a volunteer gig\"\n        onChange={gigCount => updateEvent({ ...event, gigCount })}\n      />\n      <br />\n      <br />\n      <SubmitButton color=\"is-primary\" loading={isSending(state)}>\n        Update\n    </SubmitButton>\n      {failedToSend(state) && <ErrorBox error={state.error} />}\n    </Column>\n  );\n","import React, { useState, useEffect } from \"react\";\nimport { get } from \"utils/request\";\nimport { fullName } from \"utils/helpers\";\nimport { EventAttendee } from \"state/models\";\nimport { Column, Title } from \"components/Basics\";\nimport { RemoteData, loading, resultToRemote } from \"state/types\";\nimport { SECTION_ORDER } from \"state/constants\";\nimport { RemoteContent } from \"components/Complex\";\nimport { Table } from \"components/Table\";\n\nexport const Attendees: React.FC<{ eventId: number }> = ({ eventId }) => {\n  const [attendees, setAttendees] = useState<RemoteData<EventAttendee[]>>(\n    loading\n  );\n\n  useEffect(() => {\n    const loadAttendees = async () => {\n      const url = `events/${eventId}/see_whos_attending`;\n      const resp = await get<EventAttendee[]>(url);\n      setAttendees(resultToRemote(resp));\n    };\n\n    loadAttendees();\n  }, [eventId, setAttendees]);\n\n  return (\n    <RemoteContent\n      data={attendees}\n      render={attendees => <AttendeeTables attendees={attendees} />}\n    />\n  );\n};\n\nconst AttendeeTables: React.FC<{ attendees: EventAttendee[] }> = ({\n  attendees\n}) => {\n  const { attending, notAttending } = separateAttendees(attendees);\n\n  return (\n    <Column>\n      <Title centered>Attending</Title>\n      {SECTION_ORDER.map(\n        section =>\n          attending.get(section) && (\n            <AttendeeTable section={section} {...attending.get(section)!} />\n          )\n      )}\n      <Title centered>Not Attending</Title>\n      {SECTION_ORDER.map(\n        section =>\n          notAttending.get(section) && (\n            <AttendeeTable section={section} {...notAttending.get(section)!} />\n          )\n      )}\n    </Column>\n  );\n};\n\ninterface AttendeeTableProps extends SeparateByConfirmed {\n  section: string | null;\n}\n\nconst AttendeeTable: React.FC<AttendeeTableProps> = ({\n  section,\n  confirmed,\n  notConfirmed\n}) => (\n  <Table fullwidth scrollable>\n    <thead>\n      <tr>\n        <th>{section}</th>\n        <th>Confirmed</th>\n        <th>Not Confirmed</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td style={{ width: \"20%\" }}></td>\n        <AttendeeNameList attendees={confirmed} />\n        <AttendeeNameList attendees={notConfirmed} />\n      </tr>\n    </tbody>\n  </Table>\n);\n\nconst AttendeeNameList: React.FC<{ attendees: EventAttendee[] }> = ({\n  attendees\n}) => (\n  <td style={{ width: \"40%\" }}>\n    {attendees.map((attendee, index) => (\n      <>\n        {fullName(attendee.member)}\n        {index !== attendees.length - 1 && <br />}\n      </>\n    ))}\n  </td>\n);\n\ninterface SeparateByAttending {\n  attending: Map<string | null, SeparateByConfirmed | null>;\n  notAttending: Map<string | null, SeparateByConfirmed | null>;\n}\n\ninterface SeparateByConfirmed {\n  confirmed: EventAttendee[];\n  notConfirmed: EventAttendee[];\n}\n\nconst separateAttendees = (attendees: EventAttendee[]): SeparateByAttending => {\n  const attending = attendees.filter(a => a.attendance.shouldAttend);\n  const notAttending = attendees.filter(a => !a.attendance.shouldAttend);\n\n  const separateByConfirmed = (\n    givenAttendees: EventAttendee[]\n  ): Map<string | null, SeparateByConfirmed | null> =>\n    new Map(\n      SECTION_ORDER.map(section => {\n        const inSection = givenAttendees.filter(\n          a => a.member.section === section\n        );\n\n        return [\n          section,\n          inSection.length\n            ? {\n                confirmed: inSection.filter(a => a.attendance.confirmed),\n                notConfirmed: inSection.filter(a => !a.attendance.confirmed)\n              }\n            : null\n        ];\n      })\n    );\n\n  return {\n    attending: separateByConfirmed(attending),\n    notAttending: separateByConfirmed(notAttending)\n  };\n};\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport {\n  notSentYet,\n  loading,\n  RemoteData,\n  resultToRemote,\n  sending,\n  resultToSubmissionState,\n  mapLoaded\n} from \"state/types\";\nimport { fullName } from \"utils/helpers\";\nimport { get, post } from \"utils/request\";\nimport { EventAttendee } from \"state/models\";\nimport { RemoteContent, SubmissionStateBox } from \"components/Complex\";\nimport { CheckboxInput, TextInput, numberType } from \"components/Forms\";\nimport { NO_SECTION, SECTION_ORDER } from \"state/constants\";\nimport { Table } from \"components/Table\";\n\nexport const Attendance: React.FC<{ eventId: number }> = ({ eventId }) => {\n  const [state, setState] = useState(notSentYet);\n  const [attendees, setAttendees] = useState<RemoteData<EventAttendee[]>>(\n    loading\n  );\n\n  const updateAttendance = useCallback(\n    async (attendee: EventAttendee) => {\n      setState(sending);\n      setAttendees(\n        mapLoaded(attendees, x =>\n          x.map(a => (a.member.email === attendee.member.email ? attendee : a))\n        )\n      );\n\n      const url = `events/${eventId}/attendance/${attendee.member.email}`;\n      const resp = await post(url, attendee.attendance);\n\n      setState(resultToSubmissionState(resp));\n    },\n    [attendees, eventId, setState]\n  );\n\n  useEffect(() => {\n    const loadAttendees = async () => {\n      const url = `events/${eventId}/see_whos_attending`;\n      const resp = await get<EventAttendee[]>(url);\n      setAttendees(resultToRemote(resp));\n    };\n\n    loadAttendees();\n  }, [eventId]);\n\n  return (\n    <div>\n      <RemoteContent\n        data={attendees}\n        render={attendees => (\n          <Table fullwidth scrollable>\n            {groupAttendees(attendees).map(group => (\n              <>\n                <thead>\n                  <tr>\n                    <td>{group.section}</td>\n                    <td>Did Attend</td>\n                    <td>Should Attend</td>\n                    <td>Confirmed</td>\n                    <td>Minutes Late</td>\n                  </tr>\n                </thead>\n                <tbody>\n                  {group.attendees.map(attendee => (\n                    <AttendeeRow\n                      attendee={attendee}\n                      updateAttendee={updateAttendance}\n                    />\n                  ))}\n                </tbody>\n              </>\n            ))}\n          </Table>\n        )}\n      />\n      <SubmissionStateBox state={state} />\n    </div>\n  );\n};\n\ninterface AttendeeRowProps {\n  attendee: EventAttendee;\n  updateAttendee: (a: EventAttendee) => void;\n}\n\nconst AttendeeRow: React.FC<AttendeeRowProps> = ({\n  attendee,\n  updateAttendee\n}) => (\n  <tr className=\"no-bottom-border\">\n    <td>{fullName(attendee.member)}</td>\n    <td>\n      <CheckboxInput\n        content=\"\"\n        checked={attendee.attendance.didAttend}\n        onChange={didAttend =>\n          updateAttendee({\n            ...attendee,\n            attendance: { ...attendee.attendance, didAttend }\n          })\n        }\n      />\n    </td>\n    <td>\n      <CheckboxInput\n        content=\"\"\n        checked={attendee.attendance.shouldAttend}\n        onChange={shouldAttend =>\n          updateAttendee({\n            ...attendee,\n            attendance: { ...attendee.attendance, shouldAttend }\n          })\n        }\n      />\n    </td>\n    <td>\n      <CheckboxInput\n        content=\"\"\n        checked={attendee.attendance.confirmed}\n        onChange={confirmed =>\n          updateAttendee({\n            ...attendee,\n            attendance: { ...attendee.attendance, confirmed }\n          })\n        }\n      />\n    </td>\n    <td>\n      <TextInput\n        type={numberType}\n        value={attendee.attendance.minutesLate}\n        onInput={minutesLate =>\n          updateAttendee({\n            ...attendee,\n            attendance: {\n              ...attendee.attendance,\n              minutesLate: minutesLate || 0\n            }\n          })\n        }\n      />\n    </td>\n  </tr>\n);\n\ninterface AttendeeGroup {\n  section: string;\n  attendees: EventAttendee[];\n}\n\nconst groupAttendees = (attendees: EventAttendee[]): AttendeeGroup[] =>\n  SECTION_ORDER.map(section => ({\n    section: section || NO_SECTION,\n    attendees: attendees.filter(a => a.member.section === section)\n  })).filter(group => group.attendees.length);\n","import React, { useState, useCallback, useContext, FormEvent } from \"react\";\nimport ErrorBox from \"components/ErrorBox\";\nimport { post, success } from \"utils/request\";\nimport { GlubHubContext } from \"utils/context\";\nimport { TextareaInput } from \"components/Forms\";\nimport { Subtitle, Title } from \"components/Basics\";\nimport { GlubEvent, AbsenceRequest } from \"state/models\";\nimport { BackButton, ButtonGroup, SubmitButton } from \"components/Buttons\";\nimport {\n  notSentYet,\n  errorSending,\n  sending,\n  isSending,\n  failedToSend\n} from \"state/types\";\n\ninterface RequestAbsenceProps {\n  event: GlubEvent;\n  cancel: () => void;\n  success: (request: AbsenceRequest) => void;\n}\n\nexport const RequestAbsence: React.FC<RequestAbsenceProps> = props => {\n  const { user } = useContext(GlubHubContext);\n\n  const [reason, setReason] = useState(\"\");\n  const [state, setState] = useState(notSentYet);\n\n  const submit = useCallback(async (event: FormEvent) => {\n    event.preventDefault();\n    setState(sending);\n\n    const body = { reason };\n    const url = `absence_requests/${props.event.id}`;\n    const resp = await post(url, body);\n\n    if (resp.successful) {\n      const newRequest = {\n        member: user?.email || \"\",\n        event: props.event.id,\n        time: new Date().getTime(),\n        reason,\n        state: \"Pending\"\n      };\n      success(newRequest);\n    } else {\n      setState(errorSending(resp.error));\n    }\n  }, [setState, reason, props, user]);\n\n  return (\n    <div>\n      <BackButton content=\"back to event\" click={props.cancel} />\n      <Title centered>Absence Request</Title>\n      <Subtitle centered>for {props.event.name}</Subtitle>\n      <br />\n      <form onSubmit={submit}>\n        <TextareaInput\n          value={reason}\n          onInput={setReason}\n          title=\"But y tho\"\n          placeholder=\"Excuses, excuses\"\n          required\n        />\n        <ButtonGroup alignment=\"is-right\">\n          <SubmitButton color=\"is-primary\" loading={isSending(state)}>\n            Beg for Mercy\n          </SubmitButton>\n        </ButtonGroup>\n      </form>\n      {failedToSend(state) && <ErrorBox error={state.error} />}\n    </div>\n  );\n};\n","import React, { useState, useCallback, useEffect } from \"react\";\nimport {\n  routeEvents,\n  EventTab,\n  eventDetails,\n  eventSetlist,\n  eventCarpools,\n  eventAttendees,\n  eventAttendance,\n  renderRoute\n} from \"state/route\";\nimport {\n  RemoteData,\n  loading,\n  notAsked,\n  loaded,\n  resultToRemote,\n  mapLoaded,\n  isLoaded\n} from \"state/types\";\nimport { Section, Title, Columns, Divider } from \"components/Basics\";\nimport { get } from \"utils/request\";\nimport { eventIsOver } from \"utils/helpers\";\nimport { useGlubRoute } from \"utils/context\";\nimport { BackButton } from \"components/Buttons\";\nimport { SelectableList } from \"components/List\";\nimport { editAttendance } from \"state/permissions\";\nimport { GlubEvent, GlubEventType } from \"state/models\";\n\nimport { Details } from \"./Details\";\nimport { Setlist } from \"./Setlist\";\nimport { Carpools } from \"./Carpools\";\nimport { EditEvent } from \"./edit/Page\";\nimport { Attendees } from \"./Attendees\";\nimport { Attendance } from \"./Attendance\";\nimport { RequestAbsence } from \"./RequestAbsence\";\nimport { simpleDateFormatter } from \"utils/datetime\";\nimport {\n  Sidebar,\n  RequiresPermission,\n  AttendanceIcon\n} from \"components/Complex\";\n\ninterface EventsProps {\n  eventId: number | null;\n  tab: EventTab | null;\n}\n\nexport const Events: React.FC<EventsProps> = ({ eventId, tab }) => {\n  const { replaceRoute } = useGlubRoute();\n\n  const [events, setEvents] = useState<RemoteData<GlubEvent[]>>(loading);\n  const [selected, setSelected] = useState<RemoteData<GlubEvent>>(notAsked);\n\n  const loadEvent = useCallback(\n    async (eventId: number) => {\n      setSelected(loading);\n      const result = await get<GlubEvent>(`events/${eventId}`);\n      setSelected(resultToRemote(result));\n    },\n    [setSelected]\n  );\n\n  const selectEvent = useCallback(\n    (eventId: number) => {\n      if (isLoaded(events)) {\n        const event = events.data.find(e => e.id === eventId);\n        if (event) {\n          setSelected(loaded(event));\n          return;\n        }\n      }\n\n      loadEvent(eventId);\n    },\n    [setSelected, events, loadEvent]\n  );\n\n  const unselectEvent = useCallback(() => {\n    setSelected(notAsked);\n    replaceRoute(routeEvents(null, null));\n  }, [setSelected, replaceRoute]);\n\n  const changeTab = useCallback(\n    (tab: EventTab) => {\n      if (isLoaded(selected)) {\n        replaceRoute(routeEvents(selected.data.id, tab));\n      }\n    },\n    [selected, replaceRoute]\n  );\n\n  const propagateEventUpdate = useCallback(\n    (event: GlubEvent) => {\n      setSelected(loaded(event));\n      setEvents(\n        mapLoaded(events, x => x.map(e => (e.id === event.id ? event : e)))\n      );\n    },\n    [events, setEvents, setSelected]\n  );\n\n  const deletedEvent = useCallback(\n    (event: GlubEvent) => {\n      setSelected(notAsked);\n      setEvents(mapLoaded(events, x => x.filter(e => e.id !== event.id)));\n    },\n    [setSelected, setEvents, events]\n  );\n\n  useEffect(() => {\n    const loadEvents = async () => {\n      const result = await get<GlubEvent[]>(\"events?attendance=true\");\n      setEvents(resultToRemote(result));\n    };\n\n    loadEvents();\n  }, []);\n\n  useEffect(() => {\n    if (eventId !== null) {\n      selectEvent(eventId);\n    } else {\n      setSelected(notAsked);\n    }\n  }, [eventId, selectEvent, setSelected]);\n\n  const selectedId = isLoaded(selected) ? selected.data.id : null;\n  const upcomingEvents = mapLoaded(events, x =>\n    x.filter(event => !eventIsOver(event))\n  );\n  const pastEvents = mapLoaded(events, x => x.filter(eventIsOver));\n\n  return (\n    <>\n      <Section>\n        <EventColumns events={upcomingEvents} selectedId={selectedId} />\n        <Divider content=\"Past\" />\n        <EventColumns events={pastEvents} selectedId={selectedId} />\n      </Section>\n      <Sidebar\n        data={selected}\n        close={unselectEvent}\n        render={event => (\n          <TabContent\n            tab={tab}\n            event={event}\n            changeTab={changeTab}\n            unselectEvent={unselectEvent}\n            updateEvent={propagateEventUpdate}\n            deletedEvent={deletedEvent}\n          />\n        )}\n      />\n    </>\n  );\n};\n\ninterface EventColumnsProps {\n  events: RemoteData<GlubEvent[]>;\n  selectedId: number | null;\n}\n\nconst EventColumns: React.FC<EventColumnsProps> = ({ events, selectedId }) => {\n  const { replaceRoute } = useGlubRoute();\n\n  const column = (title: string, allowedEventTypes: GlubEventType[]) => (\n    <div className=\"column is-one-quarter is-centered\">\n      <SelectableList\n        title={title}\n        listItems={mapLoaded(events, all => [\n          all.filter(event => allowedEventTypes.includes(event.type))\n        ])}\n        isSelected={event => event.id === selectedId}\n        onSelect={event => replaceRoute(routeEvents(event.id, null))}\n        render={event => <EventRow event={event} />}\n        messageIfEmpty=\"No events here, misster.\"\n      />\n    </div>\n  );\n\n  return (\n    <Columns>\n      {column(\"Volunteer\", [\"Volunteer Gig\"])}\n      {column(\"Rehearsal\", [\"Rehearsal\", \"Sectional\"])}\n      {column(\"Tutti\", [\"Tutti Gig\"])}\n      {column(\"Ombuds\", [\"Ombuds\", \"Other\"])}\n    </Columns>\n  );\n};\n\nconst EventRow: React.FC<{ event: GlubEvent }> = ({ event }) => (\n  <>\n    <td style={{ textAlign: \"center\" }}>\n      <AttendanceIcon event={event} />\n    </td>\n    <td>{simpleDateFormatter(event.callTime)}</td>\n    <td>{event.name}</td>\n  </>\n);\n\ninterface EventTabsProps {\n  event: GlubEvent;\n  currentTab: EventTab | null;\n}\n\nconst EventTabs: React.FC<EventTabsProps> = props => (\n  <div className=\"tabs\">\n    <ul>\n      <TabLink tab={eventDetails} {...props} />\n      <TabLink tab={eventAttendees} {...props} />\n      <TabLink tab={eventSetlist} {...props} />\n      <TabLink tab={eventCarpools} {...props} />\n      <RequiresPermission permission={editAttendance}>\n        <TabLink tab={eventAttendance} {...props} />\n      </RequiresPermission>\n    </ul>\n  </div>\n);\n\ninterface TabLinkProps {\n  tab: EventTab;\n  currentTab: EventTab | null;\n  event: GlubEvent;\n}\n\nconst TabLink: React.FC<TabLinkProps> = ({ tab, currentTab, event }) => (\n  <li className={tab.route === currentTab?.route ? \"is-active\" : undefined}>\n    <a href={renderRoute(routeEvents(event.id, tab))}>{tab.name}</a>\n  </li>\n);\n\ninterface TabContentProps {\n  event: GlubEvent;\n  tab: EventTab | null;\n  unselectEvent: () => void;\n  changeTab: (tab: EventTab) => void;\n  updateEvent: (event: GlubEvent) => void;\n  deletedEvent: (event: GlubEvent) => void;\n}\n\nconst TabContent: React.FC<TabContentProps> = props => {\n  const header = (\n    <>\n      <BackButton content=\"all events\" click={props.unselectEvent} />\n      <Title centered>{props.event.name}</Title>\n      <EventTabs event={props.event} currentTab={props.tab} />\n    </>\n  );\n\n  switch (props.tab?.route) {\n    case \"attendance\":\n      return (\n        <>\n          {header}\n          <Attendance eventId={props.event.id} />\n        </>\n      );\n\n    case \"attendees\":\n      return (\n        <>\n          {header}\n          <Attendees eventId={props.event.id} />\n        </>\n      );\n\n    case \"setlist\":\n      return (\n        <>\n          {header}\n          <Setlist eventId={props.event.id} />\n        </>\n      );\n\n    case \"carpools\":\n      return (\n        <>\n          {header}\n          <Carpools event={props.event} />\n        </>\n      );\n\n    case \"request-absence\":\n      return (\n        <RequestAbsence\n          event={props.event}\n          cancel={() => props.changeTab(eventDetails)}\n          success={absenceRequest =>\n            props.updateEvent({ ...props.event, absenceRequest })\n          }\n        />\n      );\n\n    case \"edit\":\n      return (\n        <>\n          <BackButton\n            content=\"cancel editing\"\n            click={() => props.changeTab(eventDetails)}\n          />\n          <EditEvent event={props.event} updateEvent={props.updateEvent} />\n        </>\n      );\n\n    default:\n      return (\n        <>\n          {header}\n          <Details\n            event={props.event}\n            updateEvent={props.updateEvent}\n            deletedEvent={() => props.deletedEvent(props.event)}\n          />\n        </>\n      );\n  }\n};\n","import React, { useState, useCallback, FormEvent } from \"react\";\nimport {\n  notSentYet,\n  errorSending,\n  sending,\n  isSending,\n  failedToSend\n} from \"state/types\";\nimport { post } from \"utils/request\";\nimport { useGlubRoute } from \"utils/context\";\nimport { routeLogin } from \"state/route\";\nimport { Column, Title4, Box } from \"components/Basics\";\nimport { TextInput, emailType } from \"components/Forms\";\nimport { ButtonGroup, LinkButton, SubmitButton } from \"components/Buttons\";\nimport ErrorBox from \"components/ErrorBox\";\n\nexport const ForgotPassword: React.FC = () => {\n  const { goToRoute } = useGlubRoute();\n\n  const [email, setEmail] = useState(\"\");\n  const [confirmEmail, setConfirmEmail] = useState(\"\");\n  const [state, setState] = useState(notSentYet);\n\n  const submit = useCallback(async (event: FormEvent) => {\n    event.preventDefault();\n\n    if (email !== confirmEmail) {\n      alert(\"Your emails don't match.\");\n      return;\n    }\n\n    setState(sending);\n    const result = await post(`forgot_password/${email}`, {});\n\n    if (result.successful) {\n      alert(\n        \"Check your email for a password reset link, \" +\n        \"it should be there in a few minutes.\"\n      );\n      goToRoute(routeLogin);\n    } else {\n      setState(errorSending(result.error));\n    }\n  }, [goToRoute, email, confirmEmail, setState]);\n\n  return (\n    <div className=\"container fullheight\">\n      <div className=\"columns is-centered is-vcentered\">\n        <Column narrow>\n          <form onSubmit={submit} style={{ padding: \"10px\" }}>\n            <Box>\n              <Title4>Forgot your password?</Title4>\n              <p>\n                That sucks. But don't \"oh geez, oh frick\", just slap some emails\n                down and we will send you an email with a reset link.\n              </p>\n              <br />\n              <TextInput\n                type={emailType}\n                value={email}\n                onInput={setEmail}\n                title=\"E-mail\"\n                placeholder=\"gburdell3@gatech.edu\"\n                required\n              />\n              <TextInput\n                type={emailType}\n                value={confirmEmail}\n                onInput={setConfirmEmail}\n                title=\"Confirm E-mail\"\n                placeholder=\"bgurdell3@gatech.edu\"\n                required\n              />\n\n              <ButtonGroup alignment=\"is-right\">\n                <LinkButton route={routeLogin}>uh, nvm</LinkButton>\n                <SubmitButton color=\"is-primary\" loading={isSending(state)}>\n                  halp\n                </SubmitButton>\n              </ButtonGroup>\n              {failedToSend(state) && <ErrorBox error={state.error} />}\n            </Box>\n          </form>\n        </Column>\n      </div>\n    </div>\n  );\n};\n","import React, { useState, useCallback, useContext, FormEvent } from \"react\";\nimport { Md5 } from \"ts-md5\";\nimport { setToken } from \"utils/helpers\";\nimport { Column, Box } from \"components/Basics\";\nimport { postReturning, NewToken } from \"utils/request\";\nimport { GlubHubContext, useGlubRoute } from \"utils/context\";\nimport { SubmitButton, LinkButton } from \"components/Buttons\";\nimport { notSentYet, sending, errorSending, isSending } from \"state/types\";\nimport { TextInput, emailType, passwordType, Control } from \"components/Forms\";\nimport { routeHome, routeForgotPassword, routeEditProfile } from \"state/route\";\n\nexport const Login: React.FC = () => {\n  const { refreshAll } = useContext(GlubHubContext);\n  const { goToRoute } = useGlubRoute();\n\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [state, setState] = useState(notSentYet);\n\n  const onSuccessfulLogin = useCallback(\n    async (token: string) => {\n      setToken(token);\n      await refreshAll();\n      goToRoute(routeHome);\n    },\n    [refreshAll, goToRoute]\n  );\n\n  const submit = useCallback(async (event: FormEvent) => {\n    event.preventDefault();\n\n    setState(sending);\n    const body = { email, passHash: Md5.hashStr(password) };\n    const resp = await postReturning<typeof body, NewToken>(\"login\", body);\n\n    if (resp.successful) {\n      onSuccessfulLogin(resp.data.token);\n    } else if (resp.error.message === \"member already logged in\") {\n      onSuccessfulLogin(resp.error.token);\n    } else {\n      setState(errorSending(resp.error));\n      alert(\"Your username and/or password were incorrect.\");\n    }\n  }, [email, password, setState, onSuccessfulLogin]);\n\n  return (\n    <div className=\"container fullheight\">\n      <div\n        className=\"columns is-centered is-vcentered\"\n        style={{ display: \"flex\" }}\n      >\n        <Column narrow>\n          <Box>\n            <form onSubmit={submit}>\n              <img style={{ width: \"100%\" }} alt=\"\" src=\"./glubhub.svg\" />\n              <TextInput\n                type={emailType}\n                value={email}\n                onInput={setEmail}\n                title=\"Who are you?\"\n                placeholder=\"gburdell3@gatech.edu\"\n              />\n              <TextInput\n                type={passwordType}\n                value={password}\n                onInput={setPassword}\n                title=\"Oh yeah? Prove it.\"\n                placeholder=\"••••••••\"\n              />\n\n              <div>\n                <SubmitButton\n                  color=\"is-primary\"\n                  fullwidth\n                  loading={isSending(state)}\n                >\n                  I posit that I am worthy\n                </SubmitButton>\n                <br />\n                <div className=\"field is-grouped is-grouped-centered is-expanded\">\n                  <Control>\n                    <LinkButton route={routeForgotPassword}>\n                      I have forgotten who I am\n                    </LinkButton>\n                  </Control>\n                  <Control>\n                    <LinkButton\n                      route={routeEditProfile}\n                      color=\"is-primary\"\n                      outlined\n                    >\n                      I am not anyone yet\n                    </LinkButton>\n                  </Control>\n                </div>\n              </div>\n            </form>\n          </Box>\n        </Column>\n      </div>\n    </div>\n  );\n};\n","import React, { useState, useCallback, useRef } from \"react\";\nimport { MeetingMinutes } from \"state/models\";\nimport {\n  notSentYet,\n  SubmissionState,\n  sending,\n  resultToSubmissionState,\n  isSending,\n  failedToSend\n} from \"state/types\";\nimport { post, deleteRequest } from \"utils/request\";\nimport { RequiresPermission } from \"components/Complex\";\nimport { editMinutes } from \"state/permissions\";\nimport ErrorBox from \"components/ErrorBox\";\nimport DeleteModal from \"components/DeleteModal\";\nimport { Editor } from \"@tinymce/tinymce-react\";\nimport { ButtonGroup, Button } from \"components/Buttons\";\nimport { TextInput, stringType, Control } from \"components/Forms\";\n\ninterface EditMinutesProps {\n  minutes: MeetingMinutes;\n  update: (minutes: MeetingMinutes) => void;\n  saved: (minutes: MeetingMinutes) => void;\n  deleted: (minutes: MeetingMinutes) => void;\n}\n\nexport type Visibility = \"public\" | \"private\";\n\nexport const EditMinutes: React.FC<EditMinutesProps> = ({\n  minutes,\n  update,\n  saved,\n  deleted\n}) => {\n  const [saveState, setSaveState] = useState(notSentYet);\n  const [deleteState, setDeleteState] = useState<SubmissionState | null>(null);\n  const [visibility, setVisibility] = useState<Visibility>(\"private\");\n\n  const setContent = useRef((_content: string) => {});\n\n  const updateVisibility = useCallback(\n    (newVisibility: Visibility) => {\n      setVisibility(newVisibility);\n      setContent.current(\n        (newVisibility === \"public\" ? minutes.public : minutes.private) || \"\"\n      );\n    },\n    [setVisibility, setContent, minutes]\n  );\n\n  const updateMinutes = useCallback(async () => {\n    setSaveState(sending);\n    const result = await post(`meeting_minutes/${minutes.id}`, minutes);\n\n    setSaveState(resultToSubmissionState(result));\n    if (result.successful) {\n      saved(minutes);\n    }\n  }, [setSaveState, saved, minutes]);\n\n  const deleteMinutes = useCallback(async () => {\n    setDeleteState(sending);\n    const result = await deleteRequest(`meeting_minutes/${minutes.id}`);\n\n    setDeleteState(resultToSubmissionState(result));\n    if (result.successful) {\n      deleted(minutes);\n    }\n  }, [setDeleteState, minutes, deleted]);\n\n  return (\n    <RequiresPermission permission={editMinutes}>\n      <p>\n        <EditHeader\n          minutes={minutes}\n          visibility={visibility}\n          updateVisibility={updateVisibility}\n          saveState={saveState}\n          save={updateMinutes}\n          tryToDelete={() => setDeleteState(notSentYet)}\n          update={update}\n        />\n      </p>\n      <br />\n      <p>\n        <MinutesEditor\n          minutes={minutes}\n          visibility={visibility}\n          update={update}\n          setContent={setContent}\n        />\n      </p>\n      {deleteState && (\n        <DeleteMinutesModal\n          state={deleteState}\n          cancel={() => setDeleteState(null)}\n          confirm={deleteMinutes}\n        />\n      )}\n    </RequiresPermission>\n  );\n};\n\ninterface DeleteMinutesModalProps {\n  state: SubmissionState;\n  cancel: () => void;\n  confirm: () => void;\n}\n\nconst DeleteMinutesModal: React.FC<DeleteMinutesModalProps> = ({\n  state,\n  cancel,\n  confirm\n}) => (\n  <DeleteModal\n    title=\"Delete this meeting?\"\n    cancel={cancel}\n    confirm={confirm}\n    state={state}\n  >\n    Are you sure you want to delete these meeting minutes? You can't undo that.\n  </DeleteModal>\n);\n\ninterface MinutesEditorProps {\n  minutes: MeetingMinutes;\n  visibility: Visibility;\n  update: (minutes: MeetingMinutes) => void;\n  setContent: React.MutableRefObject<(content: string) => void>;\n}\n\nconst MinutesEditor: React.FC<MinutesEditorProps> = ({\n  minutes,\n  visibility,\n  update,\n  setContent\n}) => (\n  <Editor\n    apiKey=\"4tzzx51fsqy1vtwhpvkhb3t9t4jwyotr28qjbogls2yclw26\"\n    initialValue={\n      (visibility === \"private\" ? minutes.private : minutes.public) || \"\"\n    }\n    init={{\n      height: 500,\n      setupEditor: (editor: any) => {\n        setContent.current = (content: string) => {\n          editor.setContent(content);\n        };\n      }\n    }}\n    onEditorChange={content =>\n      update(\n        visibility === \"private\"\n          ? { ...minutes, private: content }\n          : { ...minutes, public: content }\n      )\n    }\n  />\n);\n\ninterface EditHeaderProps {\n  minutes: MeetingMinutes;\n  visibility: Visibility;\n  saveState: SubmissionState;\n  save: () => void;\n  tryToDelete: () => void;\n  update: (minutes: MeetingMinutes) => void;\n  updateVisibility: (visibility: Visibility) => void;\n}\n\nconst EditHeader: React.FC<EditHeaderProps> = ({\n  minutes,\n  visibility,\n  updateVisibility,\n  update,\n  save,\n  tryToDelete,\n  saveState\n}) => (\n  <div className=\"field is-grouped is-grouped-centered is-fullwidth\">\n    <Control>\n      <ButtonGroup connected>\n        <Button\n          onClick={() => updateVisibility(\"public\")}\n          color={visibility === \"public\" ? \"is-primary\" : undefined}\n        >\n          Public\n        </Button>\n        <Button\n          onClick={() => updateVisibility(\"private\")}\n          color={visibility === \"private\" ? \"is-primary\" : undefined}\n        >\n          Private\n        </Button>\n      </ButtonGroup>\n    </Control>\n\n    <Control>\n      <TextInput\n        type={stringType}\n        value={minutes.name}\n        onInput={name => update({ ...minutes, name })}\n        prefix=\"Title\"\n        placeholder=\"Secret Evil Meeting of Doom\"\n        required\n        expanded\n      />\n    </Control>\n\n    <Control>\n      <ButtonGroup alignment=\"is-right\">\n        <Button\n          onClick={save}\n          color=\"is-primary\"\n          loading={isSending(saveState)}\n        >\n          Save\n        </Button>\n        <Button onClick={tryToDelete} color=\"is-danger\">\n          Delete\n        </Button>\n      </ButtonGroup>\n    </Control>\n\n    {failedToSend(saveState) && <ErrorBox error={saveState.error} />}\n  </div>\n);\n","import React, { useState, useCallback, useEffect } from \"react\";\nimport {\n  MinutesTab,\n  renderRoute,\n  routeMinutes,\n  minutesPublic,\n  minutesEdit,\n  minutesPrivate\n} from \"state/route\";\nimport {\n  RemoteData,\n  loading,\n  notSentYet,\n  notAsked,\n  resultToRemote,\n  sending,\n  resultToSubmissionState,\n  isLoaded,\n  loaded,\n  mapLoaded,\n  SubmissionState,\n  isSending,\n  failedToSend\n} from \"state/types\";\nimport { MeetingMinutes } from \"state/models\";\nimport { useGlubRoute } from \"utils/context\";\nimport { get, postReturning, NewId } from \"utils/request\";\nimport { Section, Container, Columns, Column, Box } from \"components/Basics\";\nimport { SelectableList } from \"components/List\";\nimport { editMinutes, viewCompleteMinutes } from \"state/permissions\";\nimport { ButtonGroup, Button } from \"components/Buttons\";\nimport { EditMinutes } from \"./Edit\";\nimport ErrorBox from \"components/ErrorBox\";\nimport { RemoteContent, RequiresPermission } from \"components/Complex\";\n\ninterface MinutesProps {\n  minutesId: number | null;\n  tab: MinutesTab | null;\n}\n\nexport const Minutes: React.FC<MinutesProps> = ({ minutesId, tab }) => {\n  const { replaceRoute } = useGlubRoute();\n\n  const [minutes, updateMinutes] = useState<RemoteData<MeetingMinutes[]>>(\n    loading\n  );\n  const [selected, updateSelected] = useState<RemoteData<MeetingMinutes>>(\n    notAsked\n  );\n  const [showAllMinutes, setShowAllMinutes] = useState(false);\n  const [createState, setCreateState] = useState(notSentYet);\n\n  const createNewMinutes = useCallback(async () => {\n    if (!isLoaded(minutes)) return;\n    setCreateState(sending);\n\n    const newMinutesTitle = \"New Meeting\";\n    const body = { name: newMinutesTitle };\n    const result = await postReturning<typeof body, NewId>(\n      `meeting_minutes`,\n      body\n    );\n\n    setCreateState(resultToSubmissionState(result));\n    if (result.successful) {\n      const newMinutes: MeetingMinutes = {\n        id: result.data.id,\n        name: newMinutesTitle,\n        public: null,\n        private: null,\n        date: new Date().getTime()\n      };\n      updateMinutes(loaded([newMinutes, ...minutes.data]));\n      updateSelected(loaded(newMinutes));\n    }\n  }, [minutes, setCreateState, updateMinutes, updateSelected]);\n\n  const loadMinutes = useCallback(\n    async (id: number) => {\n      updateSelected(loading);\n\n      const result = await get<MeetingMinutes>(`meeting_minutes/${id}`);\n      updateSelected(resultToRemote(result));\n    },\n    [updateSelected]\n  );\n\n  const propagateUpdateMinutes = useCallback(\n    (updated: MeetingMinutes) => {\n      updateMinutes(\n        mapLoaded(minutes, all =>\n          all.map(m => (m.id === updated.id ? updated : m))\n        )\n      );\n      updateSelected(loaded(updated));\n    },\n    [updateMinutes, minutes, updateSelected]\n  );\n\n  const savedMinutes = useCallback(\n    (saved: MeetingMinutes) => {\n      replaceRoute(routeMinutes(saved.id, minutesPublic));\n    },\n    [replaceRoute]\n  );\n\n  const deletedMinutes = useCallback(\n    (deleted: MeetingMinutes) => {\n      updateMinutes(\n        mapLoaded(minutes, all => all.filter(m => m.id !== deleted.id))\n      );\n      updateSelected(notAsked);\n      replaceRoute(routeMinutes(null, null));\n    },\n    [updateMinutes, minutes, updateSelected, replaceRoute]\n  );\n\n  useEffect(() => {\n    const loadAllMinutes = async () => {\n      const result = await get<MeetingMinutes[]>(`meeting_minutes`);\n      updateMinutes(resultToRemote(result));\n    };\n\n    loadAllMinutes();\n  }, [updateMinutes]);\n\n  useEffect(() => {\n    if (minutesId) {\n      loadMinutes(minutesId);\n    } else {\n      updateSelected(notAsked);\n    }\n  }, [minutesId, loadMinutes, updateSelected]);\n\n  return (\n    <Section>\n      <Container>\n        <Columns>\n          <MinutesList\n            minutes={minutes}\n            showAllMinutes={showAllMinutes}\n            createState={createState}\n            selectedId={isLoaded(selected) ? selected.data.id : null}\n            createNewMinutes={createNewMinutes}\n            toggleShowAllMinutes={() => setShowAllMinutes(!showAllMinutes)}\n          />\n          <Column>\n            <Box>\n              <RemoteContent\n                data={selected}\n                notAsked={<p>Select Minutes</p>}\n                render={selected => (\n                  <>\n                    <MinutesTabList\n                      minutes={selected}\n                      tab={tab || minutesPublic}\n                    />\n                    <TabContent\n                      minutes={selected}\n                      tab={tab || minutesPublic}\n                      updateMinutes={propagateUpdateMinutes}\n                      savedMinutes={savedMinutes}\n                      deletedMinutes={deletedMinutes}\n                    />\n                  </>\n                )}\n              />\n            </Box>\n          </Column>\n        </Columns>\n      </Container>\n    </Section>\n  );\n};\n\ninterface MinutesListProps {\n  minutes: RemoteData<MeetingMinutes[]>;\n  showAllMinutes: boolean;\n  createState: SubmissionState;\n  selectedId: number | null;\n  createNewMinutes: () => void;\n  toggleShowAllMinutes: () => void;\n}\n\nconst MinutesList: React.FC<MinutesListProps> = ({\n  minutes,\n  showAllMinutes,\n  createNewMinutes,\n  createState,\n  selectedId,\n  toggleShowAllMinutes\n}) => {\n  const { replaceRoute } = useGlubRoute();\n\n  return (\n    <SelectableList\n      listItems={\n        showAllMinutes\n          ? mapLoaded(minutes, m => [m])\n          : mapLoaded(minutes, m => [m.slice(0, 10)])\n      }\n      isSelected={m => m.id === selectedId}\n      onSelect={m => replaceRoute(routeMinutes(m.id, null))}\n      messageIfEmpty=\"No minutes\"\n      render={m => <td>{m.name}</td>}\n      contentAtTop={\n        <RequiresPermission permission={editMinutes}>\n          <div style={{ paddingBottom: \"5px\" }}>\n            <ButtonGroup alignment=\"is-centered\">\n              <Button\n                color=\"is-primary\"\n                onClick={createNewMinutes}\n                loading={isSending(createState)}\n              >\n                + Add New Minutes\n              </Button>\n              {failedToSend(createState) && (\n                <ErrorBox error={createState.error} />\n              )}\n            </ButtonGroup>\n          </div>\n        </RequiresPermission>\n      }\n      contentAtBottom={\n        <>\n          {isLoaded(minutes) && minutes.data.length > 10 && (\n            <div style={{ paddingBottom: \"5px\" }}>\n              <ButtonGroup alignment=\"is-centered\">\n                <Button onClick={toggleShowAllMinutes}>\n                  {showAllMinutes ? \"Hide\" : \"Show\"} old minutes...\n                </Button>\n              </ButtonGroup>\n            </div>\n          )}\n        </>\n      }\n    />\n  );\n};\n\ninterface MinutesTabListProps {\n  minutes: MeetingMinutes;\n  tab: MinutesTab;\n}\n\nconst MinutesTabList: React.FC<MinutesTabListProps> = ({ minutes, tab }) => (\n  <RequiresPermission permission={viewCompleteMinutes}>\n    <div className=\"tabs\">\n      <ul>\n        <SingleTab minutes={minutes} currentTab={tab} tab={minutesPublic} />\n        <SingleTab minutes={minutes} currentTab={tab} tab={minutesPrivate} />\n        <RequiresPermission permission={editMinutes}>\n          <SingleTab minutes={minutes} currentTab={tab} tab={minutesEdit} />\n        </RequiresPermission>\n      </ul>\n    </div>\n  </RequiresPermission>\n);\n\ninterface SingleTabProps {\n  minutes: MeetingMinutes;\n  tab: MinutesTab;\n  currentTab: MinutesTab;\n}\n\nconst SingleTab: React.FC<SingleTabProps> = ({ minutes, tab, currentTab }) => (\n  <li className={tab.route === currentTab.route ? \"is-active\" : undefined}>\n    <a href={renderRoute(routeMinutes(minutes.id, tab))}>{tab.name}</a>\n  </li>\n);\n\ninterface TabContentProps {\n  minutes: MeetingMinutes;\n  tab: MinutesTab;\n  updateMinutes: (minutes: MeetingMinutes) => void;\n  savedMinutes: (minutes: MeetingMinutes) => void;\n  deletedMinutes: (minutes: MeetingMinutes) => void;\n}\n\nconst TabContent: React.FC<TabContentProps> = ({\n  minutes,\n  tab,\n  updateMinutes,\n  savedMinutes,\n  deletedMinutes\n}) => {\n  switch (tab.route) {\n    case \"public\":\n      return <div dangerouslySetInnerHTML={{ __html: minutes.public || \"\" }} />;\n\n    case \"private\":\n      return (\n        <RequiresPermission permission={viewCompleteMinutes}>\n          <div dangerouslySetInnerHTML={{ __html: minutes.private || \"\" }} />\n        </RequiresPermission>\n      );\n\n    default:\n      return (\n        <EditMinutes\n          minutes={minutes}\n          update={updateMinutes}\n          saved={savedMinutes}\n          deleted={deletedMinutes}\n        />\n      );\n  }\n};\n","import React, { useContext, useState, useCallback, FormEvent } from \"react\";\nimport { GlubHubContext } from \"utils/context\";\nimport {\n  notSentYet,\n  SubmissionState,\n  sending,\n  resultToSubmissionState,\n  isSending,\n  failedToSend\n} from \"state/types\";\nimport { Member, Enrollment } from \"state/models\";\nimport { chain, get, post } from \"utils/request\";\nimport { Column } from \"components/Basics\";\nimport {\n  TextInput,\n  stringType,\n  emailType,\n  phoneType,\n  RadioInput,\n  SelectInput,\n  enrollmentType,\n  sectionType,\n  numberType\n} from \"components/Forms\";\nimport { ButtonGroup, Button, SubmitButton } from \"components/Buttons\";\nimport ErrorBox from \"components/ErrorBox\";\nimport { Table } from \"components/Table\";\n\ninterface DetailsProps {\n  member: Member;\n  update: (member: Member) => void;\n}\n\nexport const Details: React.FC<DetailsProps> = ({ member, update }) => {\n  const [form, updateForm] = useState<ProfileForm | null>(null);\n  const [state, setState] = useState(notSentYet);\n\n  const updateMember = useCallback(async (event: FormEvent) => {\n    event.preventDefault();\n\n    if (!form) return;\n\n    setState(sending);\n    const updatedMember = await chain(\n      post(`members/${member.email}`, form),\n      () => get<Member>(`members/${form.email}`)\n    );\n\n    setState(resultToSubmissionState(updatedMember));\n    if (updatedMember.successful) {\n      update(updatedMember.data);\n      updateForm(null);\n    }\n  }, [form, member.email, setState, update]);\n\n  if (form) {\n    return (\n      <EditProfileForm\n        form={form}\n        state={state}\n        cancel={() => updateForm(null)}\n        submit={updateMember}\n        update={updateForm}\n      />\n    );\n  } else {\n    return (\n      <ReadOnlyDetails\n        member={member}\n        startEditing={() => updateForm(formForMember(member))}\n      />\n    );\n  }\n};\n\ninterface ReadOnlyDetailsProps {\n  member: Member;\n  startEditing: () => void;\n}\n\nconst ReadOnlyDetails: React.FC<ReadOnlyDetailsProps> = ({\n  member,\n  startEditing\n}) => {\n  const rows: [String, String][] = [\n    [\"First Name\", member.firstName],\n    [\"Preferred Name\", member.preferredName || \"\"],\n    [\"Last Name\", member.lastName],\n    [\"Email\", member.email],\n    [\"Phone Number\", member.phoneNumber],\n    [\"Location\", member.location],\n    [\"On Campus\", `${!!member.onCampus}`],\n    [\"Enrollment\", member.enrollment || \"Inactive\"],\n    [\"Section\", member.section || \"Homeless\"],\n    [\"About\", member.about || \"\"],\n    [\"Picture\", member.picture || \"\"],\n    [\"Arrived At Tech\", member.arrivedAtTech ? `${member.arrivedAtTech}` : \"\"],\n    [\"Gateway Drug\", member.gatewayDrug || \"\"],\n    [\"Conflicts\", member.conflicts || \"\"],\n    [\"Dietary Restrictions\", member.dietaryRestrictions || \"\"]\n  ];\n\n  return (\n    <Column>\n      <Table>\n        <tbody>\n          {rows.map(([name, value]) => (\n            <tr className=\"no-bottom-border\">\n              <td style={{ textAlign: \"right\" }}>\n                <b>{name}</b>\n              </td>\n              <td>{value}</td>\n            </tr>\n          ))}\n        </tbody>\n      </Table>\n      <ButtonGroup alignment=\"is-right\">\n        <Button onClick={startEditing}>Edit</Button>\n      </ButtonGroup>\n    </Column>\n  );\n};\n\ninterface EditProfileFormProps {\n  form: ProfileForm;\n  state: SubmissionState;\n  cancel: () => void;\n  submit: (event: FormEvent) => void;\n  update: (form: ProfileForm) => void;\n}\n\nconst EditProfileForm: React.FC<EditProfileFormProps> = ({\n  form,\n  state,\n  cancel,\n  submit,\n  update\n}) => {\n  const { info } = useContext(GlubHubContext);\n\n  return (\n    <form onSubmit={submit}>\n      <TextInput\n        horizontal\n        type={stringType}\n        value={form.firstName}\n        onInput={firstName => update({ ...form, firstName })}\n        title=\"First Name\"\n        required\n      />\n      <TextInput\n        horizontal\n        type={stringType}\n        value={form.preferredName}\n        onInput={preferredName => update({ ...form, preferredName })}\n        title=\"Preferred Name\"\n      />\n      <TextInput\n        horizontal\n        type={stringType}\n        value={form.lastName}\n        onInput={lastName => update({ ...form, lastName })}\n        title=\"Last Name\"\n        required\n      />\n      <TextInput\n        horizontal\n        type={emailType}\n        value={form.email}\n        onInput={email => update({ ...form, email })}\n        title=\"Email\"\n        required\n      />\n      <TextInput\n        horizontal\n        type={phoneType}\n        value={form.phoneNumber}\n        onInput={phoneNumber => update({ ...form, phoneNumber })}\n        title=\"Phone Number\"\n        required\n      />\n      <TextInput\n        horizontal\n        type={stringType}\n        value={form.location}\n        onInput={location => update({ ...form, location })}\n        title=\"Location\"\n      />\n      <RadioInput\n        horizontal\n        values={[true, false]}\n        selected={form.onCampus}\n        render={onCampus => (onCampus ? \"Yes\" : \"No\")}\n        onInput={onCampus => update({ ...form, onCampus })}\n        title=\"On Campus?\"\n      />\n      <SelectInput\n        horizontal\n        type={enrollmentType}\n        values={[\"Class\", \"Club\", null] as (Enrollment | null)[]}\n        selected={form.enrollment}\n        onInput={enrollment => update({ ...form, enrollment })}\n        title=\"Enrollment\"\n      />\n      <SelectInput\n        horizontal\n        type={sectionType(info)}\n        values={[null, ...(info?.sections || [])]}\n        selected={form.section}\n        onInput={section => update({ ...form, section })}\n        title=\"Section\"\n      />\n      <TextInput\n        horizontal\n        type={stringType}\n        value={form.about}\n        onInput={about => update({ ...form, about })}\n        title=\"About\"\n      />\n      <TextInput\n        horizontal\n        type={stringType}\n        value={form.picture}\n        onInput={picture => update({ ...form, picture })}\n        title=\"Picture\"\n      />\n      <TextInput\n        horizontal\n        type={numberType}\n        value={form.arrivedAtTech}\n        onInput={arrivedAtTech => update({ ...form, arrivedAtTech })}\n        title=\"Arrived At Tech\"\n      />\n      <TextInput\n        horizontal\n        type={stringType}\n        value={form.gatewayDrug}\n        onInput={gatewayDrug => update({ ...form, gatewayDrug })}\n        title=\"Gateway Drug\"\n      />\n      <TextInput\n        horizontal\n        type={stringType}\n        value={form.conflicts}\n        onInput={conflicts => update({ ...form, conflicts })}\n        title=\"Conflicts\"\n      />\n      <TextInput\n        horizontal\n        type={stringType}\n        value={form.dietaryRestrictions}\n        onInput={dietaryRestrictions =>\n          update({ ...form, dietaryRestrictions })\n        }\n        title=\"Dietary Restrictions\"\n      />\n      <ButtonGroup alignment=\"is-right\">\n        <Button onClick={cancel}>Cancel</Button>\n        <SubmitButton color=\"is-primary\" loading={isSending(state)}>\n          Save\n        </SubmitButton>\n      </ButtonGroup>\n      {failedToSend(state) && <ErrorBox error={state.error} />}\n    </form>\n  );\n};\n\ninterface ProfileForm {\n  firstName: string;\n  preferredName: string;\n  lastName: string;\n  email: string;\n  phoneNumber: string;\n  location: string;\n  onCampus: boolean;\n  major: string;\n  hometown: string;\n  passengers: number;\n  enrollment: Enrollment | null;\n  section: string | null;\n  about: string;\n  picture: string;\n  arrivedAtTech: number | null;\n  gatewayDrug: string;\n  conflicts: string;\n  dietaryRestrictions: string;\n}\n\nconst formForMember = (member: Member): ProfileForm => ({\n  firstName: member.firstName,\n  preferredName: member.preferredName || \"\",\n  lastName: member.lastName,\n  email: member.email,\n  phoneNumber: member.phoneNumber,\n  location: member.location,\n  onCampus: !!member.onCampus,\n  major: member.major || \"\",\n  hometown: member.hometown || \"\",\n  passengers: member.passengers,\n  enrollment: member.enrollment,\n  section: member.section,\n  about: member.about || \"\",\n  picture: member.picture || \"\",\n  arrivedAtTech: member.arrivedAtTech,\n  gatewayDrug: member.gatewayDrug || \"\",\n  conflicts: member.conflicts || \"\",\n  dietaryRestrictions: member.dietaryRestrictions || \"\"\n});\n","import React, { useState, useCallback, useEffect } from \"react\";\nimport { Member, Grades, SimpleAttendance, GlubEvent } from \"state/models\";\nimport {\n  RemoteData,\n  loading,\n  isLoaded,\n  notSentYet,\n  sending,\n  mapLoaded,\n  resultToRemote,\n  resultToSubmissionState,\n  loaded\n} from \"state/types\";\nimport { get, post } from \"utils/request\";\nimport { RemoteContent, SubmissionStateBox } from \"components/Complex\";\nimport { routeEvents, renderRoute } from \"state/route\";\nimport { CheckboxInput, TextInput, numberType } from \"components/Forms\";\nimport { dateFormatter } from \"utils/datetime\";\nimport { Table } from \"components/Table\";\n\nexport const Attendance: React.FC<{ member: Member }> = ({ member }) => {\n  const [grades, updateGrades] = useState<RemoteData<Grades>>(loading);\n  const [state, setState] = useState(notSentYet);\n\n  const loadAttendance = useCallback(async () => {\n    const result = await get<{ grades: Grades }>(\n      `members/${member.email}?grades=true`\n    );\n    updateGrades(mapLoaded(resultToRemote(result), member => member.grades));\n  }, [updateGrades, member]);\n\n  const updateAttendance = useCallback(\n    async (eventId: number, attendance: SimpleAttendance) => {\n      if (!isLoaded(grades)) return;\n\n      updateGrades(\n        loaded({\n          ...grades.data,\n          eventsWithChanges: grades.data.eventsWithChanges.map(event =>\n            event.id === eventId ? { ...event, attendance } : event\n          )\n        })\n      );\n      setState(sending);\n\n      const url = `events/${eventId}/attendance/${member.email}`;\n      const result = await post(url, attendance);\n\n      setState(resultToSubmissionState(result));\n      if (result.successful) {\n        loadAttendance();\n      }\n    },\n    [grades, member.email, setState, loadAttendance]\n  );\n\n  useEffect(() => {\n    loadAttendance();\n  }, [loadAttendance]);\n\n  return (\n    <>\n      <RemoteContent\n        data={grades}\n        render={grades => (\n          <Table>\n            <thead>\n              <tr>\n                <th>Date</th>\n                <th>Event</th>\n                <th>Type</th>\n                <th>Should Attend?</th>\n                <th>Did Attend?</th>\n                <th>Minutes Late</th>\n                <th>Point Change</th>\n                <th>Partial Score</th>\n                <th>Rationale</th>\n              </tr>\n            </thead>\n            <tbody>\n              {grades.eventsWithChanges.map(event => (\n                <AttendanceRow event={event} update={updateAttendance} />\n              ))}\n            </tbody>\n          </Table>\n        )}\n      />\n      <SubmissionStateBox state={state} />\n    </>\n  );\n};\n\ninterface AttendanceRowProps {\n  event: GlubEvent;\n  update: (eventId: number, attendance: SimpleAttendance) => void;\n}\n\nconst AttendanceRow: React.FC<AttendanceRowProps> = ({ event, update }) => {\n  const attendance = event.attendance || {\n    shouldAttend: false,\n    didAttend: false,\n    confirmed: false,\n    minutesLate: 0\n  };\n\n  return (\n    <tr className=\"no-bottom-border\">\n      <td>{dateFormatter(event.callTime)}</td>\n      <td>\n        <a href={renderRoute(routeEvents(event.id, null))}>{event.name}</a>\n      </td>\n      <td>{event.type}</td>\n      <td>\n        <CheckboxInput\n          content=\"\"\n          checked={attendance.shouldAttend}\n          onChange={shouldAttend =>\n            update(event.id, { ...attendance, shouldAttend })\n          }\n        />\n      </td>\n      <td>\n        <CheckboxInput\n          content=\"\"\n          checked={attendance.didAttend}\n          onChange={didAttend => update(event.id, { ...attendance, didAttend })}\n        />\n      </td>\n      <td>\n        <TextInput\n          type={numberType}\n          value={attendance.minutesLate}\n          onInput={minutesLate =>\n            update(event.id, { ...attendance, minutesLate: minutesLate || 0 })\n          }\n          placeholder=\"0\"\n        />\n      </td>\n      <td>{event.change?.change}</td>\n      <td>{event.change?.partialScore}</td>\n      <td>{event.change?.reason}</td>\n    </tr>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { Member, ActiveSemester } from \"state/models\";\nimport { RemoteData, loading, resultToRemote, mapLoaded } from \"state/types\";\nimport { get } from \"utils/request\";\nimport { RemoteContent } from \"components/Complex\";\nimport { roundToTwoDigits } from \"utils/helpers\";\nimport { Table } from \"components/Table\";\n\nexport const Semesters: React.FC<{ member: Member }> = ({ member }) => {\n  const [semesters, setSemesters] = useState<RemoteData<ActiveSemester[]>>(\n    loading\n  );\n\n  useEffect(() => {\n    const loadSemesters = async () => {\n      const url = `members/${member.email}?details=true`;\n      const result = await get<{ semesters: ActiveSemester[] }>(url);\n      setSemesters(mapLoaded(resultToRemote(result), x => x.semesters));\n    };\n\n    loadSemesters();\n  }, [member, setSemesters]);\n\n  return (\n    <RemoteContent\n      data={semesters}\n      render={semesters => (\n        <Table>\n          <thead>\n            <tr>\n              <th>Semester</th>\n              <th>Enrollment</th>\n              <th>Section</th>\n              <th>Score</th>\n            </tr>\n          </thead>\n          <tbody>\n            {semesters.map(semester => (\n              <tr className=\"no-bottom-border\">\n                <td>{semester.semester}</td>\n                <td>{semester.enrollment || \"Inactive\"}</td>\n                <td>{semester.section || \"Homeless\"}</td>\n                <td>{roundToTwoDigits(semester.grades.grade)}</td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      )}\n    />\n  );\n};\n","import React, { useState, useCallback, useEffect } from \"react\";\nimport { Member, Transaction } from \"state/models\";\nimport {\n  RemoteData,\n  loading,\n  notSentYet,\n  sending,\n  resultToSubmissionState,\n  loaded,\n  resultToRemote,\n  isLoaded\n} from \"state/types\";\nimport { post, get } from \"utils/request\";\nimport { RemoteContent, SubmissionStateBox } from \"components/Complex\";\nimport { Button } from \"components/Buttons\";\nimport { simpleDateWithYearFormatter } from \"utils/datetime\";\nimport { Column } from \"components/Basics\";\nimport { Table } from \"components/Table\";\n\nexport const Money: React.FC<{ member: Member }> = ({ member }) => {\n  const [transactions, updateTransactions] = useState<\n    RemoteData<Transaction[]>\n  >(loading);\n  const [state, setState] = useState(notSentYet);\n\n  const resolveTransaction = useCallback(\n    async (transactionId: number, resolved: boolean) => {\n      if (!isLoaded(transactions)) return;\n\n      setState(sending);\n      updateTransactions(\n        loaded(\n          transactions.data.map(t =>\n            t.id === transactionId ? { ...t, resolved } : t\n          )\n        )\n      );\n\n      const url = `transactions/${transactionId}/resolve/${resolved}`;\n      const update = await post(url, {});\n      setState(resultToSubmissionState(update));\n    },\n    [transactions, setState, updateTransactions]\n  );\n\n  useEffect(() => {\n    const loadTransactions = async () => {\n      const result = await get<Transaction[]>(`transactions/${member.email}`);\n      updateTransactions(resultToRemote(result));\n    };\n\n    loadTransactions();\n  }, [member, updateTransactions]);\n\n  return (\n    <Column>\n      <RemoteContent\n        data={transactions}\n        render={transactions => (\n          <Table striped>\n            <tbody>\n              {transactions\n                .sort((t1, t2) => t2.time - t1.time)\n                .map(transaction => (\n                  <TransactionRow\n                    transaction={transaction}\n                    resolve={resolveTransaction}\n                  />\n                ))}\n            </tbody>\n          </Table>\n        )}\n      />\n      <SubmissionStateBox state={state} />\n    </Column>\n  );\n};\n\ninterface TransactionRowProps {\n  transaction: Transaction;\n  resolve: (transactionId: number, resolved: boolean) => void;\n}\n\nconst TransactionRow: React.FC<TransactionRowProps> = ({\n  transaction,\n  resolve\n}) => (\n  <tr className=\"no-bottom-border\">\n    <td>{simpleDateWithYearFormatter(transaction.time)}</td>\n    <td>\n      {transaction.type}\n      {transaction.description && ` (${transaction.description})`}\n    </td>\n    <td>\n      {transaction.amount < 0 ? (\n        <span style={{ color: \"green\" }}>{-1 * transaction.amount}</span>\n      ) : (\n        <>{transaction.amount}</>\n      )}\n    </td>\n    <td>{transaction.resolved ? \"Resolved\" : \"Outstanding\"}</td>\n    <td>\n      {transaction.resolved ? (\n        <Button size=\"is-small\" onClick={() => resolve(transaction.id, false)}>\n          Unresolve\n        </Button>\n      ) : (\n        <Button\n          size=\"is-small\"\n          color=\"is-primary\"\n          onClick={() => resolve(transaction.id, true)}\n        >\n          Resolve\n        </Button>\n      )}\n    </td>\n  </tr>\n);\n","import React, { useContext, useState, useEffect, useCallback } from \"react\";\nimport {\n  ProfileTab,\n  routeRoster,\n  routeLogin,\n  routeEditProfile,\n  profileDetails,\n  profileMoney,\n  profileAttendance,\n  profileSemesters,\n  routeProfile,\n  renderRoute\n} from \"state/route\";\nimport { GlubHubContext, useGlubRoute } from \"utils/context\";\nimport {\n  RemoteData,\n  loading,\n  notSentYet,\n  SubmissionState,\n  loaded,\n  resultToRemote,\n  sending,\n  resultToSubmissionState,\n  failedToSend\n} from \"state/types\";\nimport { Member } from \"state/models\";\nimport { get, NewToken, deleteRequest, chain } from \"utils/request\";\nimport {\n  getToken,\n  setOldToken,\n  setToken,\n  fullName,\n  getOldToken\n} from \"utils/helpers\";\nimport {\n  EmailLink,\n  PhoneLink,\n  Section,\n  Container,\n  Column,\n  Columns,\n  Box\n} from \"components/Basics\";\nimport { ButtonGroup, Button, LinkButton } from \"components/Buttons\";\nimport { switchUser, deleteUser } from \"state/permissions\";\nimport ErrorBox from \"components/ErrorBox\";\nimport DeleteModal from \"components/DeleteModal\";\nimport { Details } from \"./Details\";\nimport { Attendance } from \"./Attendance\";\nimport { Semesters } from \"./Semesters\";\nimport { Money } from \"./Money\";\nimport { RemoteContent, RequiresPermission } from \"components/Complex\";\n\ninterface ProfileProps {\n  email: string;\n  tab: ProfileTab | null;\n}\n\nexport const Profile: React.FC<ProfileProps> = ({ email, tab }) => {\n  const { user, members, updateMembers } = useContext(GlubHubContext);\n\n  const [member, setMember] = useState<RemoteData<Member>>(loading);\n\n  const updateMember = useCallback(\n    (member: Member) => {\n      setMember(loaded(member));\n      updateMembers(members.map(m => (m.email === member.email ? member : m)));\n    },\n    [setMember, members, updateMembers]\n  );\n\n  useEffect(() => {\n    const loadMember = async () => {\n      const member = members.find(m => m.email === email);\n\n      if (member) {\n        setMember(loaded(member));\n      } else {\n        const result = await get<Member>(`/members/${email}`);\n        setMember(resultToRemote(result));\n      }\n    };\n\n    loadMember();\n  }, [email, members, setMember]);\n\n  return (\n    <>\n      <Section>\n        <Container>\n          <RemoteContent\n            data={member}\n            render={member => (\n              <Columns>\n                <Column narrow>\n                  <ProfilePic member={member} />\n                </Column>\n                <Column>\n                  <ProfileTextContent member={member} />\n                  <br />\n                  <UserActions member={member} />\n                </Column>\n              </Columns>\n            )}\n          />\n        </Container>\n      </Section>\n      {!!user?.positions?.length && (\n        <Section>\n          <Container>\n            <Box>\n              <RemoteContent\n                data={member}\n                render={member => (\n                  <>\n                    <ProfileTabs member={member} tab={tab || profileDetails} />\n                    <TabContent\n                      member={member}\n                      tab={tab || profileDetails}\n                      updateMember={updateMember}\n                    />\n                  </>\n                )}\n              />\n            </Box>\n          </Container>\n        </Section>\n      )}\n    </>\n  );\n};\n\nconst ProfileTextContent: React.FC<{ member: Member }> = ({ member }) => (\n  <>\n    <p>\n      <h1 className=\"subtitle is-3\" style={{ marginBottom: \"initial\" }}>\n        {fullName(member)}\n      </h1>\n      <i>\"{member.about || \"no quote\"}\"</i>\n    </p>\n    <br />\n    {member.positions?.length ? member.positions.join(\", \") : \"Member\"}\n    <br />\n    <EmailLink email={member.email} />\n    <br />\n    <PhoneLink phone={member.phoneNumber} />\n    <br />\n    {member.section || \"Homeless\"}\n    <br />\n    {member.major || \"No major\"}\n    {member.minor && `, minoring in ${member.minor}`}\n  </>\n);\n\nconst ProfilePic: React.FC<{ member: Member }> = ({ member }) => (\n  <img\n    width={250}\n    height={250}\n    src={member.picture || \"https://picsum.photos/250\"}\n    alt=\"\"\n  />\n);\n\nconst UserActions: React.FC<{ member: Member }> = ({ member }) => {\n  const { goToRoute } = useGlubRoute();\n  const { user, updateUser, members, updateMembers } = useContext(\n    GlubHubContext\n  );\n\n  const [loginAsState, setLoginAsState] = useState(notSentYet);\n  const [deleteState, setDeleteState] = useState<SubmissionState | null>(null);\n\n  const logout = useCallback(() => {\n    setToken(null);\n    updateUser(null);\n\n    goToRoute(routeLogin);\n  }, [updateUser, goToRoute]);\n\n  const logBackIn = useCallback(async () => {\n    const oldToken = getOldToken();\n    if (!oldToken) return;\n\n    setLoginAsState(sending);\n    const result = await chain(get(\"logout\"), () => {\n      setOldToken(null);\n      setToken(oldToken);\n      return get<Member | null>(\"user\");\n    });\n\n    setLoginAsState(resultToSubmissionState(result));\n    if (result.successful) {\n      updateUser(result.data);\n    }\n  }, [setLoginAsState, updateUser]);\n\n  const loginAsMember = useCallback(async () => {\n    setLoginAsState(sending);\n\n    const result = await chain(\n      get<NewToken>(`members/${member.email}/login_as`),\n      newToken => {\n        const token = getToken();\n        setOldToken(token);\n        setToken(newToken.token);\n        return get<Member | null>(\"user\");\n      }\n    );\n\n    setLoginAsState(resultToSubmissionState(result));\n    if (result.successful) {\n      updateUser(result.data);\n    }\n  }, [setLoginAsState, updateUser, member]);\n\n  const deleteMember = useCallback(async () => {\n    setDeleteState(sending);\n\n    const result = await deleteRequest(`members/${member.email}?confirm=true`);\n    setDeleteState(resultToSubmissionState(result));\n\n    if (result.successful) {\n      updateMembers(members.filter(m => m.email !== member.email));\n      goToRoute(routeRoster);\n    }\n  }, [setDeleteState, member.email, updateMembers, members, goToRoute]);\n\n  if (user?.email === member.email) {\n    return (\n      <ButtonGroup>\n        {getOldToken() ? (\n          <Button onClick={logBackIn}>Log back in as yourself</Button>\n        ) : (\n          <Button onClick={logout}>Log out</Button>\n        )}\n        <LinkButton route={routeEditProfile}>Edit your profile</LinkButton>\n      </ButtonGroup>\n    );\n  } else {\n    const firstName = member.preferredName || member.firstName;\n\n    return (\n      <ButtonGroup>\n        <RequiresPermission permission={switchUser}>\n          <Button onClick={loginAsMember}>Log in as {firstName}</Button>\n        </RequiresPermission>\n        <RequiresPermission permission={deleteUser}>\n          <Button onClick={() => setDeleteState(notSentYet)}>\n            Delete {firstName}\n          </Button>\n        </RequiresPermission>\n\n        {failedToSend(loginAsState) && <ErrorBox error={loginAsState.error} />}\n        {deleteState && (\n          <DeleteMemberModal\n            member={member}\n            state={deleteState}\n            cancel={() => setDeleteState(null)}\n            confirm={deleteMember}\n          />\n        )}\n      </ButtonGroup>\n    );\n  }\n};\n\ninterface DeleteMemberModalProps {\n  member: Member;\n  state: SubmissionState;\n  cancel: () => void;\n  confirm: () => void;\n}\n\nconst DeleteMemberModal: React.FC<DeleteMemberModalProps> = ({\n  member,\n  state,\n  cancel,\n  confirm\n}) => (\n  <DeleteModal\n    title={`Delete ${fullName(member)}?`}\n    state={state}\n    confirm={confirm}\n    cancel={cancel}\n  >\n    <>\n      Are you sure you want to delete {fullName(member)}?\n      <br />\n      <i>Think of what Uncle Ben would say. No, not the rice one.</i>\n    </>\n  </DeleteModal>\n);\n\ninterface ProfileTabsProps {\n  member: Member;\n  tab: ProfileTab;\n}\n\nconst ProfileTabs: React.FC<ProfileTabsProps> = ({ member, tab }) => (\n  <div className=\"tabs\">\n    <ul>\n      {[profileDetails, profileMoney, profileAttendance, profileSemesters].map(\n        profileTab => (\n          <li\n            className={tab.route === profileTab.route ? \"is-active\" : undefined}\n          >\n            <a href={renderRoute(routeProfile(member.email, profileTab))}>\n              {profileTab.name}\n            </a>\n          </li>\n        )\n      )}\n    </ul>\n  </div>\n);\n\ninterface TabContentProps {\n  member: Member;\n  tab: ProfileTab;\n  updateMember: (member: Member) => void;\n}\n\nconst TabContent: React.FC<TabContentProps> = ({\n  member,\n  tab,\n  updateMember\n}) => {\n  switch (tab.route) {\n    case \"attendance\":\n      return <Attendance member={member} />;\n    case \"semesters\":\n      return <Semesters member={member} />;\n    case \"money\":\n      return <Money member={member} />;\n    case \"details\":\n      return <Details member={member} update={updateMember} />;\n  }\n};\n","import React from \"react\";\nimport { SongLink } from \"state/models\";\n\ninterface SongLinkProps {\n  link: SongLink;\n  onDelete?: (link: SongLink) => void;\n}\n\ninterface LinkButtonProps {\n  url: string;\n  name: string;\n}\n\nexport const SongLinkButton: React.FC<SongLinkProps> = ({ link, onDelete }) => {\n  let baseButton: JSX.Element;\n  if (link.type === \"Sheet Music\") {\n    baseButton = (\n      <SheetMusicLink\n        name={link.name}\n        url={`https://gleeclub.gatech.edu/music/${link.target}`}\n      />\n    );\n  } else if (link.type === \"MIDIs\") {\n    baseButton = (\n      <MidiLink\n        name={link.name}\n        url={`https://gleeclub.gatech.edu/music/${link.target}`}\n      />\n    );\n  } else if (link.type === \"Performances\") {\n    baseButton = (\n      <VideoLink name={link.name} url={`https://youtu.be/${link.target}`} />\n    );\n  } else {\n    baseButton = <DefaultLink name={link.name} url={link.target} />;\n  }\n\n  return onDelete ? (\n    <span style={{ display: \"inline\" }}>\n      <button\n        className=\"delete\"\n        style={{ margin: \"8px\" }}\n        onClick={() => onDelete(link)}\n      />\n      {baseButton}\n    </span>\n  ) : (\n    baseButton\n  );\n};\n\nconst SheetMusicLink: React.FC<LinkButtonProps> = ({ url, name }) => (\n  <a\n    className=\"button is-outlined is-primary\"\n    href={url}\n    target=\"_blank\"\n    rel=\"noopener noreferrer\"\n  >\n    <span className=\"icon\">\n      <i className=\"fas fa-scroll\" />\n    </span>\n    <span>{name}</span>\n  </a>\n);\n\nconst MidiLink: React.FC<LinkButtonProps> = ({ url, name }) => (\n  <a\n    className=\"button is-outlined is-primary\"\n    href={url}\n    target=\"_blank\"\n    rel=\"noopener noreferrer\"\n  >\n    <span className=\"icon\">\n      <i className=\"fas fa-volume-up\" />\n    </span>\n    <span>{name}</span>\n  </a>\n);\n\nconst VideoLink: React.FC<LinkButtonProps> = ({ url, name }) => (\n  <span style={{ display: \"inline\", alignItems: \"center\" }}>\n    <span\n      className=\"icon has-text-grey-lighter\"\n      style={{ marginRight: \".5rem\" }}\n    >\n      <i className=\"fas fa-external-link-alt\" />\n    </span>\n    <a className=\"button\" href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n      <span className=\"icon has-text-danger\">\n        <i className=\"fab fa-youtube\" />\n      </span>\n    </a>\n    <span style={{ paddingLeft: \"5px\" }}>{name}</span>\n  </span>\n);\n\nconst DefaultLink: React.FC<LinkButtonProps> = ({ url, name }) => (\n  <a className=\"button\" target=\"_blank\" href={url} rel=\"noopener noreferrer\">\n    {name}\n  </a>\n);\n","import React from \"react\";\nimport { SongLinkButton } from \"./Links\";\nimport { BackButton, Button } from \"components/Buttons\";\nimport { editRepertoire } from \"state/permissions\";\nimport { playPitch, pitchToUnicode } from \"utils/helpers\";\nimport { Song, SongLinkSection, Pitch, SongMode } from \"state/models\";\nimport { Title, Tooltip } from \"components/Basics\";\nimport { useGlubRoute } from \"utils/context\";\nimport { routeRepertoire, repertoireEdit } from \"state/route\";\nimport { RequiresPermission } from \"components/Complex\";\nimport { Table } from \"components/Table\";\n\ninterface SongSidebarProps {\n  song: Song;\n  tryToDelete: () => void;\n}\n\nexport const SongSidebar: React.FC<SongSidebarProps> = ({\n  song,\n  tryToDelete\n}) => {\n  const { replaceRoute } = useGlubRoute();\n\n  const linkSection = (section: SongLinkSection) => (\n    <tr style={{ border: \"none\" }}>\n      <td style={{ border: \"none\" }}>{section.name}</td>\n      <td style={{ border: \"none\" }}>\n        {section.links.map(link => (\n          <>\n            <SongLinkButton link={link} />{\" \"}\n          </>\n        ))}\n      </td>\n    </tr>\n  );\n\n  return (\n    <div>\n      <BackButton\n        content=\"all songs\"\n        click={() => replaceRoute(routeRepertoire(null, null))}\n      />\n      <Title centered>{song.title}</Title>\n      {song.info && (\n        <p>\n          {song.info}\n          <br />\n        </p>\n      )}\n      <PitchSection title=\"Key\" pitch={song.key} mode={song.mode} />\n      <PitchSection\n        title=\"Starting Pitch\"\n        pitch={song.startingPitch}\n        mode={null}\n      />\n      <br />\n      <Table fullwidth>\n        <tbody>\n          {song.links?.filter(links => links.links.length).map(linkSection)}\n        </tbody>\n      </Table>\n      <RequiresPermission permission={editRepertoire}>\n        <div>\n          <Button\n            onClick={() =>\n              replaceRoute(routeRepertoire(song.id, repertoireEdit))\n            }\n          >\n            Edit Song\n          </Button>\n          <br />\n          <br />\n          <Button color=\"is-danger\" onClick={tryToDelete}>\n            Delete Song\n          </Button>\n        </div>\n      </RequiresPermission>\n    </div>\n  );\n};\n\ninterface PitchSectionProps {\n  title: string;\n  pitch: Pitch | null;\n  mode: SongMode | null;\n}\n\nconst PitchSection: React.FC<PitchSectionProps> = ({ title, pitch, mode }) => (\n  <p>\n    {title}:{\" \"}\n    {pitch ? (\n      <b onClick={() => playPitch(pitch)}>\n        <Tooltip content=\"hey kid, wanna pitch?\">\n          {pitchToUnicode(pitch)}\n          {mode && ` ${mode}`}\n        </Tooltip>\n      </b>\n    ) : (\n      <b>?</b>\n    )}\n  </p>\n);\n","import React, { useState, useCallback, FormEvent } from \"react\";\nimport { Song, SongMode, SongLink } from \"state/models\";\nimport {\n  notSentYet,\n  sending,\n  resultToSubmissionState,\n  isSending,\n  failedToSend\n} from \"state/types\";\nimport {\n  TextInput,\n  stringType,\n  SelectInput,\n  pitchType,\n  songModeType,\n  CheckboxInput,\n  TextareaInput,\n  FileInput\n} from \"components/Forms\";\nimport { ALL_PITCHES } from \"state/constants\";\nimport { Divider } from \"components/Basics\";\nimport {\n  post,\n  deleteRequest,\n  postReturning,\n  NewId,\n  chain,\n  get,\n  GlubResponseType\n} from \"utils/request\";\nimport { SongLinkButton } from \"./Links\";\nimport { SubmitButton, BackButton } from \"components/Buttons\";\nimport ErrorBox from \"components/ErrorBox\";\nimport { fileToBase64 } from \"utils/helpers\";\nimport { useGlubRoute } from \"utils/context\";\nimport { routeRepertoire, repertoireDetails } from \"state/route\";\nimport { SubmissionStateBox } from \"components/Complex\";\n\ninterface EditProps {\n  song: Song;\n  propagateUpdate: (song: Song) => void;\n}\n\ninterface NewFileLink {\n  name: string;\n  file: File | null;\n}\n\ninterface NewUrlLink {\n  name: string;\n  url: string;\n}\n\nconst emptyFileLink: NewFileLink = {\n  name: \"\",\n  file: null\n};\n\nconst emptyUrlLink: NewUrlLink = {\n  name: \"\",\n  url: \"\"\n};\n\nexport const Edit: React.FC<EditProps> = ({ song, propagateUpdate }) => {\n  const { replaceRoute } = useGlubRoute();\n\n  const [state, setState] = useState(notSentYet);\n\n  const updateSong = useCallback(\n    async (song: Song) => {\n      propagateUpdate(song);\n\n      setState(sending);\n      const result = await post(`repertoire/${song.id}`, song);\n      setState(resultToSubmissionState(result));\n    },\n    [setState, propagateUpdate]\n  );\n\n  const deleteLink = useCallback(\n    async (link: SongLink) => {\n      propagateUpdate({\n        ...song,\n        links: song.links?.map(section => ({\n          ...section,\n          links: section.links.filter(l => l.id !== link.id)\n        }))\n      });\n\n      setState(sending);\n      const result = await deleteRequest(`repertoire/links/${link.id}`);\n      setState(resultToSubmissionState(result));\n    },\n    [setState, propagateUpdate, song]\n  );\n\n  return (\n    <>\n      <BackButton\n        content=\"finish editing\"\n        click={() => replaceRoute(routeRepertoire(song.id, repertoireDetails))}\n      />\n      <h2 className=\"title is-4\" style={{ textAlign: \"center\" }}>\n        Edit\n      </h2>\n      <h3 className=\"subtitle is-6\" style={{ textAlign: \"center\" }}>\n        {song.title}\n      </h3>\n\n      <TextInput\n        type={stringType}\n        value={song.title}\n        onInput={title => updateSong({ ...song, title })}\n        title=\"Name of song\"\n        placeholder=\"Happy Birthday in 12/17\"\n        required\n      />\n      <SelectInput\n        type={pitchType}\n        values={[null, ...ALL_PITCHES]}\n        selected={song.key}\n        onInput={key => updateSong({ ...song, key })}\n        title=\"Tonic\"\n      />\n      <SelectInput<SongMode | null>\n        type={songModeType}\n        values={[null, \"Major\", \"Minor\"]}\n        selected={song.mode}\n        onInput={mode => updateSong({ ...song, mode })}\n        title=\"Mode\"\n      />\n      <SelectInput\n        type={pitchType}\n        values={[null, ...ALL_PITCHES]}\n        selected={song.startingPitch}\n        onInput={startingPitch => updateSong({ ...song, startingPitch })}\n        title=\"Starting Pitch (if different)\"\n      />\n      <CheckboxInput\n        content=\"Current Repertoire\"\n        checked={song.current}\n        onChange={current => updateSong({ ...song, current })}\n      />\n      <TextareaInput\n        value={song.info || \"\"}\n        onInput={info => updateSong({ ...song, info })}\n        title=\"Comments\"\n        placeholder=\"There are no soloists, communism wins!\"\n      />\n      <SubmissionStateBox state={state} />\n\n      <ul style={{ listStyle: \"none\", paddingBottom: \"10px\" }}>\n        <EditFileType\n          typeName=\"Sheet Music\"\n          song={song}\n          propagateUpdate={propagateUpdate}\n          deleteLink={deleteLink}\n        />\n        <EditFileType\n          typeName=\"MIDIs\"\n          song={song}\n          propagateUpdate={propagateUpdate}\n          deleteLink={deleteLink}\n        />\n        <NewPerformanceSection\n          song={song}\n          propagateUpdate={propagateUpdate}\n          deleteLink={deleteLink}\n        />\n      </ul>\n    </>\n  );\n};\n\ninterface EditFileTypeProps {\n  song: Song;\n  typeName: string;\n  deleteLink: (link: SongLink) => void;\n  propagateUpdate: (song: Song) => void;\n}\n\nconst EditFileType: React.FC<EditFileTypeProps> = ({\n  song,\n  typeName,\n  deleteLink,\n  propagateUpdate\n}) => {\n  const [newFile, updateNewFile] = useState(emptyFileLink);\n  const [state, setState] = useState(notSentYet);\n\n  const addLinkToSong = useCallback(async (event: FormEvent) => {\n    event.preventDefault();\n\n    if (!newFile.name || !newFile.file) return;\n    setState(sending);\n\n    const content = await fileToBase64(newFile.file);\n    const body = {\n      type: typeName,\n      name: newFile.name,\n      target: {\n        path: newFile.file.name,\n        content\n      }\n    };\n    const result = await createAndGetNewLink(body, song.id);\n\n    setState(resultToSubmissionState(result));\n    if (result.successful) {\n      propagateUpdate({\n        ...song,\n        links: song.links?.map(section =>\n          section.name === typeName\n            ? { ...section, links: [...section.links, result.data] }\n            : section\n        )\n      });\n      updateNewFile(emptyFileLink);\n    }\n  }, [newFile, propagateUpdate, song, typeName]);\n\n  return (\n    <>\n      <Divider content={typeName} />\n      {song.links\n        ?.find(section => section.name === typeName)\n        ?.links.map(link => (\n          <>\n            <SongLinkButton link={link} onDelete={link => deleteLink(link)} />\n            <br />\n          </>\n        )) || <br />}\n      <form onSubmit={addLinkToSong}>\n        <TextInput\n          type={stringType}\n          value={newFile.name}\n          onInput={name => updateNewFile({ ...newFile, name })}\n          title={`${typeName} Name`}\n          placeholder=\"Happy Birthday - TTBB\"\n          required\n        />\n        <FileInput\n          file={newFile.file}\n          selectFile={file => updateNewFile({ ...newFile, file })}\n          title={`${typeName} File`}\n        />\n        <SubmitButton loading={isSending(state)}>Add {typeName}</SubmitButton>\n        {failedToSend(state) && <ErrorBox error={state.error} />}\n      </form>\n    </>\n  );\n};\n\ninterface NewPerformanceSectionProps {\n  song: Song;\n  deleteLink: (link: SongLink) => void;\n  propagateUpdate: (song: Song) => void;\n}\n\nconst NewPerformanceSection: React.FC<NewPerformanceSectionProps> = ({\n  song,\n  deleteLink,\n  propagateUpdate\n}) => {\n  const [newPerformance, updateNewPerformance] = useState(emptyUrlLink);\n  const [state, setState] = useState(notSentYet);\n\n  const addPerformanceToSong = useCallback(async (event: FormEvent) => {\n    event.preventDefault();\n    setState(sending);\n\n    const body = {\n      type: \"Performances\",\n      name: newPerformance.name,\n      target: newPerformance.url\n    };\n    const result = await createAndGetNewLink(body, song.id);\n\n    setState(resultToSubmissionState(result));\n    if (result.successful) {\n      propagateUpdate({\n        ...song,\n        links: song.links?.map(section =>\n          section.name === \"Performances\"\n            ? { ...section, links: [...section.links, result.data] }\n            : section\n        )\n      });\n      updateNewPerformance(emptyUrlLink);\n    }\n  }, [song, setState, propagateUpdate, updateNewPerformance, newPerformance]);\n\n  return (\n    <>\n      <Divider content=\"Performances\" />\n      {song.links\n        ?.find(section => section.name === \"Performances\")\n        ?.links.map(link => (\n          <>\n            <SongLinkButton link={link} onDelete={deleteLink} />\n          </>\n        )) || <br />}\n\n      <form onSubmit={addPerformanceToSong}>\n        <TextInput\n          type={stringType}\n          value={newPerformance.name}\n          onInput={name => updateNewPerformance({ ...newPerformance, name })}\n          title=\"Performance name\"\n          placeholder=\"Happy Birthday, live from New York!\"\n          required\n        />\n        <TextInput\n          type={stringType}\n          value={newPerformance.url}\n          onInput={url => updateNewPerformance({ ...newPerformance, url })}\n          title=\"Performance URL\"\n          prefix=\"https://youtu.be/\"\n          placeholder=\"dtER80sOjX4\"\n          required\n        />\n        <SubmitButton loading={isSending(state)}>Add performance</SubmitButton>\n        {failedToSend(state) && <ErrorBox error={state.error} />}\n      </form>\n    </>\n  );\n};\n\nconst createAndGetNewLink = <T extends any>(\n  body: T,\n  songId: number\n): Promise<GlubResponseType<SongLink>> =>\n  chain(\n    postReturning<typeof body, NewId>(`repertoire/${songId}/links`, body),\n    ({ id }) => get<SongLink>(`repertoire/links/${id}`)\n  );\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport {\n  RemoteData,\n  loading,\n  notSentYet,\n  SubmissionState,\n  notAsked,\n  loaded,\n  resultToRemote,\n  sending,\n  errorSending,\n  mapLoaded,\n  isLoaded,\n  resultToSubmissionState,\n  isSending,\n  failedToSend\n} from \"state/types\";\nimport { Container, Section, Columns } from \"components/Basics\";\nimport { Song } from \"state/models\";\nimport { SongSidebar } from \"./Sidebar\";\nimport ErrorBox from \"components/ErrorBox\";\nimport { useGlubRoute } from \"utils/context\";\nimport { SelectableList } from \"components/List\";\nimport DeleteModal from \"components/DeleteModal\";\nimport { editRepertoire } from \"state/permissions\";\nimport { ButtonGroup, Button } from \"components/Buttons\";\nimport { get, postReturning, NewId, deleteRequest } from \"utils/request\";\nimport { routeRepertoire, RepertoireTab, repertoireEdit } from \"state/route\";\nimport { Edit } from \"./Edit\";\nimport { Sidebar, RequiresPermission } from \"components/Complex\";\n\ninterface RepertoireProps {\n  songId: number | null;\n  tab: RepertoireTab | null;\n}\n\nexport const Repertoire: React.FC<RepertoireProps> = ({ songId, tab }) => {\n  const { replaceRoute } = useGlubRoute();\n\n  const [songs, setSongs] = useState<RemoteData<Song[]>>(loading);\n  const [selected, setSelected] = useState<RemoteData<Song>>(notAsked);\n  const [createState, setCreateState] = useState(notSentYet);\n  const [deleteState, setDeleteState] = useState<SubmissionState | null>(null);\n\n  const loadSong = useCallback(\n    async (songId: number) => {\n      setSelected(loading);\n      const resp = await get<Song>(`repertoire/${songId}?details=true`);\n      setSelected(resultToRemote(resp));\n    },\n    [setSelected]\n  );\n\n  const createSong = useCallback(async () => {\n    setCreateState(sending);\n    const body = { title: \"New Song\" };\n    const resp = await postReturning<typeof body, NewId>(\"repertoire\", body);\n\n    setCreateState(resultToSubmissionState(resp));\n    if (resp.successful) {\n      replaceRoute(routeRepertoire(resp.data.id, repertoireEdit));\n    }\n  }, [setCreateState, replaceRoute]);\n\n  const deleteSong = useCallback(\n    async (songId: number) => {\n      setDeleteState(sending);\n      const resp = await deleteRequest(`repertoire/${songId}`);\n\n      if (resp.successful) {\n        setDeleteState(null);\n        setSelected(notAsked);\n        setSongs(songs =>\n          mapLoaded(songs, x => x.filter(song => song.id !== songId))\n        );\n      } else {\n        setDeleteState(errorSending(resp.error));\n      }\n    },\n    [setDeleteState, setSelected, setSongs]\n  );\n\n  const propagateUpdate = useCallback(\n    (song: Song) => {\n      setSelected(loaded(song));\n      setSongs(\n        mapLoaded(songs, all => all.map(s => (s.id === song.id ? song : s)))\n      );\n    },\n    [songs, setSelected]\n  );\n\n  // Load Songs on Initialize\n\n  useEffect(() => {\n    const loadSongs = async () => {\n      const resp = await get<Song[]>(`repertoire`);\n      setSongs(resultToRemote(resp));\n    };\n\n    loadSongs();\n  }, [setSongs]);\n\n  useEffect(() => {\n    if (songId !== null) {\n      loadSong(songId);\n    } else {\n      setSelected(notAsked);\n    }\n  }, [songId, loadSong, setSelected]);\n\n  const selectedId = isLoaded(selected) ? selected.data.id : null;\n  const columns: [\n    string,\n    (songs: Song) => boolean,\n    JSX.Element | undefined\n  ][] = [\n    [\n      \"Current\",\n      currentSongsFilter,\n      <CreateSongButton state={createState} createSong={createSong} />\n    ],\n    [\"A-G\", otherAToGFilter, undefined],\n    [\"H-P\", otherHToPFilter, undefined],\n    [\"Q-Z\", otherQToZFilter, undefined]\n  ];\n\n  return (\n    <div>\n      <Section>\n        <Container>\n          <Columns>\n            {columns.map(([title, filter, maybeCreateButton]) => (\n              <div key={title} className=\"column is-one-quarter is-centered\">\n                <SelectableList\n                  title={title}\n                  listItems={mapLoaded(songs, x => [x.filter(filter)])}\n                  isSelected={song => song.id === selectedId}\n                  onSelect={song =>\n                    replaceRoute(routeRepertoire(song.id, null))\n                  }\n                  messageIfEmpty=\"Nothin' to see here, buddy.\"\n                  render={song => <td>{song.title}</td>}\n                  contentAtBottom={maybeCreateButton}\n                />\n              </div>\n            ))}\n          </Columns>\n        </Container>\n      </Section>\n      <Sidebar\n        data={selected}\n        close={() => replaceRoute(routeRepertoire(null, null))}\n        render={song =>\n          tab?.route === \"edit\" ? (\n            <Edit song={song} propagateUpdate={propagateUpdate} />\n          ) : (\n            <SongSidebar\n              song={song}\n              tryToDelete={() => setDeleteState(notSentYet)}\n            />\n          )\n        }\n      />\n      {isLoaded(selected) && deleteState ? (\n        <DeleteModal\n          title={`Are you sure you want to delete ${selected.data.title}?`}\n          cancel={() => setDeleteState(null)}\n          confirm={() => deleteSong(selected.data.id)}\n          state={deleteState}\n        >\n          <div>\n            <p>Are you sure you want to delete {selected.data.title}?</p>\n            <p>\n              <i>It'll be gong like Varys' dong.</i>\n            </p>\n          </div>\n        </DeleteModal>\n      ) : null}\n    </div>\n  );\n};\n\n// Song Filters\n\nconst currentSongsFilter = (song: Song): boolean => song.current;\n\nconst otherAToGFilter = (song: Song) =>\n  !song.current && song.title.toLowerCase()[0] < \"h\";\n\nconst otherHToPFilter = (song: Song) =>\n  !song.current &&\n  song.title.toLowerCase()[0] >= \"h\" &&\n  song.title.toLowerCase()[0] < \"q\";\n\nconst otherQToZFilter = (song: Song) =>\n  !song.current && song.title.toLowerCase()[0] >= \"q\";\n\n// Create Song Button\n\ninterface CreateSongButtonProps {\n  state: SubmissionState;\n  createSong: () => void;\n}\n\nconst CreateSongButton: React.FC<CreateSongButtonProps> = ({\n  state,\n  createSong\n}) => (\n  <RequiresPermission permission={editRepertoire}>\n    <div style={{ paddingTop: \"5px\" }}>\n      <ButtonGroup alignment=\"is-centered\">\n        <Button\n          color=\"is-primary\"\n          loading={isSending(state)}\n          onClick={createSong}\n        >\n          + Add New Song\n        </Button>\n      </ButtonGroup>\n      {failedToSend(state) && <ErrorBox error={state.error} />}\n    </div>\n  </RequiresPermission>\n);\n","import React, { useState, useCallback, FormEvent } from \"react\";\nimport { Md5 } from \"ts-md5\";\nimport { post } from \"utils/request\";\nimport { routeLogin } from \"state/route\";\nimport ErrorBox from \"components/ErrorBox\";\nimport { useGlubRoute } from \"utils/context\";\nimport { Column, Title4, Box } from \"components/Basics\";\nimport { TextInput, passwordType } from \"components/Forms\";\nimport { ButtonGroup, SubmitButton } from \"components/Buttons\";\nimport {\n  notSentYet,\n  sending,\n  errorSending,\n  isSending,\n  failedToSend\n} from \"state/types\";\n\nexport const ResetPassword: React.FC<{ token: string | null }> = ({\n  token\n}) => {\n  const { goToRoute } = useGlubRoute();\n\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [state, setState] = useState(notSentYet);\n\n  const submit = useCallback(async (event: FormEvent) => {\n    event.preventDefault();\n\n    if (password !== confirmPassword) {\n      alert(\"Your passwords don't match.\");\n      return;\n    }\n\n    setState(sending);\n    const body = { passHash: Md5.hashStr(password) };\n    const result = await post(`reset_password?token=${token}`, body);\n\n    if (result.successful) {\n      goToRoute(routeLogin);\n      alert(\"Your password has been successfully reset!\");\n    } else {\n      setState(errorSending(result.error));\n    }\n  }, [password, token, confirmPassword, setState, goToRoute]);\n\n  return (\n    <div className=\"container fullheight\">\n      <div className=\"columns is-centered is-vcentered\">\n        <Column narrow>\n          <form onSubmit={submit} style={{ padding: \"10px\" }}>\n            <Box>\n              <Title4>Reset your Password</Title4>\n              <p>\n                Good job getting this far. Gimme a new password, and you'll be\n                reborn like it's Avatar 2009.\n              </p>\n              <br />\n              <TextInput\n                type={passwordType}\n                value={password}\n                onInput={setPassword}\n                title=\"Password\"\n                placeholder=\"••••••••\"\n                required\n              />\n              <TextInput\n                type={passwordType}\n                value={confirmPassword}\n                onInput={setConfirmPassword}\n                title=\"Confirm Password\"\n                placeholder=\"••••••••\"\n                required\n              />\n\n              <ButtonGroup alignment=\"is-right\">\n                <SubmitButton color=\"is-primary\" loading={isSending(state)}>\n                  call me Jake Sully\n                </SubmitButton>\n              </ButtonGroup>\n              {failedToSend(state) && <ErrorBox error={state.error} />}\n            </Box>\n          </form>\n        </Column>\n      </div>\n    </div>\n  );\n};\n","import React, { useContext } from \"react\";\nimport {\n  Section,\n  Container,\n  Box,\n  EmailLink,\n  PhoneLink\n} from \"components/Basics\";\nimport { Member } from \"state/models\";\nimport { fullName } from \"utils/helpers\";\nimport { GlubHubContext } from \"utils/context\";\nimport { routeProfile, renderRoute } from \"state/route\";\nimport { Table } from \"components/Table\";\n\nexport const Roster: React.FC = () => {\n  const { members } = useContext(GlubHubContext);\n\n  const memberRow = (member: Member) => (\n    <tr key={member.email}>\n      <td>\n        <a href={renderRoute(routeProfile(member.email, null))}>\n          {fullName(member)}\n        </a>\n      </td>\n      <td>{member.section || \"Homeless\"}</td>\n      <td>\n        <EmailLink email={member.email} />\n      </td>\n      <td>\n        <PhoneLink phone={member.phoneNumber} />\n      </td>\n      <td>{member.location}</td>\n    </tr>\n  );\n\n  return (\n    <Section>\n      <Container>\n        <Box>\n          <Table fullwidth scrollable>\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Section</th>\n                <th>E-mail</th>\n                <th>Phone</th>\n                <th>Location</th>\n              </tr>\n            </thead>\n            <tbody>{members.map(memberRow)}</tbody>\n          </Table>\n        </Box>\n      </Container>\n    </Section>\n  );\n};\n","import React, { useState, useCallback, useEffect } from \"react\";\nimport { useGlubRoute } from \"utils/context\";\nimport { DocumentLink, Member, Info } from \"state/models\";\nimport { visibleAdminTabs, fullName } from \"utils/helpers\";\nimport {\n  AdminRoute,\n  routeEvents,\n  GlubRoute,\n  renderRoute,\n  routeAdmin,\n  routeRepertoire,\n  routeRoster,\n  routeMinutes,\n  routeProfile,\n  routeHome\n} from \"state/route\";\n\ninterface NavbarProps {\n  user: Member | null;\n  info: Info | null;\n}\n\nexport const Navbar: React.FC<NavbarProps> = ({ user, info }) => {\n  const { location } = useGlubRoute();\n  const [expanded, setExpanded] = useState(false);\n\n  const toggleExpanded = useCallback(() => {\n    setExpanded(!expanded);\n  }, [expanded, setExpanded]);\n\n  const collapseBurgerKey = location ? renderRoute(location) : \"\";\n  useEffect(() => {\n    setExpanded(false);\n  }, [collapseBurgerKey]);\n\n  const singleLink = (route: GlubRoute) => (\n    <a\n      className={\n        \"navbar-item\" + (route.route === location?.route ? \" is-active\" : \"\")\n      }\n      href={renderRoute(route)}\n    >\n      {route.name}\n    </a>\n  );\n\n  return (\n    <nav\n      className=\"navbar is-primary is-fixed-top\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"navbar-brand\">\n        <HomeLogo />\n        {user && (\n          <BurgerButton expanded={expanded} toggleExpanded={toggleExpanded} />\n        )}\n      </div>\n      <div className={\"navbar-menu\" + (expanded ? \" is-active\" : \"\")}>\n        {user && (\n          <div className=\"navbar-start\">\n            {singleLink(routeEvents(null, null))}\n            {singleLink(routeRepertoire(null, null))}\n            {singleLink(routeRoster)}\n            {singleLink(routeMinutes(null, null))}\n            <DocumentLinks documents={info?.documents || []} />\n            <AdminLinks user={user} />\n          </div>\n        )}\n        {user && (\n          <div className=\"navbar-end\">\n            <a\n              className={\n                \"navbar-item\" +\n                (location?.route === \"profile\" && location.email === user.email ? \" is-active\" : \"\")\n              }\n              href={renderRoute(routeProfile(user.email, null))}\n            >\n              {fullName(user)}\n            </a>\n          </div>\n        )}\n      </div>\n    </nav>\n  );\n};\n\nconst AdminLinks: React.FC<{ user: Member | null }> = ({ user }) => {\n  const adminTabs = user ? visibleAdminTabs(user) : [];\n\n  if (!adminTabs.length) {\n    return <></>;\n  }\n\n  const divider = <hr className=\"navbar-divider\" />;\n  const adminTab = (tab: AdminRoute) => (\n    <a\n      key={tab.route}\n      className=\"navbar-item\"\n      href={renderRoute(routeAdmin(tab))}\n    >\n      {tab.name}\n    </a>\n  );\n\n  return (\n    <div className=\"navbar-item has-dropdown is-hoverable\">\n      <a className=\"navbar-link\" href={renderRoute(routeAdmin(null))}>\n        Admin\n      </a>\n      <div className=\"navbar-dropdown\">\n        {adminTabs.map((tabGroup, index) => [\n          ...tabGroup.map(adminTab),\n          ...(index === adminTabs.length - 1 ? [] : [divider])\n        ])}\n      </div>\n    </div>\n  );\n};\n\nconst DocumentLinks: React.FC<{ documents: DocumentLink[] }> = ({\n  documents\n}) => (\n    <div className=\"navbar-item has-dropdown is-hoverable\">\n      {/* eslint-disable-next-line */}\n      <a className=\"navbar-link\">Documents</a>\n      <div className=\"navbar-dropdown\">\n        {documents.map(document => (\n          <a\n            key={document.name}\n            className=\"navbar-item\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            href={document.url}\n          >\n            {document.name}\n          </a>\n        ))}\n      </div>\n    </div>\n  );\n\nconst HomeLogo: React.FC = () => (\n  <a href={renderRoute(routeHome)} className=\"navbar-item\">\n    <span className=\"icon is-small\" style={{ width: \"3vw\" }}>\n      <i className=\"fas fa-home\"></i>\n    </span>\n  </a>\n);\n\ninterface BurgerButtonProps {\n  expanded: boolean;\n  toggleExpanded: () => void;\n}\n\nconst BurgerButton: React.FC<BurgerButtonProps> = ({\n  expanded,\n  toggleExpanded\n}) => (\n    // eslint-disable-next-line\n    <a\n      role=\"button\"\n      aria-label=\"menu\"\n      aria-expanded={expanded}\n      className={\"navbar-burger\" + (expanded ? \" is-active\" : \"\")}\n      onClick={toggleExpanded}\n    >\n      <span aria-hidden=\"true\" />\n      <span aria-hidden=\"true\" />\n      <span aria-hidden=\"true\" />\n    </a>\n  );\n","import React, { useContext, useState, useCallback, FormEvent } from \"react\";\nimport { GlubHubContext } from \"utils/context\";\nimport { DeleteButton, Button, ButtonGroup, SubmitButton } from \"./Buttons\";\nimport { Enrollment } from \"state/models\";\nimport { Title4 } from \"./Basics\";\nimport {\n  InputWrapper,\n  TextInput,\n  stringType,\n  Control,\n  SelectInput,\n  sectionType\n} from \"./Forms\";\nimport { post } from \"utils/request\";\nimport { Modal } from \"./Complex\";\n\nexport const ConfirmAccountHeader: React.FC = () => {\n  const { user } = useContext(GlubHubContext);\n\n  const [ignoreConfirm, setIgnoreConfirm] = useState(false);\n  const [confirming, setConfirming] = useState(false);\n\n  const isActive = !!user?.enrollment;\n\n  if (!user || isActive || ignoreConfirm) {\n    return <> </>;\n  }\n\n  return (\n    <section\n      style={{ margin: \"2em\", marginBottom: \"-1em\", paddingTop: \"40px\" }}\n    >\n      <div className=\"notification is-info\">\n        <DeleteButton click={() => setIgnoreConfirm(true)} />\n        <div style={{ width: \"100%\", display: \"flex\", alignItems: \"center\" }}>\n          <div>\n            Welcome! Feel free to browse the site, but if you're going to be\n            active in Glee Club this semester, please confirm your account so we\n            can get you into the system.\n          </div>\n          <div>\n            <Button\n              onClick={() => setConfirming(true)}\n              color=\"is-info\"\n              inverted\n              outlined\n              style={{ margin: \"0 2em\" }}\n            >\n              Confirm\n            </Button>\n          </div>\n        </div>\n      </div>\n      {confirming && <ConfirmAccountModal close={() => setConfirming(false)} />}\n    </section>\n  );\n};\n\ninterface SemesterForm {\n  location: string;\n  onCampus: boolean;\n  enrollment: Enrollment;\n  section: string | null;\n}\n\n// TODO: add submission state to this modal\n\ninterface ConfirmAccountModalProps {\n  close: () => void;\n}\n\nexport const ConfirmAccountModal: React.FC<ConfirmAccountModalProps> = ({\n  close\n}) => {\n  const { user, info, refreshAll } = useContext(GlubHubContext);\n\n  const [form, updateForm] = useState<SemesterForm>({\n    location: user?.location || \"\",\n    onCampus: user ? !!user.onCampus : true,\n    enrollment: \"Class\",\n    section: info?.sections[0] || null\n  });\n\n  const confirmAccount = useCallback(async (event: FormEvent) => {\n    event.preventDefault();\n\n    const body = {\n      ...form,\n      section: form.section || \"\",\n      conflicts: \"\",\n      dietaryRestrictions: \"\"\n    };\n\n    const result = await post(\"members/confirm\", body);\n    if (result.successful) {\n      close();\n      refreshAll();\n    }\n  }, [form, close, refreshAll]);\n\n  return (\n    <Modal close={close}>\n      <form onSubmit={confirmAccount}>\n        <Title4>Confirm Your Account</Title4>\n        <InputWrapper horizontal title=\"Location\">\n          <TextInput\n            type={stringType}\n            value={form.location}\n            onInput={location => updateForm({ ...form, location })}\n            placeholder=\"Glenn\"\n            required\n          />\n        </InputWrapper>\n        <InputWrapper horizontal title=\" \">\n          <Control>\n            <ButtonGroup connected>\n              <Button\n                element=\"a\"\n                color={form.onCampus ? \"is-primary\" : undefined}\n                onClick={() => updateForm({ ...form, onCampus: true })}\n              >\n                On-campus\n                </Button>\n              <Button\n                element=\"a\"\n                color={!form.onCampus ? \"is-primary\" : undefined}\n                onClick={() => updateForm({ ...form, onCampus: false })}\n              >\n                Off-campus\n                </Button>\n            </ButtonGroup>\n          </Control>\n        </InputWrapper>\n        <InputWrapper horizontal title=\"Voice Part\">\n          <SelectInput\n            type={sectionType(info)}\n            values={info?.sections || []}\n            selected={form.section}\n            onInput={section => updateForm({ ...form, section })}\n            expanded\n            leftAligned\n          />\n        </InputWrapper >\n        <InputWrapper horizontal title=\"Enrollment\">\n          <Control>\n            <ButtonGroup connected>\n              <Button\n                element=\"a\"\n                color={form.enrollment === \"Class\" ? \"is-primary\" : undefined}\n                onClick={() => updateForm({ ...form, enrollment: \"Class\" })}\n              >\n                Class\n                </Button>\n              <Button\n                element=\"a\"\n                color={form.enrollment === \"Club\" ? \"is-primary\" : undefined}\n                onClick={() => updateForm({ ...form, enrollment: \"Club\" })}\n              >\n                Club\n                </Button>\n            </ButtonGroup>\n          </Control>\n        </InputWrapper>\n        <ButtonGroup alignment=\"is-right\">\n          <SubmitButton color=\"is-primary\">Confirm</SubmitButton>\n        </ButtonGroup>\n      </form>\n    </Modal>\n  );\n};\n","import React, { useRef, useEffect } from \"react\";\nimport { GlubEvent } from \"state/models\";\nimport * as d3 from \"d3\";\nimport { HoveredEvent } from \"./Page\";\nimport { eventIsOver } from \"utils/helpers\";\nimport { GOLD_COLOR } from \"state/constants\";\n\ninterface AttendanceGraphProps {\n  events: GlubEvent[];\n  hover: (event: HoveredEvent | null) => void;\n}\n\nexport const AttendanceGraph: React.FC<AttendanceGraphProps> = ({\n  events,\n  hover\n}) => {\n  const d3Container = useRef<SVGGElement | null>(null);\n\n  const margin = { top: 20, right: 20, bottom: 20, left: 30 };\n  const width = 1350;\n  const height = 400;\n  const pastEvents = events.filter(eventIsOver);\n\n  const x = d3.scaleTime().rangeRound([margin.left, width - margin.right]);\n  const y = d3.scaleLinear().rangeRound([height - margin.bottom, margin.top]);\n  x.domain(d3.extent(events, event => event.callTime) as [number, number]);\n  y.domain([0, 100]);\n\n  useEffect(() => {\n    if (!d3Container.current || !pastEvents.length) return;\n\n    const svg = d3.select(d3Container.current).html(\"\");\n\n    // create axes\n    svg\n      .append(\"g\")\n      .attr(\"transform\", `translate(0, ${height - margin.bottom})`)\n      .call(d3.axisBottom(x).ticks(3));\n    svg\n      .append(\"g\")\n      .attr(\"transform\", `translate(${margin.left}, 0)`)\n      .call(d3.axisLeft(y));\n\n    // draw the line between event grades\n    const valueline = d3\n      .line<{ callTime: number; partialScore: number }>()\n      .x(event => x(event.callTime))\n      .y(event => y(Math.max(0, event.partialScore)))\n      .curve(d3.curveMonotoneX); // http://bl.ocks.org/d3indepth/b6d4845973089bc1012dec1674d3aff8\n    svg\n      .append(\"path\")\n      .datum([\n        {\n          callTime: pastEvents[0].callTime,\n          partialScore: 0\n        },\n        ...pastEvents.map(event => ({\n          callTime: event.callTime,\n          partialScore: event.change!.partialScore\n        })),\n        {\n          callTime: pastEvents[pastEvents.length - 1].callTime,\n          partialScore: 0\n        }\n      ])\n      .attr(\"class\", \"line\")\n      .attr(\"d\", valueline);\n  }, [pastEvents, margin, x, y]);\n\n  return (\n    <svg width={width} height={height}>\n      <g ref={d3Container} />\n\n      <g>\n        {pastEvents.map(event => (\n          <circle\n            cx={x(event.callTime)}\n            cy={y(Math.max(event.change!.partialScore, 0))}\n            r={4}\n            strokeWidth={3}\n            className=\"attendanceDot\"\n          />\n        ))}\n      </g>\n      <g>\n        {pastEvents.map(glubEvent => (\n          <circle\n            cx={x(glubEvent.callTime)}\n            cy={y(Math.max(glubEvent.change!.partialScore, 0))}\n            r={8}\n            fillOpacity={0}\n            onMouseOver={event =>\n              hover({\n                event: glubEvent,\n                x: event.clientX,\n                y: event.clientY\n              })\n            }\n            onMouseOut={() => hover(null)}\n          />\n        ))}\n      </g>\n\n      <defs>\n        <linearGradient id=\"attendanceGradient\" gradientTransform=\"rotate(90)\">\n          <stop offset=\"0%\" stopColor={GOLD_COLOR} stopOpacity={0.85} />\n          <stop offset=\"100%\" stopColor={GOLD_COLOR} stopOpacity={0} />\n        </linearGradient>\n      </defs>\n    </svg>\n  );\n};\n","import React, { useRef, useEffect } from \"react\";\nimport { GlubEvent } from \"state/models\";\nimport { renderRoute, routeEvents } from \"state/route\";\nimport * as d3 from \"d3\";\n\nexport const ThisWeek: React.FC<{ events: GlubEvent[] }> = ({ events }) => {\n  const d3Container = useRef<SVGSVGElement | null>(null);\n\n  const height = 500;\n  const circleX = 100;\n  const circleRadius = 9;\n  const circleLineWidth = 2;\n  const timelineLineWidth = 5;\n\n  // this needs to go from monday to sunday\n  const now = new Date();\n  const monday = d3.timeMonday(now);\n  const sunday = new Date(monday.getTime() + 7 * 86400000 - 1);\n\n  const y = d3.scaleTime().range([height - 20, 10]);\n  y.domain([sunday, monday]);\n\n  const tooCloseToPrevious = (event: GlubEvent, index: number) =>\n    index && y(event.callTime) - y(events[index - 1].callTime) <= 20;\n\n  useEffect(() => {\n    const timeline = d3.select(d3Container.current);\n\n    timeline\n      .append(\"g\")\n      .attr(\"transform\", `translate(${circleX - 1}, 0)`)\n      .call(\n        d3\n          .axisLeft(y)\n          .ticks(7)\n          .tickFormat(date => d3.timeFormat(\"%a\")(date as Date))\n          .tickSizeOuter(0)\n      );\n  }, [events, y]);\n\n  return (\n    <svg height={height}>\n      <g ref={d3Container} />\n      <g>\n        {events.map((event, index) => (\n          <circle\n            className=\"dot\"\n            r={circleRadius}\n            strokeWidth={circleLineWidth}\n            cx={circleX}\n            cy={\n              tooCloseToPrevious(event, index)\n                ? -1 * circleRadius\n                : y(event.callTime)\n            }\n          />\n        ))}\n      </g>\n      <g>\n        <circle\n          className=\"dot now\"\n          r={timelineLineWidth / 2}\n          cx={circleX - 0.5}\n          cy={y(now)}\n        />\n      </g>\n      <g>\n        {events.map((event, index) => {\n          let yPosition: number;\n          if (tooCloseToPrevious(event, index)) {\n            yPosition = y(events[index - 1].callTime) + 16 + circleRadius / 2.0;\n          } else {\n            yPosition = y(event.callTime) + circleRadius / 2.0;\n          }\n\n          return (\n            <foreignObject\n              x={circleX + 15}\n              y={yPosition - 16}\n              height={22}\n              width={300}\n            >\n              <a href={renderRoute(routeEvents(event.id, null))}>\n                {event.name}\n              </a>\n            </foreignObject>\n          );\n        })}\n      </g>\n    </svg>\n  );\n};\n","import React, { useState, useEffect, useContext } from \"react\";\nimport { RemoteData, loading, resultToRemote } from \"state/types\";\nimport { GlubEvent, Enrollment } from \"state/models\";\nimport { get } from \"utils/request\";\nimport {\n  Container,\n  Columns,\n  Section,\n  Title,\n  Column,\n  Box,\n  Tooltip\n} from \"components/Basics\";\nimport { GlubHubContext } from \"utils/context\";\nimport { romanNumeral } from \"utils/helpers\";\nimport { fullDateTimeFormatter, dateFormatter } from \"utils/datetime\";\nimport { AttendanceGraph } from \"./AttendanceGraph\";\nimport { ThisWeek } from \"./ThisWeek\";\nimport { RemoteContent } from \"components/Complex\";\n\nexport const Home: React.FC = () => {\n  const [events, setEvents] = useState<RemoteData<GlubEvent[]>>(loading);\n  const [hovered, setHovered] = useState<HoveredEvent | null>(null);\n\n  useEffect(() => {\n    const loadEvents = async () => {\n      const result = await get<GlubEvent[]>(`events?full=true`);\n      setEvents(resultToRemote(result));\n    };\n\n    loadEvents();\n  }, [setEvents]);\n\n  return (\n    <div className=\"container fullheight\">\n      <RemoteContent\n        data={events}\n        render={events => (\n          <>\n            <GradesBlock\n              finalGrade={events[events.length - 1]?.change?.partialScore}\n              events={events}\n              hoverEvent={setHovered}\n            />\n            {hovered && <EventHoverBox hovered={hovered} />}\n            <Section>\n              <Container>\n                <Columns>\n                  <UpcomingEvents allEvents={events} />\n                  <Volunteerism pastEvents={events} />\n                </Columns>\n              </Container>\n            </Section>\n          </>\n        )}\n      />\n    </div>\n  );\n};\n\nexport interface HoveredEvent {\n  event: GlubEvent;\n  x: number;\n  y: number;\n}\n\nconst attendanceIssueEmail =\n  \"mailto:gleeclub_officers@lists.gatech.edu?subject=Attendance%20Issue\";\n\nconst attendanceMessage = (\n  enrollment: Enrollment | null,\n  finalGrade: number\n): string => {\n  if (!enrollment) {\n    return \"Do you even go here?\";\n  } else if (finalGrade >= 90.0) {\n    return \"Ayy lamo nice.\";\n  } else if (finalGrade >= 80.0) {\n    return \"OK not bad, I guess\";\n  } else if (finalGrade >= 70.0) {\n    return \"Pls\";\n  } else {\n    return \"BRUH get it together.\";\n  }\n};\n\ninterface GradesBlockProps {\n  events: GlubEvent[];\n  finalGrade?: number;\n  hoverEvent: (event: HoveredEvent | null) => void;\n}\n\nconst GradesBlock: React.FC<GradesBlockProps> = ({\n  events,\n  finalGrade,\n  hoverEvent\n}) => {\n  const { user } = useContext(GlubHubContext);\n\n  const grade = typeof finalGrade === 'number' ? finalGrade : 100;\n\n  return (\n    <Section>\n      <Container>\n        <Title>Score</Title>\n        <p>\n          Right now you have a <strong>{grade}</strong>.\n          <br />\n          <span className=\"has-text-grey-light is-italic\">\n            {attendanceMessage(user?.enrollment || null, grade)}\n          </span>\n        </p>\n        {events.length ? (\n          <>\n            <div style={{ width: \"100%\", margin: \"auto\", overflowX: \"scroll\" }}>\n              <AttendanceGraph events={events} hover={hoverEvent} />\n            </div>\n            <p>\n              <br />\n              Do you have an issue? Do you need a daddy tissue?{\" \"}\n              <a href={attendanceIssueEmail}>Email the officers</a> to cry about\n              it.\n            </p>\n          </>\n        ) : (\n            <>\n              <p>New semester, new you! Make it count.</p>\n              <br />\n              <br />\n            </>\n          )}\n      </Container>\n    </Section>\n  );\n};\n\nconst EventHoverBox: React.FC<{ hovered: HoveredEvent }> = ({ hovered }) => (\n  <div\n    className=\"box\"\n    style={{\n      position: \"absolute\",\n      top: `${hovered.y + 20}px`,\n      left: `${hovered.x}px`,\n      transform: \"translateX(-50%)\"\n    }}\n  >\n    <p>\n      <strong>{hovered.event.name}</strong>\n    </p>\n    <p>{fullDateTimeFormatter(hovered.event.callTime)}</p>\n    <p>\n      {hovered.event.change?.change || 0.0} points{\" \"}\n      <span className=\"icon is-primary has-text-primary\">\n        <i className=\"fas fa-arrow-right\" />\n      </span>{\" \"}\n      {hovered.event.change?.partialScore}%\n    </p>\n    <p>\n      <em>{hovered.event.change?.reason}</em>\n    </p>\n  </div>\n);\n\nconst UpcomingEvents: React.FC<{ allEvents: GlubEvent[] }> = ({\n  allEvents\n}) => (\n    <Column>\n      <Title>This Week</Title>\n      <Box>\n        <div className=\"timeline\">\n          <ThisWeek events={allEvents} />\n        </div>\n      </Box>\n    </Column>\n  );\n\nconst Volunteerism: React.FC<{ pastEvents: GlubEvent[] }> = ({\n  pastEvents\n}) => {\n  const { currentSemester } = useContext(GlubHubContext);\n\n  const volunteerGigsAttended = pastEvents.filter(\n    event => event.gigCount && !!event.attendance?.didAttend\n  );\n  const metGigRequirement =\n    volunteerGigsAttended.length >= currentSemester.gigRequirement;\n  const gigList = metGigRequirement\n    ? volunteerGigsAttended\n    : [\n      ...volunteerGigsAttended,\n      ...new Array<GlubEvent | null>(currentSemester.gigRequirement).fill(\n        null\n      )\n    ].slice(0, currentSemester.gigRequirement);\n\n  return (\n    <Column>\n      <Title>Volunteerism</Title>\n      <Box>\n        {metGigRequirement ? (\n          <p>\n            The dedication! The passion! The attendance! You've been to{\" \"}\n            {romanNumeral(volunteerGigsAttended.length)} volunteer gigs this\n            semester. Glub salutes you and your volunteerism.\n          </p>\n        ) : (\n            <p>\n              OK so you've only been to{\" \"}\n              {romanNumeral(volunteerGigsAttended.length)} volunteer gigs this\n            semester and you need to go to{\" \"}\n              {romanNumeral(currentSemester.gigRequirement)}. So. Uh, you know, do\n              that.\n          </p>\n          )}\n        <p style={{ textAlign: \"center\" }}>\n          {gigList.map(gig => (\n            <>\n              <GigIcon gig={gig} />{\" \"}\n            </>\n          ))}\n        </p>\n      </Box>\n    </Column>\n  );\n};\n\ninterface GigIconProps {\n  gig: GlubEvent | null;\n}\n\nconst GigIcon: React.FC<GigIconProps> = ({ gig }) => {\n  if (gig) {\n    return (\n      <Tooltip content={`${gig.name} on ${dateFormatter(gig.callTime)}`}>\n        <span className=\"icon is-large has-text-primary\">\n          <i className=\"far fa-2x fa-check-circle\" />\n        </span>\n      </Tooltip>\n    );\n  } else {\n    return (\n      <Tooltip content=\"Hopefully something soon...\">\n        <span className=\"icon is-large\" style={{ color: \"gray\" }}>\n          <i className=\"far fa-2x fa-frown\" />\n        </span>\n      </Tooltip>\n    );\n  }\n};\n","import \"./App.css\";\nimport React, { useState, useCallback, useEffect } from \"react\";\n\nimport { useGlubRoute, GlubHubContext } from \"utils/context\";\nimport { Admin } from \"page/admin/Page\";\nimport { EditCarpools } from \"page/events/EditCarpools\";\nimport { EditProfile } from \"page/EditProfile\";\nimport { Events } from \"page/events/Page\";\nimport { ForgotPassword } from \"page/ForgotPassword\";\nimport { Login } from \"page/Login\";\nimport { Minutes } from \"page/minutes/Page\";\nimport { Profile } from \"page/profile/Page\";\nimport { Repertoire } from \"page/repertoire/Page\";\nimport { ResetPassword } from \"page/ResetPassword\";\nimport { Roster } from \"page/Roster\";\nimport { Navbar } from \"components/Navbar\";\nimport { ConfirmAccountHeader } from \"components/ConfirmAccount\";\nimport { Router } from \"react-router-dom\";\nimport { createBrowserHistory } from \"history\";\nimport { Home } from \"page/home/Page\";\nimport {\n  RemoteData,\n  loading,\n  errorLoading,\n  loaded,\n  isLoaded\n} from \"state/types\";\nimport { Member, Info, Semester } from \"state/models\";\nimport { getToken, setToken } from \"utils/helpers\";\nimport { collect4, get, success } from \"utils/request\";\nimport { RemoteContent } from \"components/Complex\";\nimport { routeLogin } from \"state/route\";\n\nconst history = createBrowserHistory();\n\nconst App: React.FC = () => {\n  const [appData, setAppData] = useState<\n    RemoteData<{\n      user: Member | null;\n      members: Member[];\n      info: Info;\n      currentSemester: Semester;\n    }>\n  >(loading);\n\n  const refreshAll = useCallback(async () => {\n    const hasToken = !!getToken();\n    const result = await collect4(\n      get<Member | null>(\"user\"),\n      get<Info>(\"static\"),\n      get<Semester>(\"semesters/current\"),\n      hasToken\n        ? get<Member[]>(\"members\")\n        : Promise.resolve(success([] as Member[]))\n    );\n\n    if (result.successful) {\n      const [user, info, currentSemester, members] = result.data;\n      setAppData(loaded({ user, members, info, currentSemester }));\n    } else if (result.error.message === \"login required\") {\n      setToken(null);\n    } else {\n      setAppData(errorLoading(result.error));\n    }\n  }, [setAppData]);\n\n  useEffect(() => {\n    refreshAll();\n  }, [refreshAll]);\n\n  return (\n    <Router history={history}>\n      <div id=\"app\">\n        <Navbar\n          {...(isLoaded(appData) ? appData.data : { user: null, info: null })}\n        />\n        <GlubHubContext.Provider\n          value={\n            isLoaded(appData) ? ({\n              ...(appData.data),\n              refreshAll,\n              updateUser: _ => {},\n              updateMembers: _ => {},\n              updateInfo: _ => {},\n              updateCurrentSemester: _ => {},\n            }) : ({\n              user: null,\n              info: null!,\n              currentSemester: null!,\n              members: [],\n              refreshAll,\n              updateUser: _ => {},\n              updateMembers: _ => {},\n              updateInfo: _ => {},\n              updateCurrentSemester: _ => {},\n           })\n          }\n        >\n          <ConfirmAccountHeader />\n        </GlubHubContext.Provider>\n        <div style={{ paddingBottom: \"50px\" }} />\n        <div className=\"center\">\n          <RemoteContent\n            data={appData}\n            render={appData => (\n              <GlubHubContext.Provider\n                value={{\n                  ...appData,\n                  refreshAll,\n                  updateUser: user => setAppData(loaded({ ...appData, user })),\n                  updateMembers: members =>\n                    setAppData(loaded({ ...appData, members })),\n                  updateInfo: info => setAppData(loaded({ ...appData, info })),\n                  updateCurrentSemester: currentSemester =>\n                    setAppData(loaded({ ...appData, currentSemester }))\n                }}\n              >\n                <CurrentPage loggedIn={!!appData.user} />\n              </GlubHubContext.Provider>\n            )}\n          />\n        </div>\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n\nconst CurrentPage: React.FC<{ loggedIn: boolean }> = ({ loggedIn }) => {\n  const { location, goToRoute } = useGlubRoute();\n\n  if (!loggedIn) {\n    switch (location?.route) {\n      case \"edit-profile\":\n        return <EditProfile />;\n\n      case \"forgot-password\":\n        return <ForgotPassword />;\n\n      case \"reset-password\":\n        return <ResetPassword token={location.token} />;\n\n      default:\n        if (location?.route !== \"login\") {\n          goToRoute(routeLogin);\n        }\n        return <Login />;\n    }\n  }\n\n  switch (location?.route) {\n    case \"admin\":\n      return <Admin tab={location.tab} />;\n\n    case \"edit-carpools\":\n      return <EditCarpools eventId={location.eventId} />;\n\n    case \"edit-profile\":\n      return <EditProfile />;\n\n    case \"events\":\n      return <Events eventId={location.eventId} tab={location.tab} />;\n\n    case \"forgot-password\":\n      return <ForgotPassword />;\n\n    case \"login\":\n      return <Login />;\n\n    case \"minutes\":\n      return <Minutes minutesId={location.minutesId} tab={location.tab} />;\n\n    case \"profile\":\n      return <Profile email={location.email} tab={location.tab} />;\n\n    case \"repertoire\":\n      return <Repertoire songId={location.songId} tab={location.tab} />;\n\n    case \"reset-password\":\n      return <ResetPassword token={location.token} />;\n\n    case \"roster\":\n      return <Roster />;\n\n    default:\n      return <Home />;\n  }\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}